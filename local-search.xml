<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>arithmetic</title>
    <link href="/2021/06/24/arithmetic/"/>
    <url>/2021/06/24/arithmetic/</url>
    
    <content type="html"><![CDATA[<h1 id="经典算法题解析"><a href="#经典算法题解析" class="headerlink" title="经典算法题解析"></a>经典算法题解析</h1><h2 id="1、反转链表"><a href="#1、反转链表" class="headerlink" title="1、反转链表"></a>1、反转链表</h2><p>题目：输入一个链表，反转链表后，输出新链表的表头。</p><p>例如：输入{1,2,3}，返回值{3,2,1}</p><blockquote><p>解析</p></blockquote><p>pre指针：用来记录当前节点的前一个节点</p><p>cur指针：用来指向当前节点</p><p>由于链表只有单向的指向，当我们想要改变当前节点的指向时，为了防止链表断开，我们需要temp指针保存当前节点的后一个节点。</p><p><img src="/2021/06/24/arithmetic/image-20210615194840385.png" alt="image-20210615194840385"></p><p>初始pre为空，cur指向1，断开前为了防止找不到下一个节点，就提前将下一个节点2放入temp中，然后pre节点和cur节点向后移动，如此往复下去。</p><p><img src="/2021/06/24/arithmetic/image-20210615195124122.png" alt="image-20210615195124122"></p><p>cur指向空时，只需返回新链表的头结点（pre现在指向的）即可。</p><p>对于不懂链表的：<a href="https://blog.csdn.net/lilong117194/article/details/83759106">Java链表的基本使用_lilong117194的博客-CSDN博客_java 链表使用</a></p><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaBasicsDemo01;<br><br><span class="hljs-comment">//反转链表</span><br><span class="hljs-comment">//输入一个链表，反转链表后，输出新链表的表头。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseListDemo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ListNode head=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>ListNode node1=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">2</span>);<br>ListNode node2=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">3</span>);<br>head.setNext(node1);<br>node1.setNext(node2);<br>ListNode h=head;<br><span class="hljs-keyword">while</span>( h !=  <span class="hljs-keyword">null</span>)&#123;<br>System.out.print(h.getData()+<span class="hljs-string">&quot; &quot;</span>) ;<br><span class="hljs-comment">//将下一个节点设置为当前节点s</span><br>h = h.getNext() ;<br>&#125;<br>System.out.println();<br>head = ReverseList(head);<br><span class="hljs-keyword">while</span>( <span class="hljs-keyword">null</span> !=  head)&#123;<br>System.out.print(head.getData()+<span class="hljs-string">&quot; &quot;</span>) ;<br><span class="hljs-comment">//将下一个节点设置为当前节点s</span><br>head = head.getNext() ;<br>&#125;<br>&#125;<br>    <span class="hljs-comment">//反转方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title">ReverseList</span><span class="hljs-params">(ListNode pHead)</span> </span>&#123;<br>ListNode pre=<span class="hljs-keyword">null</span>;<br>ListNode cur=pHead;<br>ListNode temp=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">while</span>(cur !=<span class="hljs-keyword">null</span>) &#123;<br>temp=cur.next;<br>cur.next=pre;<br>pre=cur;<br>cur=temp;<br>&#125;<br><span class="hljs-keyword">return</span> pre;<br>&#125;<br>&#125;<br><span class="hljs-comment">//链表类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span> ListNode next;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.data = data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> data;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.data = data;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> next;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(ListNode next)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.next = next;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/24/arithmetic/image-20210615202401186.png" alt="image-20210615202401186"></p><p>更多方法：<a href="https://juejin.cn/post/6844904022344744967">链表反转(Java三种实现方式) (juejin.cn)</a></p><h2 id="2、排序"><a href="#2、排序" class="headerlink" title="2、排序"></a>2、排序</h2><p>题目：给定一个数组，请你编写一个函数，返回该数组排序后的形式。（ 时间限制：1秒    空间限制：256M）</p><p>例如：输入[5,2,3,1,4]，返回值[1,2,3,4,5]</p><h2 id="3、设计LRU缓存结构"><a href="#3、设计LRU缓存结构" class="headerlink" title="3、设计LRU缓存结构"></a>3、设计LRU缓存结构</h2><h2 id="4、判断链表中是否有环"><a href="#4、判断链表中是否有环" class="headerlink" title="4、判断链表中是否有环"></a>4、判断链表中是否有环</h2><p>题目：判断给定的链表中是否有环。如果有环则返回true，否则返回false。</p><p>环形链表的实现：<a href="https://blog.csdn.net/weixin_46726346/article/details/108742370">JAVA实现环形链表（详解）_爱前端的小菜的博客-CSDN博客_java环形链表</a></p><blockquote><p>快慢指针解决</p></blockquote><p>判断链表是否有环应该是老生常谈的一个话题了，最简单的一种方式就是快慢指针，<strong>慢指针针每次走一步，快指针每次走两步</strong>，如果相遇就说明有环，如果有一个为空说明没有环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == nullhead.next==<span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-comment">//快慢两个指针</span><br>    ListNode slow = head;<br>    ListNode fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//慢指针每次走一步</span><br>        slow = slow.next;<br>        <span class="hljs-comment">//快指针每次走两步</span><br>        fast = fast.next.next;<br>        <span class="hljs-comment">//如果相遇，说明有环，直接返回true</span><br>        <span class="hljs-keyword">if</span> (slow == fast)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//否则就是没环</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>快指针每次走两步，慢指针每次走一步，所以每走一次快慢指针的间距就要缩小一步，在图一中当走n次的时候就会相遇，在图二中当走m-n次的时候就会相遇。</p><blockquote><p>存放到集合中</p></blockquote><p>这题还可以把节点存放到集合set中，每次存放的时候判断当前节点是否存在，如果存在，说明有环，直接返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        Set&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//如果重复出现说明有环</span><br>            <span class="hljs-keyword">if</span> (set.contains(head))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-comment">//否则就把当前节点加入到集合中</span><br>            set.add(head);<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>逐个删除</p></blockquote><p>一个链表从头节点开始一个个删除，<strong>所谓删除就是让他的next指针指向他自己</strong>。如果没有环，从头结点一个个删除，最后肯定会删完，如下图所示</p><p><img src="/2021/06/24/arithmetic/4.1.png" alt="图片说明"></p><p>如果是环形的，那么有两种情况，一种是o型的，一种是6型的。原理都是一样，我们就看一下o型的</p><p><img src="/2021/06/24/arithmetic/4.2.png" alt="图片说明"></p><p>如上图所示，如果删到最后，肯定会出现<strong>head=head.next</strong>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-comment">//如果head为空，或者他的next指向为空，直接返回false</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">//如果出现head.next = head表示有环</span><br>        <span class="hljs-keyword">if</span> (head.next == head)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        ListNode nextNode = head.next;<br>        <span class="hljs-comment">//当前节点的next指向他自己，相当于把它删除了</span><br>        head.next = head;<br>        <span class="hljs-comment">//然后递归，查看下一个节点</span><br>        <span class="hljs-keyword">return</span> hasCycle(nextNode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、用两个栈实现队列"><a href="#5、用两个栈实现队列" class="headerlink" title="5、用两个栈实现队列"></a>5、用两个栈实现队列</h2><p>题目：用两个栈来实现一个队列，分别完成在队列尾部插入整数(push)和在队列头部删除整数(pop)的功能。 队列中的元素为int类型。保证操作合法，即保证pop操作时队列内已有元素。</p><p>示例:</p><p>输入:[“PSH1”,”PSH2”,”POP”,”POP”]        返回:1,2</p><p>解析:</p><p>“PSH1”:代表将1插入队列尾部</p><p>“PSH2”:代表将2插入队列尾部</p><p>“POP“:代表删除一个元素，先进先出=&gt;返回1</p><p>“POP“:代表删除一个元素，先进先出=&gt;返回2</p><blockquote><p>方法：模拟</p></blockquote><p>比如有如下操作：(pop操作确保栈中有元素）</p><p><img src="/2021/06/24/arithmetic/5.1.png" alt="img"></p><p>根据队列的特性，只能pop(1),pop(2),pop之后的结果</p><p><img src="/2021/06/24/arithmetic/5.2.png" alt="img"></p><p>上述是队列的操作。<br>当push的时候，我们必须要用一个stack来存，假设用stack1来存。</p><p><img src="/2021/06/24/arithmetic/5.3.png" alt="img"></p><p>那么push操作解决了。那么pop操作怎么办呢？<br>如果pop(1)，但是此时在stack1的栈底，如果要pop，必须再将stack1中的数据push到stack2中，然后在pop，如图</p><p><img src="/2021/06/24/arithmetic/5.4.png" alt="img"></p><p>这样直接弹出stack2的栈顶就可以了。<br>如果要继续pop，那就继续弹出stack2就可以了</p><hr><p>但是现在总感觉哪里还是有点问题。如果是这样就继续测试几个例子。<br>如果push(5)，</p><p><img src="/2021/06/24/arithmetic/5.5.png" alt="img"></p><p><strong>所以最后总结一下：push操作就直接往stack1中push， pop操作需要分类一下：如果stack2为空，那么需要将stack1中的数据转移到stack2中，然后在对stack2进行pop，如果stack2不为空，直接pop就ok。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    Stack&lt;Integer&gt; stack1 = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br>    Stack&lt;Integer&gt; stack2 = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> node)</span> </span>&#123;<br>        stack1.push(node);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(stack2.empty())&#123;<br>        <span class="hljs-keyword">while</span>(!stack1.empty())&#123;<br>            stack2.push(stack1.peek());<br>            stack1.pop();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ret=stack2.peek();<br>        stack2.pop();<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Statck的方法总结（Java）</p></blockquote><ol><li>java中Stack只有一个无参构造函数。</li><li>属于stack自己的方法包括<ol><li>push( num) //入栈</li><li>pop() //栈顶元素出栈</li><li>empty() //判定栈是否为空</li><li>peek() //获取栈顶元素</li><li>search(num) //判端元素num是否在栈中，如果在返回1，不在返回-1。</li></ol></li><li>注意pop()和peek()的区别。pop()会弹出栈顶元素并返回栈顶的值，peek()只是获取栈顶的值，但是并不会把元素从栈顶弹出来。</li></ol><h2 id="6、跳台阶"><a href="#6、跳台阶" class="headerlink" title="6、跳台阶"></a>6、跳台阶</h2><p>题目：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><blockquote><p>方法一：递归</p></blockquote><p>题目分析，假设f[i]表示在第i个台阶上可能的方法数。逆向思维。如果我从第n个台阶进行下台阶，下一步有2中可能，一种走到第n-1个台阶，一种是走到第n-2个台阶。所以f[n] = f[n-1] + f[n-2].<br>那么初始条件了，f[0] = f[1] = 1。<br>所以就变成了：f[n] = f[n-1] + f[n-2], 初始值f[0]=1, f[1]=1，目标求f[n]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//递归方式（斐波那契）</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jumpFloor01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span></span>&#123;<br>       <span class="hljs-keyword">if</span>(target==<span class="hljs-number">1</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target==<span class="hljs-number">2</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>       <span class="hljs-keyword">else</span><br>           <span class="hljs-keyword">return</span> jumpFloor01(target-<span class="hljs-number">1</span>)+jumpFloor01(target-<span class="hljs-number">2</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>优点，代码简单好写，缺点：慢，会超时</p><p><strong>时间复杂度</strong>：O(2^n)<br><strong>空间复杂度</strong>：递归栈的空间</p><blockquote><p>方法二：记忆化搜索（优化递归）</p></blockquote><p>改进，就用数组把计算过的保存下来。</p><p><img src="/2021/06/24/arithmetic/6.1.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//记忆化搜索</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jumpFloor02</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> num[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">50</span>];<br>        <span class="hljs-keyword">return</span> jumNum(target,num);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jumNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target,<span class="hljs-keyword">int</span> num[])</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(target==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(target==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(num[target]!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> num[target];<br>        <span class="hljs-keyword">return</span> num[target]=jumNum(target-<span class="hljs-number">1</span>,num)+jumNum(target-<span class="hljs-number">2</span>,num);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度</strong>：O（n）， 没有重复的计算<br><strong>空间复杂度</strong>：O（n）和递归栈的空间</p><blockquote><p>方法三：动态规划</p></blockquote><p>让空间继续优化，那就用动态规划，优化掉递归栈空间。</p><p>方法二是从上往下递归的然后再从下往上回溯的，最后回溯的时候来合并子树从而求得答案。<br>那么动态规划不同的是，不用递归的过程，直接从子树求得答案。过程是从下往上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//动态规划</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jumpFloor03</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span></span>&#123;<br>       <span class="hljs-keyword">int</span> temp[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">50</span>];<br>       temp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>       temp[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; target; i++) &#123;<br>           temp[i]=temp[i-<span class="hljs-number">1</span>]+temp[i-<span class="hljs-number">2</span>];<br>       &#125;<br>       <span class="hljs-keyword">return</span> temp[target-<span class="hljs-number">1</span>];<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度</strong>：O(n)<br><strong>空间复杂度</strong>：O(n)</p><blockquote><p>动态规划进一步优化</p></blockquote><p>发现计算f[5]的时候只用到了f[4]和f[3], 没有用到f[2]…f[0],所以保存f[2]…f[0]是浪费了空间。<br>只需要用3个变量即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//进一步优化动态规划</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jumpFloor04</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(target==<span class="hljs-number">0</span>||target==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> target+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>,b=<span class="hljs-number">1</span>,c=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=target; i++) &#123;<br>            c=a+b;<br>            a=b;<br>            b=c;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度</strong>：O（n）<br><strong>空间复杂度</strong>：O（1）</p>]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常考Java基础题</title>
    <link href="/2021/06/23/faq/"/>
    <url>/2021/06/23/faq/</url>
    
    <content type="html"><![CDATA[<h1 id="常考题"><a href="#常考题" class="headerlink" title="常考题"></a>常考题</h1><h2 id="1、Java基础"><a href="#1、Java基础" class="headerlink" title="1、Java基础"></a>1、Java基础</h2><p>Java中的53个关键字详解：<a href="https://blog.csdn.net/weixin_44893902/article/details/105204049">Java中的关键字有哪些？「Java中53个关键字的意义及使用方法」_杨明金的博客-CSDN博客_java关键字有哪些</a></p><p><strong>八大基本类型基本常识表</strong></p><p><a href="https://blog.csdn.net/weixin_42089228/article/details/104905036">Java八大基本类型详解_呆呆papa的博客-CSDN博客_八大基本类型</a></p><p><a href="https://blog.csdn.net/qq_37688023/article/details/85106894">java八种基本数据类型及包装类详解_一个Tester的博客-CSDN博客_java八种基本数据类型</a></p><p>位数单位：bits</p><p><img src="/2021/06/23/faq/20181219200330646.png" alt="img"></p><h3 id="1-1、final-finally-和-finalize的区别"><a href="#1-1、final-finally-和-finalize的区别" class="headerlink" title="1.1、final finally 和 finalize的区别"></a>1.1、final finally 和 finalize的区别</h3><p> final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。<br> finally是异常处理语句结构的一部分，表示总是执行。<br> finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</p><h3 id="1-2、Java中private、protected、public和default的区别"><a href="#1-2、Java中private、protected、public和default的区别" class="headerlink" title="1.2、Java中private、protected、public和default的区别"></a>1.2、Java中private、protected、public和default的区别</h3><p><strong>public:</strong></p><p>具有最大的访问权限，可以访问任何一个在classpath下的类、接口、异常等。它往往用于对外的情况，也就是对象或类对外的一种接口的形式。</p><p><strong>protected：</strong></p><p>主要作用是用保护子类的。它的含义在于子类可以用它修饰的成员，其他的不可以，它相当于传递给子类的一种继承的东西。</p><p><strong>default：</strong></p><p>有时也称为friendly，它是针对本包访问而设计的，任何处于本包下的类、接口、异常等，都可以相互访问，即使是父类没有用protected修饰的成员也可以。</p><p><strong>private：</strong></p><p>访问权限仅限于类的内部，是一种封装的体现，例如：大多数成员变量都是修饰符为private的，它们不希望被其他任何外部的类访问。</p><p><img src="/2021/06/23/faq/1.2_1.png" alt="1.2_1"></p><p>注意：java的访问控制是停留在编译层的，也就是它不会在.class文件中留下任何的痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，是可以访问任何包下任何类中的成员，例如，访问类的私有成员也是可能的。</p><p><strong>区别：</strong></p><p><strong>public：可以被所有其他类所访问</strong></p><p><strong>private：只能被自己访问和修改</strong></p><p><strong>protected：自身、子类及同一个包中类可以访问</strong></p><p><strong>default：同一包中的类可以访问，声明时没有加修饰符，认为是friendly。</strong></p><h2 id="2、面向对象基础"><a href="#2、面向对象基础" class="headerlink" title="2、面向对象基础"></a>2、面向对象基础</h2><h2 id="3、面向对象高级"><a href="#3、面向对象高级" class="headerlink" title="3、面向对象高级"></a>3、面向对象高级</h2><h3 id="3-1、finally块在以下几种情况将不会执行"><a href="#3-1、finally块在以下几种情况将不会执行" class="headerlink" title="3.1、finally块在以下几种情况将不会执行"></a>3.1、finally块在以下几种情况将不会执行</h3><p><strong>try-catch-finally块中，finally块在以下几种情况将不会执行。</strong></p><p>（1）finally块中发生了异常。</p><p>（2）程序所在线程死亡。</p><p>（3）在前面的代码中用了System.exit（）；</p><p>（4）关闭了CPU</p><h2 id="4、多线程"><a href="#4、多线程" class="headerlink" title="4、多线程"></a>4、多线程</h2><h2 id="5、泛型"><a href="#5、泛型" class="headerlink" title="5、泛型"></a>5、泛型</h2><h2 id="6、Java常用类库"><a href="#6、Java常用类库" class="headerlink" title="6、Java常用类库"></a>6、Java常用类库</h2><h2 id="7、JavaIO"><a href="#7、JavaIO" class="headerlink" title="7、JavaIO"></a>7、JavaIO</h2><h2 id="8、Java类集框架"><a href="#8、Java类集框架" class="headerlink" title="8、Java类集框架"></a>8、Java类集框架</h2><h3 id="8-1、LinkedList和ArrayList区别"><a href="#8-1、LinkedList和ArrayList区别" class="headerlink" title="8.1、LinkedList和ArrayList区别"></a>8.1、LinkedList和ArrayList区别</h3><ol><li>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 （LinkedList是双向链表，有next也有previous）</li><li>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 </li><li>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</li></ol><h3 id="8-2、HashMap和Hashtable的区别"><a href="#8-2、HashMap和Hashtable的区别" class="headerlink" title="8.2、HashMap和Hashtable的区别"></a>8.2、HashMap和Hashtable的区别</h3><p>HashMap和Hashtable的比较是Java面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap的工作原理、ArrayList与Vector的比较以及这个问题是有关Java 集合框架的最经典的问题。Hashtable是个过时的集合类，存在于Java API中很久了。在Java 4中被重写了，实现了Map接口，所以自此以后也成了Java集合框架中的一部分。Hashtable和HashMap在Java面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何Java面试之前，都不要忘了准备这一题。</p><p>这篇文章中，我们不仅将会看到HashMap和Hashtable的区别，还将看到它们之间的相似之处。</p><p><strong>HashMap和Hashtable的区别</strong></p><p>HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。</p><ol><li>HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。</li><li>HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而如果没有正确的同步的话，多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。</li><li>另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。</li><li>由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。</li><li>HashMap不能保证随着时间的推移Map中的元素次序是不变的。</li></ol><p><strong>要注意的一些重要术语：</strong></p><ol><li><p>sychronized意味着在一次仅有一个线程能够更改Hashtable。就是说任何线程要更新Hashtable时要首先获得同步锁，其它线程要等到同步锁被释放之后才能再次获得同步锁更新Hashtable。</p></li><li><p>Fail-safe和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</p></li><li><p>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</p></li></ol><p><strong>我们能否让HashMap同步？</strong></p><p>HashMap可以通过下面的语句进行同步：<br> Map m = Collections.synchronizeMap(hashMap);</p><p><strong>结论</strong></p><p>Hashtable和HashMap有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用Java 5或以上的话，请使用ConcurrentHashMap吧</p><h3 id="8-3、为什么HashMap线程不安全"><a href="#8-3、为什么HashMap线程不安全" class="headerlink" title="8.3、为什么HashMap线程不安全"></a>8.3、为什么HashMap线程不安全</h3><p>HashMap会进行resize操作，在resize操作的时候会造成线程不安全。</p><p>1、put的时候导致的多线程数据不一致。</p><p>2、另外一个比较明显的线程不安全的问题是HashMap的get操作可能因为resize而引起死循环（cpu100%）。</p><p>详细请看：<a href="https://www.jianshu.com/p/e2f75c8cce01">为什么HashMap线程不安全 - 简书 (jianshu.com)</a></p><h2 id="9、MySQL"><a href="#9、MySQL" class="headerlink" title="9、MySQL"></a>9、MySQL</h2><h3 id="9-1、B树和B-树的区别"><a href="#9-1、B树和B-树的区别" class="headerlink" title="9.1、B树和B+树的区别"></a>9.1、B树和B+树的区别</h3><ol><li><p><strong>B树的每个节点存储了key和data</strong>，key是一条数据记录的键值<br>，是唯一的，data存储的是数据记录除key以外的数据。而<strong>B+树只在叶子节点存储data数据</strong>，这样非叶子节点就能存储更多的key。所以B+树相较于B树来说更加的矮胖，因为索引树很大不能一次IO读取进内存，树的深度越浅，查找数据时IO的次数就越少，效率就更快。</p></li><li><p><strong>B+树的每个叶子节点的指针指向相邻的叶子节点</strong>，构成一个有序链表，可以按照关键码排序的次序遍历全部记录。由于数据顺序排列并且相连，所以便于区间查找和搜索。<strong>而B树叶子节点指针为null</strong>，则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java关键字详解</title>
    <link href="/2021/06/23/keyword/"/>
    <url>/2021/06/23/keyword/</url>
    
    <content type="html"><![CDATA[<h2 id="53个Java关键字"><a href="#53个Java关键字" class="headerlink" title="53个Java关键字"></a>53个Java关键字</h2><p>原文链接：<a href="https://blog.csdn.net/weixin_44893902/article/details/105204049">Java中的关键字有哪些？「Java中53个关键字的意义及使用方法」_杨明金的博客-CSDN博客_java关键字有哪些</a></p><h3 id="Java中的关键字有哪些？"><a href="#Java中的关键字有哪些？" class="headerlink" title="Java中的关键字有哪些？"></a>Java中的关键字有哪些？</h3><p>1）48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</p><p>2）2个保留字（现在没用以后可能用到作为关键字）：goto、const。</p><p>3）3个特殊直接量：true、false、null。</p><h3 id="1-Java的关键字（keyword）有多少个？"><a href="#1-Java的关键字（keyword）有多少个？" class="headerlink" title="1.Java的关键字（keyword）有多少个？"></a>1.Java的关键字（keyword）有多少个？</h3><p>  51+2个保留字=53个关键字(java的关键字都是小写的！！)</p><p>2.Java的保留字(reserve word)有多少个？分别是什么？<br>     2个保留字</p><p>​     Java语言的的保留字是指预留的关键字    </p><p>   1).const  有道释义：n. 常量，常数  </p><p>​            用于修改字段或局部变量的声明。它指定字段或局部变量的值是常数，不能被修改</p><p>   2).goto   有道释义：vi. 转到</p><p>​             指定跳转到标签，找到标签后，程序将处理从下一行开始的命令。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>了解Json、Ajax</title>
    <link href="/2021/06/22/json/"/>
    <url>/2021/06/22/json/</url>
    
    <content type="html"><![CDATA[<h1 id="了解Json和Ajax"><a href="#了解Json和Ajax" class="headerlink" title="了解Json和Ajax"></a>了解Json和Ajax</h1><p>前后端分离：</p><p>后端部署后端，提供接口，提供数据：</p><p>​                json</p><p>前端独立部署，负责渲染后端的数据：</p><h2 id="1、Json"><a href="#1、Json" class="headerlink" title="1、Json"></a>1、Json</h2><h3 id="1-1、什么是Json？"><a href="#1-1、什么是Json？" class="headerlink" title="1.1、什么是Json？"></a>1.1、什么是Json？</h3><blockquote><p>什么是Json？</p></blockquote><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;QinJiang&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><br>var json = &#x27;&#123;<span class="hljs-attr">&quot;a&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-attr">&quot;b&quot;</span>: <span class="hljs-string">&quot;World&quot;</span>&#125;&#x27;; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure><h3 id="1-2、JSON-和-JavaScript-对象互转"><a href="#1-2、JSON-和-JavaScript-对象互转" class="headerlink" title="1.2、JSON 和 JavaScript 对象互转"></a>1.2、JSON 和 JavaScript 对象互转</h3><p><strong>JSON 和 JavaScript 对象互转</strong></p><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">var obj = JSON.parse(&#x27;&#123;<span class="hljs-attr">&quot;a&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-attr">&quot;b&quot;</span>: <span class="hljs-string">&quot;World&quot;</span>&#125;&#x27;);<br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">var json = JSON.stringify(&#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;);<br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>代码测试</strong></p><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Json<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">   <span class="hljs-comment">//编写一个js的对象</span></span><br><span class="javascript">   <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="javascript">       <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="javascript">       <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,</span><br><span class="javascript">       <span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript">   <span class="hljs-comment">//将js对象转换成json字符串</span></span><br><span class="javascript">   <span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(user);</span><br><span class="javascript">   <span class="hljs-built_in">console</span>.log(str);</span><br><span class="javascript">   </span><br><span class="javascript">   <span class="hljs-comment">//将json字符串转换为js对象</span></span><br><span class="javascript">   <span class="hljs-keyword">var</span> user2 = <span class="hljs-built_in">JSON</span>.parse(str);</span><br><span class="javascript">   <span class="hljs-built_in">console</span>.log(user2.age,user2.name,user2.sex);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="/2021/06/22/json/image-20210617152750024.png" alt="image-20210617152750024"></p><h3 id="1-3、Controller返回JSON数据"><a href="#1-3、Controller返回JSON数据" class="headerlink" title="1.3、Controller返回JSON数据"></a>1.3、Controller返回JSON数据</h3><blockquote><p>Controller返回JSON数据</p></blockquote><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置SpringMVC需要的配置</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">//需要导入lombok</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>   <span class="hljs-keyword">private</span> String sex;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><p>编写一个Controller；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/json1&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>       <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>       ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>       <span class="hljs-comment">//创建一个对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江1号&quot;</span>, <span class="hljs-number">7</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>       String str = mapper.writeValueAsString(user);<br>       <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span><br>       <span class="hljs-keyword">return</span> str;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>配置Tomcat ， 启动测试一下！</p><p><img src="/2021/06/22/json/image-20210617152706448.png" alt="image-20210617152706448"></p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p><p>通过@RequestMaping的produces属性来实现，修改下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure><p>再次测试， 乱码问题OK！</p><p><img src="/2021/06/22/json/image-20210617153807979.png" alt="image-20210617153807979"></p><p>【注意：使用json记得处理乱码问题】</p><h3 id="1-4、代码优化及乱码问题解决"><a href="#1-4、代码优化及乱码问题解决" class="headerlink" title="1.4、代码优化及乱码问题解决"></a>1.4、代码优化及乱码问题解决</h3><blockquote><p>代码优化</p></blockquote><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>   <span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br>   <span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>       <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>       ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>       <span class="hljs-comment">//创建一个对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江1号&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>       String str = mapper.writeValueAsString(user);<br>       <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span><br>       <span class="hljs-keyword">return</span> str;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>启动tomcat测试，结果都正常输出！</p><h3 id="1-5、测试集合、时间输出"><a href="#1-5、测试集合、时间输出" class="headerlink" title="1.5、测试集合、时间输出"></a>1.5、测试集合、时间输出</h3><blockquote><p>测试集合输出</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>   <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>   ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>   <span class="hljs-comment">//创建一个对象</span><br>   User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江1号&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>   User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江2号&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>   User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江3号&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>   User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江4号&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>   List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>   list.add(user1);<br>   list.add(user2);<br>   list.add(user3);<br>   list.add(user4);<br><br>   <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>   String str = mapper.writeValueAsString(list);<br>   <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果正常！</p><blockquote><p>输出时间对象</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>   ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>   <span class="hljs-comment">//创建时间一个对象，java.util.Date</span><br>   Date date = <span class="hljs-keyword">new</span> Date();<br>   <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>   String str = mapper.writeValueAsString(date);<br>   <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果 :</p><p>1623916917252</p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>   ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>   <span class="hljs-comment">//不使用时间戳的方式</span><br>   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);<br>   <span class="hljs-comment">//自定义日期格式对象</span><br>   SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>   <span class="hljs-comment">//指定日期格式</span><br>   mapper.setDateFormat(sdf);<br><br>   Date date = <span class="hljs-keyword">new</span> Date();<br>   String str = mapper.writeValueAsString(date);<br><br>   <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果 : 成功的输出了时间！</p><p>“2021-06-17 16:02:59”</p><h3 id="1-6、工具类提取"><a href="#1-6、工具类提取" class="headerlink" title="1.6、工具类提取"></a>1.6、工具类提取</h3><blockquote><p>抽取为工具类</p></blockquote><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>&#123;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object,String dateFormat)</span> </span>&#123;<br>       ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>       <span class="hljs-comment">//不使用时间差的方式</span><br>       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);<br>       <span class="hljs-comment">//自定义日期格式对象</span><br>       SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);<br>       <span class="hljs-comment">//指定日期格式</span><br>       mapper.setDateFormat(sdf);<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>      &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>           e.printStackTrace();<br>      &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用工具类，代码就更加简洁了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json5&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>   Date date = <span class="hljs-keyword">new</span> Date();<br>   String json = JsonUtils.getJson(date);<br>   <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成！</p><h3 id="1-7、FastJson"><a href="#1-7、FastJson" class="headerlink" title="1.7、FastJson"></a>1.7、FastJson</h3><blockquote><p>FastJson</p></blockquote><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.zhao.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">//创建一个对象</span><br>       User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江1号&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江2号&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江3号&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;长江4号&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>       list.add(user1);<br>       list.add(user2);<br>       list.add(user3);<br>       list.add(user4);<br><br>       System.out.println(<span class="hljs-string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);<br>       String str1 = JSON.toJSONString(list);<br>       System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);<br>       String str2 = JSON.toJSONString(user1);<br>       System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);<br><br>       System.out.println(<span class="hljs-string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);<br>       User jp_user1=JSON.parseObject(str2,User.class);<br>       System.out.println(<span class="hljs-string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);<br><br>       System.out.println(<span class="hljs-string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);<br>       JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);<br>       System.out.println(<span class="hljs-string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="hljs-string">&quot;name&quot;</span>));<br><br>       System.out.println(<span class="hljs-string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);<br>       User to_java_user = JSON.toJavaObject(jsonObject1, User.class);<br>       System.out.println(<span class="hljs-string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p><h2 id="2、Ajax"><a href="#2、Ajax" class="headerlink" title="2、Ajax"></a>2、Ajax</h2><blockquote><p>简介</p></blockquote><ul><li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><blockquote><p>伪造Ajax</p></blockquote><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>kuangshen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">   <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">       <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;currentTime&#x27;</span>).innerText = myDate.getTime();</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LoadPage</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">       <span class="hljs-keyword">var</span> targetUrl =  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;url&#x27;</span>).value;</span><br><span class="javascript">       <span class="hljs-built_in">console</span>.log(targetUrl);</span><br><span class="javascript">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;iframePosition&quot;</span>).src = targetUrl;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入要加载的地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;currentTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;LoadPage()&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载页面位置：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframePosition&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、使用IDEA开浏览器测试一下！</p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><blockquote><p>jQuery.ajax</p></blockquote><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">jQuery.ajax(...)<br>      部分参数：<br>            url：请求地址<br>            type：请求方式，GET、POST（1.9.0之后用method）<br>        headers：请求头<br>            data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;)<br>          async：是否异步<br>        timeout：设置请求超时时间（毫秒）<br>      beforeSend：发送请求前执行的函数(全局)<br>        complete：完成之后执行的回调函数(全局)<br>        success：成功之后执行的回调函数(全局)<br>          error：失败之后执行的回调函数(全局)<br>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>        dataType：将服务器端返回的数据转换成指定类型<br>          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式<br>          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式<br>          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象<br>        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , 最简单 , 最通用</strong></p><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxController</span> </span>&#123;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/a1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>           response.getWriter().print(<span class="hljs-string">&quot;true&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>           response.getWriter().print(<span class="hljs-string">&quot;false&quot;</span>);<br>      &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、编写index.jsp测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$Title$<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  &lt;%--<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>--%&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">           $.post(&#123;</span><br><span class="javascript">               <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="javascript">               <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="javascript">               <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data,status</span>) </span>&#123;</span><br><span class="javascript">                   alert(data);</span><br><span class="javascript">                   alert(status);</span><br><span class="javascript">              &#125;</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>&lt;%--onblur：失去焦点触发事件--%&gt;<br>用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtName&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;</span><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><strong>Springmvc实现</strong></p><p>实体类user</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>   <span class="hljs-keyword">private</span> String sex;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们来获取一个集合对象，展示到前端页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">ajax2</span><span class="hljs-params">()</span></span>&#123;<br>   List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>   list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>   list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>   list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>   <span class="hljs-keyword">return</span> list; <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">   $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">       $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">           $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">               <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">               <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="javascript">                   html+= <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="javascript">              &#125;</span><br><span class="javascript">               $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><blockquote><p>注册提示效果</p></blockquote><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name,String pwd)</span></span>&#123;<br>   String msg = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-comment">//模拟数据库中存在数据</span><br>   <span class="hljs-keyword">if</span> (name!=<span class="hljs-keyword">null</span>)&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>           msg = <span class="hljs-string">&quot;OK&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>           msg = <span class="hljs-string">&quot;用户名输入错误&quot;</span>;<br>      &#125;<br>  &#125;<br>   <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-keyword">null</span>)&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;123456&quot;</span>.equals(pwd))&#123;<br>           msg = <span class="hljs-string">&quot;OK&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>           msg = <span class="hljs-string">&quot;密码输入有误&quot;</span>;<br>      &#125;<br>  &#125;<br>   <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前端页面 login.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ajax<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">           $.post(&#123;</span><br><span class="javascript">               <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="javascript">               <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="javascript">               <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                   <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="javascript">                       $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);</span><br><span class="javascript">                  &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                       $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">                  &#125;</span><br><span class="javascript">                   $(<span class="hljs-string">&quot;#userInfo&quot;</span>).html(data);</span><br><span class="javascript">              &#125;</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">           $.post(&#123;</span><br><span class="javascript">               <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="javascript">               <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:$(<span class="hljs-string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="javascript">               <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                   <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="javascript">                       $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);</span><br><span class="javascript">                  &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                       $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">                  &#125;</span><br><span class="javascript">                   $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="javascript">              &#125;</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a2()&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwdInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="/2021/06/22/json/641.png" alt="641"></p><blockquote><p>获取baidu接口Demo</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSONP百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">       <span class="hljs-selector-id">#q</span>&#123;</span><br><span class="css">           <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">           <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">           <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="css">           <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">           <span class="hljs-attribute">display</span>: block;</span><br><span class="css">           <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">           <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">       <span class="hljs-selector-id">#ul</span>&#123;</span><br><span class="css">           <span class="hljs-attribute">width</span>: <span class="hljs-number">520px</span>;</span><br><span class="css">           <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">           <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">           <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">           <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="css">           <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="css">           <span class="hljs-attribute">display</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">       <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css">           <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">           <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">       <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">           <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f60</span>;</span><br><span class="css">           <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">      &#125;</span><br><span class="css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">       <span class="hljs-comment">// 2.步骤二</span></span><br><span class="javascript">       <span class="hljs-comment">// 定义demo函数 (分析接口、数据)</span></span><br><span class="javascript">       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">           <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="javascript">           <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">           <span class="hljs-comment">// 如果搜索数据存在 把内容添加进去</span></span><br><span class="javascript">           <span class="hljs-keyword">if</span> (data.s.length) &#123;</span><br><span class="javascript">               <span class="hljs-comment">// 隐藏掉的ul显示出来</span></span><br><span class="javascript">               Ul.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="javascript">               <span class="hljs-comment">// 搜索到的数据循环追加到li里</span></span><br><span class="javascript">               <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.s.length;i++)&#123;</span><br><span class="javascript">                   html += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">               <span class="hljs-comment">// 循环的li写入ul</span></span><br><span class="javascript">               Ul.innerHTML = html;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">       <span class="hljs-comment">// 1.步骤一</span></span><br><span class="javascript">       <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">           <span class="hljs-comment">// 获取输入框和ul</span></span><br><span class="javascript">           <span class="hljs-keyword">var</span> Q = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;q&#x27;</span>);</span><br><span class="javascript">           <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">           <span class="hljs-comment">// 事件鼠标抬起时候</span></span><br><span class="javascript">           Q.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">               <span class="hljs-comment">// 如果输入框不等于空</span></span><br><span class="javascript">               <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="javascript">                   <span class="hljs-comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><br><span class="javascript">                   <span class="hljs-comment">// 创建标签</span></span><br><span class="javascript">                   <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="javascript">                   <span class="hljs-comment">//给定要跨域的地址 赋值给src</span></span><br><span class="javascript">                   <span class="hljs-comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><br><span class="javascript">                   script.src = <span class="hljs-string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="hljs-built_in">this</span>.value+<span class="hljs-string">&#x27;&amp;cb=demo&#x27;</span>;</span><br><span class="javascript">                   <span class="hljs-comment">// 将组合好的带src的script标签追加到body里</span></span><br><span class="javascript">                   <span class="hljs-built_in">document</span>.body.appendChild(script);</span><br><span class="javascript">              &#125;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;q&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、拦截器，文佳上传下载"><a href="#3、拦截器，文佳上传下载" class="headerlink" title="3、拦截器，文佳上传下载"></a>3、拦截器，文佳上传下载</h2><blockquote><p>概述</p></blockquote><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><h3 id="3-1、拦截器"><a href="#3-1、拦截器" class="headerlink" title="3.1、拦截器"></a>3.1、拦截器</h3><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><blockquote><p>自定义拦截器</p></blockquote><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p><p>2、配置web.xml 和 springmvc-servlet.xml 文件</p><p>3、编写一个拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>   <span class="hljs-comment">//在请求处理的方法之前执行</span><br>   <span class="hljs-comment">//如果返回true执行下一个拦截器</span><br>   <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;------------处理前------------&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br><br>   <span class="hljs-comment">//在请求处理方法执行之后执行</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;------------处理后------------&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-comment">//在dispatcherServlet处理后执行,做清理工作.</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;------------清理------------&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span><br>       <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span><br>       <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5、编写一个Controller，接收请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">//测试拦截器的控制器</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorController</span> </span>&#123;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/interceptor&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testFunction</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;控制器中的方法执行了&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、前端 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;拦截器测试&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>7、启动tomcat 测试一下！</p><p><img src="/2021/06/22/json/640.png" alt="图片"></p><blockquote><p>验证用户是否登录 (认证</p></blockquote><p><strong>实现思路</strong></p><p>1、有一个登陆页面，需要写一个controller访问页面。</p><p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p><p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p><strong>测试：</strong></p><p>1、编写一个登陆页面  login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;h1&gt;登录页面&lt;/h1&gt;<br>&lt;hr&gt;<br><br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;<br>  用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;<br>  密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span>&gt; &lt;br&gt;<br>   &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>2、编写一个Controller处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>   <span class="hljs-comment">//跳转到登陆页面</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/jumplogin&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-comment">//跳转到成功页面</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpSuccess</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-comment">//登陆提交</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpSession session, String username, String pwd)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">// 向session记录用户身份信息</span><br>       System.out.println(<span class="hljs-string">&quot;接收前端===&quot;</span>+username);<br>       session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, username);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-comment">//退出登陆</span><br>   <span class="hljs-meta">@RequestMapping(&quot;logout&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">// session 过期</span><br>       session.invalidate();<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、编写一个登陆成功的页面 success.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;登录成功页面&lt;/h1&gt;<br>&lt;hr&gt;<br><br>$&#123;user&#125;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;注销&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br>   &lt;title&gt;$Title$&lt;/title&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;h1&gt;首页&lt;/h1&gt;<br> &lt;hr&gt;<br>&lt;%--登录--%&gt;<br> &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;</span>&gt;登录&lt;/a&gt;<br> &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;</span>&gt;成功页面&lt;/a&gt;<br> &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>5、编写用户登录拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>       <span class="hljs-comment">// 如果是登陆页面则放行</span><br>       System.out.println(<span class="hljs-string">&quot;uri: &quot;</span> + request.getRequestURI());<br>       <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;login&quot;</span>)) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>      &#125;<br><br>       HttpSession session = request.getSession();<br><br>       <span class="hljs-comment">// 如果用户已登陆也放行</span><br>       <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>) != <span class="hljs-keyword">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>      &#125;<br><br>       <span class="hljs-comment">// 用户没有登陆跳转到登陆页面</span><br>       request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>  &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、在Springmvc的配置文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginInterceptor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7、再次重启Tomcat测试！</p><p><strong>OK，测试登录拦截功能无误.</strong></p><h3 id="3-2、文件上传"><a href="#3-2、文件上传" class="headerlink" title="3.2、文件上传"></a>3.2、文件上传</h3><blockquote><p>准备</p></blockquote><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>   &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>/&gt;<br>   &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><blockquote><p>文件上传</p></blockquote><p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--servlet-api导入高版本的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p> 我们去实际测试一下</p><p>3、编写前端页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/upload&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br> &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>/&gt;<br> &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;upload&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>4、<strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br>   <span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br>   <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>       <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>       String uploadFileName = file.getOriginalFilename();<br><br>       <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>      &#125;<br>       System.out.println(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br><br>       <span class="hljs-comment">//上传路径保存设置</span><br>       String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>       <span class="hljs-comment">//如果路径不存在，创建一个</span><br>       File realPath = <span class="hljs-keyword">new</span> File(path);<br>       <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>           realPath.mkdir();<br>      &#125;<br>       System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>       InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>       OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br><br>       <span class="hljs-comment">//读取写出</span><br>       <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>           os.write(buffer,<span class="hljs-number">0</span>,len);<br>           os.flush();<br>      &#125;<br>       os.close();<br>       is.close();<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、测试上传文件，OK！</p><p><strong>采用file.Transto 来保存上传的文件</strong></p><p>1、编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 采用file.Transto 来保存上传的文件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>   <span class="hljs-comment">//上传路径保存设置</span><br>   String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   File realPath = <span class="hljs-keyword">new</span> File(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>       realPath.mkdir();<br>  &#125;<br>   <span class="hljs-comment">//上传文件地址</span><br>   System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>   <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>   file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">&quot;/&quot;</span>+ file.getOriginalFilename()));<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、前端表单提交地址修改</p><p>3、访问提交测试，OK！</p><h3 id="3-3、文件下载"><a href="#3-3、文件下载" class="headerlink" title="3.3、文件下载"></a>3.3、文件下载</h3><blockquote><p>文件下载</p></blockquote><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/download&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>   <span class="hljs-comment">//要下载的图片地址</span><br>   String  path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   String  fileName = <span class="hljs-string">&quot;基础语法.jpg&quot;</span>;<br><br>   <span class="hljs-comment">//1、设置response 响应头</span><br>   response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>   response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//字符编码</span><br>   response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>); <span class="hljs-comment">//二进制传输数据</span><br>   <span class="hljs-comment">//设置响应头</span><br>   response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>           <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>   File file = <span class="hljs-keyword">new</span> File(path,fileName);<br>   <span class="hljs-comment">//2、 读取文件--输入流</span><br>   InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);<br>   <span class="hljs-comment">//3、 写出文件--输出流</span><br>   OutputStream out = response.getOutputStream();<br><br>   <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>   <span class="hljs-comment">//4、执行 写出操作</span><br>   <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>       out.write(buff, <span class="hljs-number">0</span>, index);<br>       out.flush();<br>  &#125;<br>   out.close();<br>   input.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;/download&quot;</span>&gt;点击下载&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了</p>]]></content>
    
    
    <categories>
      
      <category>Spring全家桶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ssm整合</title>
    <link href="/2021/06/21/ssm/"/>
    <url>/2021/06/21/ssm/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC：整合SSM"><a href="#SpringMVC：整合SSM" class="headerlink" title="SpringMVC：整合SSM"></a>SpringMVC：整合SSM</h1><p>环境：</p><ul><li>IDEA</li><li>MySQL 5.7.19</li><li>Tomcat 9</li><li>Maven 3.6</li></ul><p>需要用到的知识点：</p><ul><li>MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><h2 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h2><p>创建一个存放书籍数据的数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `ssmbuild`;<br><br>USE `ssmbuild`;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `books`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `books` (<br>`bookID` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;书id&#x27;</span>,<br>`bookName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;书名&#x27;</span>,<br>`bookCounts` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;数量&#x27;</span>,<br>`detail` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;描述&#x27;</span>,<br>KEY `bookID` (`bookID`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Java&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;从入门到放弃&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;MySQL&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;从删库到跑路&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Linux&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;从进门到进牢&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p><p>2、导入相关的pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--Junit--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Servlet - JSP --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、Maven资源过滤设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、建立基本结构和配置框架！</p><ul><li>com.kuang.pojo</li><li>com.kuang.dao</li><li>com.kuang.service</li><li>com.kuang.controller</li><li>mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h2><p>1、数据库配置文件 <strong>database.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>2、IDEA关联数据库</p><p>3、编写MyBatis的核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/kuang/dao/BookMapper.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p><p>使用lombok插件！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookID;<br>   <span class="hljs-keyword">private</span> String bookName;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookCounts;<br>   <span class="hljs-keyword">private</span> String detail;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>5、编写Dao层的 Mapper接口！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.dao;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Books;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;<br><br>   <span class="hljs-comment">//增加一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span></span>;<br><br>   <span class="hljs-comment">//根据id删除一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>   <span class="hljs-comment">//更新Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>   <span class="hljs-comment">//根据id查询,返回一个Book</span><br>   <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>   <span class="hljs-comment">//查询全部Book,返回list集合</span><br>   <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.dao.BookMapper&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--增加一个Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      insert into ssmbuild.books(bookName,bookCounts,detail)<br>      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--根据id删除一个Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBookById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>      delete from ssmbuild.books where bookID=#&#123;bookID&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--更新Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      update ssmbuild.books<br>      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;<br>      where bookID = #&#123;bookID&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--根据id查询,返回一个Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      select * from ssmbuild.books<br>      where bookID = #&#123;bookID&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--查询全部Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAllBook&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      SELECT * from ssmbuild.books<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7、编写Service层的接口和实现类</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.service;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Books;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//BookService:底下需要去实现,调用dao层</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br>   <span class="hljs-comment">//增加一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span></span>;<br>   <span class="hljs-comment">//根据id删除一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>   <span class="hljs-comment">//更新Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br>   <span class="hljs-comment">//根据id查询,返回一个Book</span><br>   <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>   <span class="hljs-comment">//查询全部Book,返回list集合</span><br>   <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.service;<br><br><span class="hljs-keyword">import</span> com.kuang.dao.BookMapper;<br><span class="hljs-keyword">import</span> com.kuang.pojo.Books;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br><br>   <span class="hljs-comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span><br>   <span class="hljs-keyword">private</span> BookMapper bookMapper;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.bookMapper = bookMapper;<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.addBook(book);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.updateBook(books);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.queryAllBook();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><h2 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h2><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置整合mybatis --&gt;</span><br>   <span class="hljs-comment">&lt;!-- 1.关联数据库文件 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span><br>   <span class="hljs-comment">&lt;!--数据库连接池</span><br><span class="hljs-comment">       dbcp 半自动化操作 不能自动连接</span><br><span class="hljs-comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="hljs-comment">   --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br>   <span class="hljs-comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.kuang.dao&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、<strong>Spring整合service层</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 扫描service相关的bean --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.service&quot;</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h2><p>1、<strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  <br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>          org.springframework.web.filter.CharacterEncodingFilter<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、<strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span><br>   <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-service.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mvc.xml&quot;</span>/&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><p>1、BookController 类编写 ， 方法一：查询全部书籍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span><br>   <span class="hljs-keyword">private</span> BookService bookService;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>       List&lt;Books&gt; list = bookService.queryAllBook();<br>       model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>, list);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、编写首页 <strong>index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;!DOCTYPE HTML&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;首页&lt;/title&gt;<br>   &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>       a &#123;<br>           text-decoration: none;<br>           color: black;<br>           font-size: 18px;<br>      &#125;<br>       h3 &#123;<br>           width: 180px;<br>           height: 38px;<br>           margin: 100px auto;<br>           text-align: center;<br>           line-height: 38px;<br>           background: deepskyblue;<br>           border-radius: 4px;<br>      &#125;<br>   &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h3&gt;<br>   &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;点击进入列表页&lt;/a&gt;<br>&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>3、书籍列表页面 <strong>allbook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;书籍列表&lt;/title&gt;<br>   &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>   &lt;!-- 引入 Bootstrap --&gt;<br>   &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br><br>   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>               &lt;h1&gt;<br>                   &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;<br>               &lt;/h1&gt;<br>           &lt;/div&gt;<br>       &lt;/div&gt;<br>   &lt;/div&gt;<br><br>   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-4 column&quot;</span>&gt;<br>           &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增&lt;/a&gt;<br>       &lt;/div&gt;<br>   &lt;/div&gt;<br><br>   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>           &lt;table <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table table-hover table-striped&quot;</span>&gt;<br>               &lt;thead&gt;<br>               &lt;tr&gt;<br>                   &lt;th&gt;书籍编号&lt;/th&gt;<br>                   &lt;th&gt;书籍名字&lt;/th&gt;<br>                   &lt;th&gt;书籍数量&lt;/th&gt;<br>                   &lt;th&gt;书籍详情&lt;/th&gt;<br>                   &lt;th&gt;操作&lt;/th&gt;<br>               &lt;/tr&gt;<br>               &lt;/thead&gt;<br><br>               &lt;tbody&gt;<br>               &lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;<br>                   &lt;tr&gt;<br>                       &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;<br>                       &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;<br>                       &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;<br>                       &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;<br>                       &lt;td&gt;<br>                           &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;更改&lt;/a&gt; |<br>                           &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;删除&lt;/a&gt;<br>                       &lt;/td&gt;<br>                   &lt;/tr&gt;<br>               &lt;/c:forEach&gt;<br>               &lt;/tbody&gt;<br>           &lt;/table&gt;<br>       &lt;/div&gt;<br>   &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>4、BookController 类编写 ， 方法二：添加书籍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toAddBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toAddPaper</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addPaper</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>   System.out.println(books);<br>   bookService.addBook(books);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、添加书籍页面：<strong>addBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;新增书籍&lt;/title&gt;<br>   &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>   &lt;!-- 引入 Bootstrap --&gt;<br>   &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br><br>   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>               &lt;h1&gt;<br>                   &lt;small&gt;新增书籍&lt;/small&gt;<br>               &lt;/h1&gt;<br>           &lt;/div&gt;<br>       &lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>      书籍名称：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;<br>      书籍数量：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;<br>      书籍详情：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;<br>       &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;添加&quot;</span>&gt;<br>   &lt;/form&gt;<br><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>6、BookController 类编写 ， 方法三：修改书籍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdateBook</span><span class="hljs-params">(Model model, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>   Books books = bookService.queryBookById(id);<br>   System.out.println(books);<br>   model.addAttribute(<span class="hljs-string">&quot;book&quot;</span>,books );<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateBook&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/updateBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateBook</span><span class="hljs-params">(Model model, Books book)</span> </span>&#123;<br>   System.out.println(book);<br>   bookService.updateBook(book);<br>   Books books = bookService.queryBookById(book.getBookID());<br>   model.addAttribute(<span class="hljs-string">&quot;books&quot;</span>, books);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7、修改书籍页面  <strong>updateBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;修改信息&lt;/title&gt;<br>   &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>   &lt;!-- 引入 Bootstrap --&gt;<br>   &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br><br>   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>           &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>               &lt;h1&gt;<br>                   &lt;small&gt;修改信息&lt;/small&gt;<br>               &lt;/h1&gt;<br>           &lt;/div&gt;<br>       &lt;/div&gt;<br>   &lt;/div&gt;<br><br>   &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>       &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;bookID&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;<br>      书籍名称：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;<br>      书籍数量：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;<br>      书籍详情：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;<br>       &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>/&gt;<br>   &lt;/form&gt;<br><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>8、BookController 类编写 ， 方法四：删除书籍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>   bookService.deleteBookById(id);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>配置Tomcat，进行运行！</strong></p><p><strong>项目结构图</strong> </p><p><img src="/2021/06/21/ssm/640.png" alt="640"></p><p><img src="/2021/06/21/ssm/640-1624243505956.png" alt="640"></p>]]></content>
    
    
    <categories>
      
      <category>Spring全家桶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java小游戏-飞机大战</title>
    <link href="/2021/06/17/planewar/"/>
    <url>/2021/06/17/planewar/</url>
    
    <content type="html"><![CDATA[<h1 id="Java小游戏-飞机大战"><a href="#Java小游戏-飞机大战" class="headerlink" title="Java小游戏-飞机大战"></a>Java小游戏-飞机大战</h1><h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><p><img src="/2021/06/17/planewar/image-20210617190351585.png" alt="image-20210617190351585"></p><p>img文件夹：飞机，子弹、背景的图片</p><p>ui文件夹：具体的实现类</p><h2 id="GameFrame窗口"><a href="#GameFrame窗口" class="headerlink" title="GameFrame窗口"></a>GameFrame窗口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">//游戏的窗体类：JFrame</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    自定义窗体步骤：固定的模式</span><br><span class="hljs-comment">    1.写一个类，继承JFrame</span><br><span class="hljs-comment">    2.写一个构造方法，初始化窗体的属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GameFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GameFrame</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//设置标题</span><br>        setTitle(<span class="hljs-string">&quot;全民飞机大战&quot;</span>);<br>        <span class="hljs-comment">//设置大小</span><br>        setSize(<span class="hljs-number">512</span>,<span class="hljs-number">768</span>);<br>        <span class="hljs-comment">/*设置窗体位置居中显示</span><br><span class="hljs-comment">          null：表示想对屏幕左上角居中</span><br><span class="hljs-comment">        */</span><br>        setLocationRelativeTo(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//设置不允许玩家改变界面大小</span><br>        setResizable(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//设置默认的关闭选项，关闭窗体时退出程序</span><br>        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        GameFrame frame=<span class="hljs-keyword">new</span> GameFrame();<br>        <span class="hljs-comment">//创建面板对象，调用面板的构造方法，制作面板</span><br>        GamePanel panel=<span class="hljs-keyword">new</span> GamePanel(frame);<span class="hljs-comment">//frame 方便在面板中添加键盘监听器</span><br>        <span class="hljs-comment">//调用开始游戏的方法</span><br>        panel.action();<br>        <span class="hljs-comment">//将面板加入到窗体中</span><br>        frame.add(panel);<br>        <span class="hljs-comment">//显示窗体</span><br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="GamePanel游戏画板"><a href="#GamePanel游戏画板" class="headerlink" title="GamePanel游戏画板"></a>GamePanel游戏画板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.MouseAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.MouseEvent;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">//Java中的游戏面板：JPanel</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    自定义游戏面板</span><br><span class="hljs-comment">    1.写一个类，继承JPanel</span><br><span class="hljs-comment">    2.写一个构造方法，初始化面板的属性</span><br><span class="hljs-comment">    画图片的步骤：</span><br><span class="hljs-comment">    1.在类中定义图片，并取名</span><br><span class="hljs-comment">    2.在构造方法中，调用工具初始化图片</span><br><span class="hljs-comment">    3.在画图方法中，paint中，画图片</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JPanel</span> </span>&#123;<br>    <span class="hljs-comment">//1.定义背景图</span><br>    BufferedImage bg;<br>    <span class="hljs-comment">//创建英雄机</span><br>    HeroPanel heroPanel=<span class="hljs-keyword">new</span> HeroPanel();<br>    <span class="hljs-comment">//创建敌机大本营</span><br>    List&lt;EPlanes&gt; ePlanesList=<span class="hljs-keyword">new</span> ArrayList&lt;EPlanes&gt;();<br>    <span class="hljs-comment">//创建英雄机的弹药库</span><br>    List&lt;Fire&gt; fs=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-comment">//游戏分数</span><br>    <span class="hljs-keyword">int</span> score;<br>    <span class="hljs-comment">//设置游戏的开关</span><br>    <span class="hljs-keyword">boolean</span> gameover=<span class="hljs-keyword">false</span>;<span class="hljs-comment">//游戏开始时，gameover为false，游戏结束时gameover为true</span><br>    <span class="hljs-comment">//设置英雄机的火力</span><br>    <span class="hljs-keyword">int</span> power=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开始游戏的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//创建并启动一个线程，控制游戏场景中物体移动</span><br>        <span class="hljs-keyword">new</span> Thread()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">//死循环，游戏一直运行</span><br>                <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(!gameover)&#123;<br>                        <span class="hljs-comment">//调用敌机入场的方法</span><br>                        epEnter();<br>                        <span class="hljs-comment">//调用让敌机移动的方法</span><br>                        epMove();<br>                        <span class="hljs-comment">//发射子弹</span><br>                        shoot();<br>                        <span class="hljs-comment">//子弹移动</span><br>                        fireMove();<br>                        <span class="hljs-comment">//判断子弹是否打到敌机</span><br>                        shootEp();<br>                        <span class="hljs-comment">//判断敌机是否撞到了英雄机</span><br>                        hit();<br>                    &#125;<br>                    <span class="hljs-comment">//每执行一次休眠</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">30</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    <span class="hljs-comment">//重绘</span><br>                    repaint();<br>                &#125;<br>            &#125;<br>        &#125;.start();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测敌机是否撞到了英雄机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hit</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//遍历敌机</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ePlanesList.size(); i++) &#123;<br>            <span class="hljs-comment">//获得一个敌机</span><br>            EPlanes e=ePlanesList.get(i);<br>            <span class="hljs-comment">//如果敌机被英雄机撞到</span><br>            <span class="hljs-keyword">if</span>(e.hitBy(heroPanel))&#123;<br>                <span class="hljs-comment">//1.删除敌机</span><br>                ePlanesList.remove(e);<br>                <span class="hljs-comment">//2.英雄机的血量减少</span><br>                heroPanel.hp--;<br>                power=<span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//3.增加分数</span><br>                score+=<span class="hljs-number">10</span>;<br>                <span class="hljs-comment">//当英雄机的血量减少到0时，游戏结束</span><br>                <span class="hljs-keyword">if</span>(heroPanel.hp&lt;=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//游戏结束</span><br>                    gameover=<span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测子弹打敌机</span><br><span class="hljs-comment">     * 排除移除屏幕的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shootEp</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//遍历所有的子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fs.size(); i++) &#123;<br>            Fire f=fs.get(i);<br>            <span class="hljs-comment">//每拿一颗子弹，就判断是否击中敌机</span><br>            bang(f);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断一颗子弹是否击中敌机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bang</span><span class="hljs-params">(Fire f)</span></span>&#123;<br>        <span class="hljs-comment">//遍历所有的敌机</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ePlanesList.size(); i++) &#123;<br>            EPlanes e=ePlanesList.get(i);<br>            <span class="hljs-comment">//判断是否击中敌机</span><br>            <span class="hljs-keyword">if</span>(e.shootBy(f))&#123;<br>                <span class="hljs-comment">//若击中，敌机消失，子弹消失</span><br>                <span class="hljs-comment">//1.让敌机的血量减少</span><br>                e.hp--;<br>                <span class="hljs-comment">//当敌机血量减少到0时</span><br>                <span class="hljs-keyword">if</span>(e.hp&lt;=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//判断敌机是否是道具机</span><br>                    <span class="hljs-keyword">if</span>(e.type==<span class="hljs-number">13</span>)&#123;<br>                        <span class="hljs-comment">//增加火力值</span><br>                        power++;<br>                        <span class="hljs-comment">//如果power&gt;3，增加血量</span><br>                        <span class="hljs-keyword">if</span>(power&gt;<span class="hljs-number">3</span>)&#123;<br>                            heroPanel.hp++;<br>                            <span class="hljs-keyword">if</span>(heroPanel.hp&gt;<span class="hljs-number">5</span>)&#123;<br>                                heroPanel.hp=<span class="hljs-number">5</span>;<br>                            &#125;<br>                            power=<span class="hljs-number">3</span>;<br>                        &#125;<br>                    &#125;<br>                    ePlanesList.remove(e);<span class="hljs-comment">//从敌机大本营中删除敌机</span><br>                    <span class="hljs-comment">//增加分数</span><br>                    score+=<span class="hljs-number">10</span>;<br>                &#125;<br>                fs.remove(f);<span class="hljs-comment">//子弹库中删除子弹</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子弹移动的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fireMove</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fs.size(); i++) &#123;<br>            <span class="hljs-comment">//获取一个子弹</span><br>            Fire f=fs.get(i);<br>            f.move();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发射子弹的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> findex=<span class="hljs-number">0</span>;<span class="hljs-comment">//计数器，记录shoot方法执行的次数</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shoot</span><span class="hljs-params">()</span></span>&#123;<br>        findex ++;<br>        <span class="hljs-keyword">if</span>(findex&gt;=<span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">if</span>(power==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">//创建子弹</span><br>                Fire fire2=<span class="hljs-keyword">new</span> Fire(heroPanel.x+<span class="hljs-number">45</span>,heroPanel.y-<span class="hljs-number">20</span>,<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//将子弹加到弹药库</span><br>                fs.add(fire2);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(power==<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-comment">//创建子弹</span><br>                Fire fire1=<span class="hljs-keyword">new</span> Fire(heroPanel.x+<span class="hljs-number">12</span>,heroPanel.y,<span class="hljs-number">0</span>);<br>                <span class="hljs-comment">//将子弹加到弹药库</span><br>                fs.add(fire1);<br>                <span class="hljs-comment">//创建子弹</span><br>                Fire fire2=<span class="hljs-keyword">new</span> Fire(heroPanel.x+<span class="hljs-number">45</span>,heroPanel.y-<span class="hljs-number">20</span>,<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//将子弹加到弹药库</span><br>                fs.add(fire2);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//创建子弹</span><br>                Fire fire1=<span class="hljs-keyword">new</span> Fire(heroPanel.x+<span class="hljs-number">12</span>,heroPanel.y,<span class="hljs-number">0</span>);<br>                <span class="hljs-comment">//将子弹加到弹药库</span><br>                fs.add(fire1);<br>                <span class="hljs-comment">//创建子弹</span><br>                Fire fire2=<span class="hljs-keyword">new</span> Fire(heroPanel.x+<span class="hljs-number">45</span>,heroPanel.y-<span class="hljs-number">20</span>,<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//将子弹加到弹药库</span><br>                fs.add(fire2);<br>                <span class="hljs-comment">//创建子弹</span><br>                Fire fire3=<span class="hljs-keyword">new</span> Fire(heroPanel.x+<span class="hljs-number">78</span>,heroPanel.y,<span class="hljs-number">2</span>);<br>                <span class="hljs-comment">//将子弹加到弹药库</span><br>                fs.add(fire3);<br>            &#125;<br>            findex =<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敌机移动的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">epMove</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//遍历所有的敌机</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ePlanesList.size(); i++) &#123;<br>            <span class="hljs-comment">//获取每一个敌机</span><br>            EPlanes e=ePlanesList.get(i);<br>            <span class="hljs-comment">//敌机移动</span><br>            e.move();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敌机入场的方法</span><br><span class="hljs-comment">     * 此方法在死循环中调用的，所以该方法会一直重复执行</span><br><span class="hljs-comment">     * 执行 20次 epEnter方法才出现一个敌机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录方法执行的次数，每执行n此 释放一个敌机</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">epEnter</span><span class="hljs-params">()</span></span>&#123;<br>        index++;<br>        <span class="hljs-keyword">if</span>(index&gt;=<span class="hljs-number">30</span>-score/<span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-comment">//创建敌机</span><br>            EPlanes ePlanes=<span class="hljs-keyword">new</span> EPlanes();<br>            <span class="hljs-comment">//将敌机加入到敌机大本营中</span><br>            ePlanesList.add(ePlanes);<br>            index=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GamePanel</span><span class="hljs-params">(GameFrame frame)</span></span>&#123;<br>        <span class="hljs-comment">//设置背景</span><br>        setBackground(Color.pink);<br>        <span class="hljs-comment">//初始化图片</span><br>        bg = AppUtil.getImg(<span class="hljs-string">&quot;/img/bg2.jpg&quot;</span>);<br>        <span class="hljs-comment">//使用鼠标监听器</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1.创建鼠标适配器</span><br><span class="hljs-comment">         * 2.确定需要监听的鼠标的事件</span><br><span class="hljs-comment">         *      mouseMoved() 监听鼠标移动</span><br><span class="hljs-comment">         *      mouseCliked() 监听鼠标单击事件</span><br><span class="hljs-comment">         *      mousePressed() 监听鼠标按下去的事件</span><br><span class="hljs-comment">         *      mouseEnterd() 监听鼠标移入游戏界面事件</span><br><span class="hljs-comment">         *      mouseExited() 监听鼠标移出游戏界面事件</span><br><span class="hljs-comment">         *      MouseEvent：鼠标的书剑，记录鼠标做的事情</span><br><span class="hljs-comment">         *  3.适配器加入到监听器中</span><br><span class="hljs-comment">         */</span><br>        MouseAdapter adapter=<span class="hljs-keyword">new</span> MouseAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br>                <span class="hljs-comment">//点击鼠标时</span><br>                <span class="hljs-comment">//如果游戏结束了，点击屏幕时重新开始游戏</span><br>                <span class="hljs-keyword">if</span>(gameover)&#123;<br>                    <span class="hljs-comment">//重新开始游戏</span><br>                    <span class="hljs-comment">//重新创建一个英雄机</span><br>                    heroPanel=<span class="hljs-keyword">new</span> HeroPanel();<br>                    <span class="hljs-comment">//重置游戏的开关</span><br>                    gameover=<span class="hljs-keyword">false</span>;<br>                    score=<span class="hljs-number">0</span>;<br>                    <span class="hljs-comment">//清空敌机集合</span><br>                    ePlanesList.clear();<br>                    <span class="hljs-comment">//清空子弹集合</span><br>                    fs.clear();<br>                    <span class="hljs-comment">//随机背景图</span><br>                    Random rd=<span class="hljs-keyword">new</span> Random();<br>                    <span class="hljs-keyword">int</span> index=rd.nextInt(<span class="hljs-number">5</span>)+<span class="hljs-number">1</span>;<br>                    bg=AppUtil.getImg(<span class="hljs-string">&quot;/img/bg&quot;</span>+index+<span class="hljs-string">&quot;.jpg&quot;</span>);<br>                    <span class="hljs-comment">//刷新界面</span><br>                    repaint();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseMoved</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br>                <span class="hljs-comment">//让英雄机的横纵坐标等于鼠标的横纵坐标，获取鼠标坐标</span><br>                <span class="hljs-keyword">int</span> mx=e.getX();<br>                <span class="hljs-keyword">int</span> my=e.getY();<br>                <span class="hljs-comment">//如果游戏没有结束</span><br>                <span class="hljs-keyword">if</span>(!gameover)&#123;<br>                    <span class="hljs-comment">//鼠标移动时，让英雄机与鼠标一起移动</span><br>                    heroPanel.moveToMouse(mx,my);<br>                &#125;<br>                <span class="hljs-comment">//刷新界面，将英雄机绘制在新的位置上，重新调用paint()方法</span><br>                repaint();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//加入监听器</span><br>        addMouseListener(adapter);<br>        addMouseMotionListener(adapter);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 使用键盘监听器</span><br><span class="hljs-comment">         * 1.创建键盘适配器</span><br><span class="hljs-comment">         * 2.确定监听事件</span><br><span class="hljs-comment">         *  keyPressed() 按键盘</span><br><span class="hljs-comment">         * 3.适配器加入到监听器中</span><br><span class="hljs-comment">         */</span><br>        KeyAdapter kad=<span class="hljs-keyword">new</span> KeyAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> </span>&#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 监听键盘的按键，每个按键都有编码</span><br><span class="hljs-comment">                 * 获取键盘对应编码 W:87 S:83 A:65 D 68 空格:32</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">int</span> keyCode=e.getKeyCode();;<br>                <span class="hljs-keyword">if</span>(!gameover)&#123;<br>                    <span class="hljs-keyword">if</span>(keyCode==KeyEvent.VK_UP)&#123;<br>                        <span class="hljs-comment">//按了上键向上移动</span><br>                        heroPanel.moveUp();<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode==KeyEvent.VK_DOWN)&#123;<br>                        heroPanel.moveDown();<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode==KeyEvent.VK_LEFT)&#123;<br>                        heroPanel.moveLeft();<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode==KeyEvent.VK_RIGHT)&#123;<br>                        heroPanel.moveRight();<br>                    &#125;<br>                    repaint();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//加入监听器（加到窗体的键盘监听器中）</span><br>        frame.addKeyListener(kad);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    专用画图方法</span><br><span class="hljs-comment">    Graphics g 画笔</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.paint(g);<br>        <span class="hljs-comment">//画图片</span><br>        <span class="hljs-comment">//g.drawImage(图片,图片的横坐标,图片的纵坐标,null)</span><br>        <span class="hljs-comment">//横纵坐标，是设置图片左上角的坐标</span><br>        g.drawImage(bg,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//在paint中画图存在顺序，先画会被后画的覆盖</span><br>        <span class="hljs-comment">//画英雄机</span><br>        g.drawImage(heroPanel.img,heroPanel.x,heroPanel.y,heroPanel.w,heroPanel.h,<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//画敌机，遍历敌机大本营</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ePlanesList.size(); i++) &#123;<br>            EPlanes ep=ePlanesList.get(i);<br>            g.drawImage(ep.img,ep.x,ep.y,ep.w,ep.h,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-comment">//画子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fs.size(); i++) &#123;<br>            <span class="hljs-comment">//获取一个子弹</span><br>            Fire fire=fs.get(i);<br>            g.drawImage(fire.img,fire.x,fire.y,fire.w,fire.h,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-comment">//画分数</span><br>        g.setColor(Color.white);<br>        g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;楷体&quot;</span>,Font.BOLD,<span class="hljs-number">20</span>));<br>        g.drawString(<span class="hljs-string">&quot;分数：&quot;</span>+score,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>);<br><br>        <span class="hljs-comment">//画英雄机的血量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; heroPanel.hp; i++) &#123;<br>            g.drawImage(heroPanel.img,<span class="hljs-number">300</span>+i*<span class="hljs-number">35</span>,<span class="hljs-number">5</span>,<span class="hljs-number">30</span>,<span class="hljs-number">30</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//游戏结束时画gameover</span><br>        <span class="hljs-keyword">if</span> (gameover) &#123;<br>            g.setColor(Color.green);<br>            g.fillRect(<span class="hljs-number">0</span> , <span class="hljs-number">200</span>, <span class="hljs-number">512</span> ,<span class="hljs-number">200</span>);<br>            g.setColor(Color.red);<br>            g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;楷体&quot;</span>,Font.BOLD,<span class="hljs-number">35</span>));<br>            g.drawString(<span class="hljs-string">&quot;GAMEOVER!&quot;</span>,<span class="hljs-number">150</span>,<span class="hljs-number">300</span>);<br>            g.setColor(Color.red);<br>            g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;楷体&quot;</span>,Font.BOLD,<span class="hljs-number">20</span>));<br>            g.drawString(<span class="hljs-string">&quot;点击屏幕任意处重新开始!&quot;</span>,<span class="hljs-number">130</span>,<span class="hljs-number">350</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AppUtil图片工具类"><a href="#AppUtil图片工具类" class="headerlink" title="AppUtil图片工具类"></a>AppUtil图片工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">处理图片的工具类</span><br><span class="hljs-comment">工具类的写法：工具类中一般会将项目中需要重复使用代码抽离出来，定义成工具方法</span><br><span class="hljs-comment"> 工具类中的方法，一般需要加static</span><br><span class="hljs-comment"> static特点：</span><br><span class="hljs-comment"> 公用的，所有对象都共用这一方法</span><br><span class="hljs-comment"> static修饰不依赖对象，可以直接通过类名调用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppUtil</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      读取指定位置上的图片</span><br><span class="hljs-comment">      BufferedImage Java中用来表示图片的类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title">getImg</span><span class="hljs-params">(String path)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        App.class 找到App类的路径</span><br><span class="hljs-comment">        getResource 获取资源</span><br><span class="hljs-comment">        path 图片的路径</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            BufferedImage img = ImageIO.read(AppUtil.class.getResource(path));<br>            <span class="hljs-keyword">return</span> img;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">//捕获找不到的原因</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FlyObject飞行物父类"><a href="#FlyObject飞行物父类" class="headerlink" title="FlyObject飞行物父类"></a>FlyObject飞行物父类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><br><span class="hljs-comment">//场景中的飞行物</span><br><span class="hljs-comment">//在开发中，我们通常会将具有形同特点的类放到一起，将这些相同的抽离出来</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyObject</span> </span>&#123;<br>    <span class="hljs-comment">//飞行物的图片</span><br>    BufferedImage img;<br>    <span class="hljs-keyword">int</span> x;<span class="hljs-comment">//横坐标</span><br>    <span class="hljs-keyword">int</span> y;<span class="hljs-comment">//纵坐标</span><br>    <span class="hljs-keyword">int</span> w;<span class="hljs-comment">//宽度</span><br>    <span class="hljs-keyword">int</span> h;<span class="hljs-comment">//高度</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HeroPanel玩家飞机"><a href="#HeroPanel玩家飞机" class="headerlink" title="HeroPanel玩家飞机"></a>HeroPanel玩家飞机</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 英雄机类</span><br><span class="hljs-comment"> * 属性对应特点，方法对应行为</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FlyObject</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hp;<span class="hljs-comment">//英雄机的血量</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 确定英雄机的特点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroPanel</span><span class="hljs-params">()</span></span>&#123;<br>        img= AppUtil.getImg(<span class="hljs-string">&quot;/img/hero.png&quot;</span>);<span class="hljs-comment">//显示图片</span><br>        x=<span class="hljs-number">200</span>;<br>        y=<span class="hljs-number">500</span>;<br>        w=img.getWidth();<br>        h=img.getHeight();<br>        <span class="hljs-comment">//确定游戏开始时英雄机的初始血量</span><br>        hp=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-comment">//英雄机移动到鼠标位置上的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveToMouse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> mx,<span class="hljs-keyword">int</span> my)</span></span>&#123;<br>        x=mx-w/<span class="hljs-number">2</span>;<br>        y=my-h/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">//向上移动的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveUp</span><span class="hljs-params">()</span></span>&#123;<br>        y-=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">//向下移动的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveDown</span><span class="hljs-params">()</span></span>&#123;<br>        y+=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">//向左移动的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveLeft</span><span class="hljs-params">()</span></span>&#123;<br>        x-=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">//向右移动的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveRight</span><span class="hljs-params">()</span></span>&#123;<br>        x+=<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Fire飞机子弹"><a href="#Fire飞机子弹" class="headerlink" title="Fire飞机子弹"></a>Fire飞机子弹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><span class="hljs-comment">//子弹类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fire</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FlyObject</span></span>&#123;<br>    <span class="hljs-keyword">int</span> dir;<span class="hljs-comment">//子弹移动的方向，0：左上角 1：垂直 2：右上角</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造方法，初始化子弹</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hx,<span class="hljs-keyword">int</span> hy,<span class="hljs-keyword">int</span> dir)</span></span>&#123;<br>        <span class="hljs-comment">//确定子弹的图片</span><br>        img=AppUtil.getImg(<span class="hljs-string">&quot;/img/fire.png&quot;</span>);<br>        w=img.getWidth()/<span class="hljs-number">4</span>;<br>        h=img.getHeight()/<span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//初始位置在英雄机</span><br>        x=hx;<br>        y=hy;<br>        <span class="hljs-keyword">this</span>.dir=dir;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子弹移动的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(dir==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//左上角飞</span><br>            x-=<span class="hljs-number">1</span>;<br>            y-=<span class="hljs-number">10</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dir==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//垂直</span><br>            y-=<span class="hljs-number">10</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//右上角</span><br>            x+=<span class="hljs-number">1</span>;<br>            y-=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="NPC飞机"><a href="#NPC飞机" class="headerlink" title="NPC飞机"></a>NPC飞机</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ui;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">//敌机类</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 敌机数量很多  Java中存放多个数据：数组，集合</span><br><span class="hljs-comment">* 敌机的数量是未知的</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EPlanes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FlyObject</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hp;<br>    <span class="hljs-keyword">int</span> type;<span class="hljs-comment">//敌机的类型</span><br>    <span class="hljs-keyword">int</span> speed;<span class="hljs-comment">//敌机的速度</span><br>    <span class="hljs-comment">//定型敌机</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EPlanes</span><span class="hljs-params">()</span></span>&#123;<br>        Random rd=<span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> index=rd.nextInt(<span class="hljs-number">15</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//设置敌机的类型</span><br>        type=index;<br>        <span class="hljs-comment">//三目运算符</span><br>        <span class="hljs-comment">//格式：条件表达式?值1:值2</span><br>        String path=<span class="hljs-string">&quot;/img/ep&quot;</span>+(index&lt;<span class="hljs-number">10</span>?<span class="hljs-string">&quot;0&quot;</span>:<span class="hljs-string">&quot;&quot;</span>)+index+<span class="hljs-string">&quot;.png&quot;</span>;<br>        img=AppUtil.getImg(path);<br>        w=img.getWidth();<br>        h=img.getHeight();<br>        <span class="hljs-comment">//nextInt(num)，表示会在0到num之间随机生成一个整数</span><br>        x=rd.nextInt(<span class="hljs-number">512</span>-w);<br>        y=-h;<br>        <span class="hljs-comment">//设置速度</span><br>        speed=<span class="hljs-number">17</span>-index;<br>        <span class="hljs-keyword">if</span>(index&lt;=<span class="hljs-number">4</span>)&#123;<br>            hp=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index&gt;<span class="hljs-number">4</span>&amp;&amp;index&lt;=<span class="hljs-number">8</span>)&#123;<br>            hp=<span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index&gt;<span class="hljs-number">8</span>&amp;&amp;index&lt;<span class="hljs-number">14</span>)&#123;<br>            hp=index/<span class="hljs-number">3</span>;<br>        &#125;<span class="hljs-keyword">else</span><br>            hp=index/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敌机移动的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>&#123;<br>        y+=speed;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断敌机是否被子弹打中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shootBy</span><span class="hljs-params">(Fire f)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> hit=x&lt;=f.x+f.w<br>                &amp;&amp;x&gt;f.x-w  &amp;&amp;<br>                y&lt;=f.y+f.h &amp;&amp;<br>                y&gt;f.y-h;<br>        <span class="hljs-keyword">return</span> hit ;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敌机和英雄机碰撞</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hitBy</span><span class="hljs-params">(HeroPanel f)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> hit=x&lt;=f.x+f.w<br>                &amp;&amp;x&gt;f.x-w  &amp;&amp;<br>                y&lt;=f.y+f.h &amp;&amp;<br>                y&gt;f.y-h;<br>        <span class="hljs-keyword">return</span> hit ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2021/06/17/planewar/image-20210617191011515.png" alt="image-20210617191011515"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2021/06/05/springmvc/"/>
    <url>/2021/06/05/springmvc/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、回顾"><a href="#1、回顾" class="headerlink" title="1、回顾"></a>1、回顾</h2><p><strong>回顾MVC架构</strong></p><p>MVC：模型（dao，service）    视图（jsp）    控制器（Servlet）</p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给Servlet</li><li>Servlet转向JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p>职责分析：</p><p>Controller：1.取得表单数据        2.调用业务逻辑        3.转向指定的页面</p><p>Model：1.业务逻辑        2.保存数据的状态</p><p>View：1.显示页面</p><p><strong>回顾Servlet</strong></p><p>编写一个Servlet类，处理用户请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1.获取前端参数</span><br>        String method = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-keyword">if</span>(method.equals(<span class="hljs-string">&quot;add&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了add方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(method.equals(<span class="hljs-string">&quot;delete&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了delete方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.调用业务层</span><br>        <span class="hljs-comment">//3.视图转发或者重定向</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhao.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    &lt;session-config&gt;</span><br><span class="hljs-comment">        &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="hljs-comment">    &lt;/session-config&gt;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    &lt;welcome-file-list&gt;</span><br><span class="hljs-comment">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="hljs-comment">    &lt;/welcome-file-list&gt;--&gt;</span><br></code></pre></td></tr></table></figure><p>MVC框架要做的：</p><ol><li>将url映射到Java类或Java类的方法。</li><li>封装用户提交的数据。</li><li>处理请求–调用相关的业务处理–封装响应数据。</li><li>将响应的数据进行渲染，jsp/html等表示层数据。</li></ol><h2 id="2、初始SpringMVC"><a href="#2、初始SpringMVC" class="headerlink" title="2、初始SpringMVC"></a>2、初始SpringMVC</h2><p>SpringMVC是Spring Framework的一部分，是基于MVC的轻量级Web框架（底层是Servlet）。</p><p>Spring：大杂烩，我们可以讲SpringMVC中所有要用到的bean，注册到Spring中！</p><p>约定大于配置，支持RESTful、数据验证、格式化、本地化、主题等</p><p>Spring的Web框架围绕DIspatcherServlet[调度Servlet]设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的形式进行开发，十分简洁；</p><p>SpringMVC与Spring无缝集成（使用SpringIoC和Aop），使用约定优于配置，能进行简单的junit测试，支持Restful风格，异常处理，本地化，国际化，数据验证，类型转换，拦截器等等。</p><p><img src="/2021/06/05/springmvc/image-20210615145028222-1623844974928.png" alt="image-20210615145028222"></p><h2 id="3、SpringMVC执行原理"><a href="#3、SpringMVC执行原理" class="headerlink" title="3、SpringMVC执行原理"></a>3、SpringMVC执行原理</h2><p><img src="/2021/06/05/springmvc/image-20210615163236353-1623844974929.png" alt="image-20210615163236353"></p><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul><li>我们假设请求的url为：<a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></li><li>如上url拆分为三个部分：</li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li></ul></li><li>HandlerMapping为处理器映射。DIspatcherServlet调用HandlerMapping，HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DIspatcherServlet，如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DIspatcherServlet。</li><li>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><hr><p><strong>注解实现第一个SpringMVC程序</strong></p><p>文件结构全部都基本一致</p><img src="/2021/06/05/springmvc/image-20210615172920114.png" alt="image-20210615172920114"><blockquote><p>web.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置DispatcherServlet：这个是SpringMVC的核心；请求分发器，前端控制器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--DispatcherServlet要绑定Spring的配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动级别：1--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    在SpringMVC中，/  /*</span><br><span class="hljs-comment">    /：只匹配所有的请求，不会去匹配jsp页面</span><br><span class="hljs-comment">    /*：匹配所有的请求，包括jsp页面</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>资源文件springmvc-servlet.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--处理器映射器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--处理器适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--BeanNameUrlHandlerMapping：bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhao.controller.HelloController&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.controller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ModelAndView mv=<span class="hljs-keyword">new</span> ModelAndView();<br><br>        <span class="hljs-comment">//业务代码</span><br>        String result=<span class="hljs-string">&quot;helloSpringMVC&quot;</span>;<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,result);<br>        <span class="hljs-comment">//视图跳转</span><br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/05/springmvc/image-20210615170110084-1623844974929.png" alt="image-20210615170110084"></p><h2 id="4、注解开发SpringMVC"><a href="#4、注解开发SpringMVC" class="headerlink" title="4、注解开发SpringMVC"></a>4、注解开发SpringMVC</h2><blockquote><p>现在pom.xml文件中导入资源文件过滤器</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>web.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置DispatcherServlet：这个是SpringMVC的核心；请求分发器，前端控制器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--DispatcherServlet要绑定Spring的配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动级别：1--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    在SpringMVC中，/  /*</span><br><span class="hljs-comment">    /：只匹配所有的请求，不会去匹配jsp页面</span><br><span class="hljs-comment">    /*：匹配所有的请求，包括jsp页面</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>资源文件 springmvc-servlet.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhao.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 .css .js .html .mp3--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    支持mvc注解驱动</span><br><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">        要想使@RequestMapping注解生效</span><br><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//封装数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;helloSpringMVC-annotation&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<span class="hljs-comment">//会被视图解析器处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;msg&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/05/springmvc/image-20210615172613031-1623844974929.png" alt="image-20210615172613031"></p><p>使用SpringMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器和处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，省去了大量的xml配置</p><h2 id="5、Controller配置总结"><a href="#5、Controller配置总结" class="headerlink" title="5、Controller配置总结"></a>5、Controller配置总结</h2><blockquote><p>控制器Controller</p></blockquote><ul><li><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或者注解定义两种方法实现。</p></li><li><p>控制器负责解析用户的请求并将其转换为一个模型。</p></li><li><p>在SpringMVC中以恶控制器类可以包含多个方法</p></li><li><p>在SpringMVC中，对于Controller的配置方式有多种</p><p>实现方式：</p></li></ul><blockquote><p>实现Controller接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Controller</span></span>&#123;<br>    <span class="hljs-comment">//处理请求且返回一个模型与视图对象</span><br>    <span class="hljs-function">ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest var1,HttpServletResponse var2)</span> throw Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>编写控制器类，实现Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器，注意不要导错包，实现Controller接口，重写方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//返回一个模型视图对象</span><br>        ModelAndView mv=<span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;陈国洋牛逼&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>去Spring配置文件中注册请求的bean；name对应请求路径；class对应处理请求的类</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/t1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhao.controller.ControllerTest01&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;msg&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/05/springmvc/image-20210616153109907-1623844974930.png" alt="image-20210616153109907"></p><p>说明：</p><ul><li>实现接口Controller定义控制器是较老的方法</li><li>缺点是：一个控制器中只有一个方法，如果多个方法则需要定义多个Controller；定义的方式比较麻烦。</li></ul><blockquote><p>使用注解@Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>组件<br><span class="hljs-meta">@Service</span>service<br><span class="hljs-meta">@Controller</span>controller<br><span class="hljs-meta">@Repository</span>dao<br></code></pre></td></tr></table></figure><ul><li>@Controller注解类型用于声明Spring类的实例是一个控制器；</li><li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有的注解类交给IOC容器管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhao.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>增加一个控制类，使用注解实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加刀Spring上下文中</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest02</span> </span>&#123;<br>    <span class="hljs-comment">//映射访问路径</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//SpringMVC会自动实例化一个Model对象用于向视图中传值</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成果与牛逼&quot;</span>);<br>        <span class="hljs-comment">//返回视图位置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/05/springmvc/image-20210616154742998-1623844974930.png" alt="image-20210616154742998"></p><p>@Controller代表这个类会被Spring接管,被这个注解的类中的所有方法，如果返回值是String，并且有具体的页面可以跳转，那么就会被视图解析器解析；</p><blockquote><p>@RequestMapping</p></blockquote><ul><li>@RequestMapping注解用于映射url刀控制器类或一个特定的处理程序方法，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</li><li>为了测试结论更加准确，我们可以加上一个项目名测试myweb</li><li>只注解在方法上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span></span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D/t1">http://localhost:8080/项目名/t1</a></p><ul><li>同时注解类与方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span></span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D/admin/t1">http://localhost:8080/项目名/admin/t1</a></p><h2 id="6、RestFul风格"><a href="#6、RestFul风格" class="headerlink" title="6、RestFul风格"></a>6、RestFul风格</h2><blockquote><p>ResFul风格</p></blockquote><p>RestFul就是一个资源定位以及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>概念</strong></p><p>​    Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><ul><li>资源:互联网所有的事物都可以被抽象为资源</li><li>资源操作:使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应添加、删除、修改、查询。</li></ul><p><strong>传统方式操作资源</strong>︰通过不同的参数来实现不同的效果!方法单一，post和get</p><ul><li><a href="http://127.0.0.1/item/queryltem.action?id=1">http://127.0.0.1/item/queryltem.action?id=1</a> 查询,GET</li><li><a href="http://127.0.0.1/item/saveltem.action">http://127.0.0.1/item/saveltem.action</a> 新增,POST</li><li><a href="http://127.0.0.1/item/updateltem.action">http://127.0.0.1/item/updateltem.action</a> 更新,POST</li><li><a href="http://127.0.0.1/item/deleteltem.action?id=1">http://127.0.0.1/item/deleteltem.action?id=1</a> 删除,GET或POST</li></ul><p><strong>使用RESTful操作资源</strong>︰可以通过不同的请求方式来实现不同的效果!如下:请求地址一样，但是功能可以不同!</p><ul><li><a href="http://127.0.0.1/item/1%E6%9F%A5%E8%AF%A2,GET">http://127.0.0.1/item/1查询,GET</a></li><li><a href="http://127.0.0.1/item%E6%96%B0%E5%A2%9E,POST">http://127.0.0.1/item新增,POST</a></li><li><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</li><li><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</li></ul><blockquote><p>代码实现</p></blockquote><ol><li>在控制器类中使用@PathVariable注解，让方法参数的值对应绑定到一个URL模板变量上。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br>    <span class="hljs-comment">//原来的：http://localhost:8080/springmvc_04_controller_war_exploded/add?a=1&amp;&amp;b=2</span><br>    <span class="hljs-comment">//RestFul：http://localhost:8080/springmvc_04_controller_war_exploded/add/a/b</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res=a+b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;结果为：&quot;</span>+res);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/addRF/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res=a+b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;结果为：&quot;</span>+res);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/add2/&#123;a&#125;/&#123;b&#125;&quot;)</span><span class="hljs-comment">//提交形式为GET</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res=a+b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;加法结果为：&quot;</span>+res);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@PostMapping(&quot;/add2/&#123;a&#125;/&#123;b&#125;&quot;)</span><span class="hljs-comment">//提交形式为POST</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res=a-b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;减法结果为：&quot;</span>+res);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>测试</li></ol><blockquote><p>add?a=1&amp;&amp;b=2</p></blockquote><p><img src="/2021/06/05/springmvc/image-20210616165211562-1623844974930.png" alt="image-20210616165211562"></p><blockquote><p>addRF/1/10</p></blockquote><p><img src="/2021/06/05/springmvc/image-20210616165349353-1623844974930.png" alt="image-20210616165349353"></p><blockquote><p>restful.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/springmvc_04_controller_war_exploded/add2/10/5&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;加法&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;form action=<span class="hljs-string">&quot;/springmvc_04_controller_war_exploded/add2/10/5&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;减法&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/05/springmvc/image-20210616165624169-1623844974930.png" alt="image-20210616165624169"></p><p><img src="/2021/06/05/springmvc/image-20210616165641412-1623844974930.png" alt="image-20210616165641412"></p><p><img src="/2021/06/05/springmvc/image-20210616165655583-1623844974930.png" alt="image-20210616165655583"></p><h2 id="7、结果跳转方式"><a href="#7、结果跳转方式" class="headerlink" title="7、结果跳转方式"></a>7、结果跳转方式</h2><blockquote><p>ModelAndView</p></blockquote><p>设置ModelAndView对象，根据view的名称，和视图解析器跳到指定的页面。</p><p>页面：{视图解析器前缀} + viewName + {视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ModelAndView mv=<span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;陈国洋牛逼&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ServletAPI</p></blockquote><p>通过设置ServletAPI，不需要视图解析器</p><ol><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultGo</span></span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req,HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        rsp.getWriter().println(<span class="hljs-string">&quot;Hello,Spring by servlet API&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req,HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        rsp.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req,HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        <span class="hljs-comment">//转发</span><br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;/result/t3&quot;</span>);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>SpringMVC</p></blockquote><p><strong>通过SpringMVC来实现转发和重定向 – 无需视图解析器</strong></p><p>测试前，需要将视图解析器主视掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;这里是北京&quot;</span>);<br>        <span class="hljs-comment">//转发</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/test.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;这里是北京&quot;</span>);<br>        <span class="hljs-comment">//转发二</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/test.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;这里是北京&quot;</span>);<br>        <span class="hljs-comment">//重定向</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/test.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SpringMVC – 有视图解析器</strong></p><p>重定向，不需要视图解析器，本质就是一个重新请求刀一个新地方，注意路径。</p><p>可以重定向刀另外一个请求实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC2</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;这里是北京&quot;</span>);<br>        <span class="hljs-comment">//转发</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;这里是北京&quot;</span>);<br>        <span class="hljs-comment">//重定向</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、接收请求参数及数据回显"><a href="#8、接收请求参数及数据回显" class="headerlink" title="8、接收请求参数及数据回显"></a>8、接收请求参数及数据回显</h2><blockquote><p>处理提交数据</p></blockquote><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据：<a href="http://localhost:8080/springmvc_04_controller_war_exploded/hello?name=zp">http://localhost:8080/springmvc_04_controller_war_exploded/hello?name=zp</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span></span>&#123;<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出：zp</p><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据：<a href="http://localhost:8080/springmvc_04_controller_war_exploded/hello?username=zp">http://localhost:8080/springmvc_04_controller_war_exploded/hello?username=zp</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam(&quot;username&quot;) :username 提交的域的名称</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出：zp</p><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致，参数使用对象即可</p><ol><li>实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//构造</span><br>    <span class="hljs-comment">//getter and setter</span><br>    <span class="hljs-comment">//toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>提交数据：<a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></li><li>处理方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">(User user)</span></span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出：User { id=1,name=’kuangshen’,age=15 }</p><p><strong>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</strong></p><blockquote><p>数据显示到前端</p></blockquote><p><strong>第一种：通过ModelAndView</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ModelAndView mv=<span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;陈国洋牛逼&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种：通过Model</strong></p><p>Model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//SpringMVC会自动实例化一个Model对象用于向视图中传值</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成果与牛逼&quot;</span>);<br>        <span class="hljs-comment">//返回视图位置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>第三种：通过ModelMap</strong></p><p>ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name,ModelMap model)</span></span>&#123;<br>        <span class="hljs-comment">//封装要显示到视图中的数据</span><br>        <span class="hljs-comment">//相当于req.setAAttribute(&quot;name&quot;,name);</span><br>        model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>        System.out.println(name);<br>        <span class="hljs-comment">//返回视图位置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>对比</p></blockquote><p>简单的区别：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对Model对象的操作和理解；<br>ModelMap 继承了 LinkedMap，除了实现自身的一些方法， 同样继承 LinkedMap 的方法和特性；<br>ModelAndView 可以存储数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。<br></code></pre></td></tr></table></figure><h2 id="9、乱码问题的解决"><a href="#9、乱码问题的解决" class="headerlink" title="9、乱码问题的解决"></a>9、乱码问题的解决</h2><ol><li>我们可以在首页编写一个提交的表单</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/e/t&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>后台编写对应的处理类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Encoding</span></span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/e/t&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model,String name)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<span class="hljs-comment">//获取表单提交的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<span class="hljs-comment">//跳转到test页面显示输入的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>输入中文，发现乱码</li></ol><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><p>1、修改tomcat配置文件 ：设置编码！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>2、自定义过滤器（网上找的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 解决get和post请求 全部乱码的过滤器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>       <span class="hljs-comment">//处理response的字符编码</span><br>       HttpServletResponse myResponse=(HttpServletResponse) response;<br>       myResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>       <span class="hljs-comment">// 转型为与协议相关对象</span><br>       HttpServletRequest httpServletRequest = (HttpServletRequest) request;<br>       <span class="hljs-comment">// 对request包装增强</span><br>       HttpServletRequest myrequest = <span class="hljs-keyword">new</span> MyRequest(httpServletRequest);<br>       chain.doFilter(myrequest, response);<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> HttpServletRequest request;<br>   <span class="hljs-comment">//是否编码的标记</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasEncode;<br>   <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>       <span class="hljs-keyword">super</span>(request);<span class="hljs-comment">// super必须写</span><br>       <span class="hljs-keyword">this</span>.request = request;<br>  &#125;<br><br>   <span class="hljs-comment">// 对需要增强方法 进行覆盖</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getParameterMap</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">// 先获得请求方式</span><br>       String method = request.getMethod();<br>       <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;post&quot;</span>)) &#123;<br>           <span class="hljs-comment">// post请求</span><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-comment">// 处理post乱码</span><br>               request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>               <span class="hljs-keyword">return</span> request.getParameterMap();<br>          &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>               e.printStackTrace();<br>          &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;get&quot;</span>)) &#123;<br>           <span class="hljs-comment">// get请求</span><br>           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>           <span class="hljs-keyword">if</span> (!hasEncode) &#123; <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span><br>               <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;<br>                   String[] values = parameterMap.get(parameterName);<br>                   <span class="hljs-keyword">if</span> (values != <span class="hljs-keyword">null</span>) &#123;<br>                       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>                           <span class="hljs-keyword">try</span> &#123;<br>                               <span class="hljs-comment">// 处理get乱码</span><br>                               values[i] = <span class="hljs-keyword">new</span> String(values[i]<br>                                      .getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                          &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                               e.printStackTrace();<br>                          &#125;<br>                      &#125;<br>                  &#125;<br>              &#125;<br>               hasEncode = <span class="hljs-keyword">true</span>;<br>          &#125;<br>           <span class="hljs-keyword">return</span> parameterMap;<br>      &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParameterMap();<br>  &#125;<br><br>   <span class="hljs-comment">//取一个值</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>       String[] values = parameterMap.get(name);<br>       <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;<br>       <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span><br>  &#125;<br><br>   <span class="hljs-comment">//取所有值</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String[] getParameterValues(String name) &#123;<br>       Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>       String[] values = parameterMap.get(name);<br>       <span class="hljs-keyword">return</span> values;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--大佬的乱码过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>genericencoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.zhao.filter.GenericEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>genericencoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p>]]></content>
    
    
    <categories>
      
      <category>Spring全家桶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2021/05/25/jdbc/"/>
    <url>/2021/05/25/jdbc/</url>
    
    <content type="html"><![CDATA[<h1 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h1><h2 id="1-1、数据库驱动"><a href="#1-1、数据库驱动" class="headerlink" title="1.1、数据库驱动"></a>1.1、数据库驱动</h2><p>需要驱动才能实现程序对数据库的使用</p><img src="/2021/05/25/jdbc/image-20210608154715289.png" alt="image-20210608154715289" style="zoom:67%;"><p>我们的程序会通过 数据库驱动 和数据库打交道！</p><h2 id="1-2、JDBC"><a href="#1-2、JDBC" class="headerlink" title="1.2、JDBC"></a>1.2、JDBC</h2><p>SUN公司为了简化开发人员的（对数据库的统一）操作，提供了一个（Java操作数据库的）规范，俗称JDBC。</p><img src="/2021/05/25/jdbc/image-20210608155540785.png" alt="image-20210608155540785" style="zoom:67%;"><blockquote><p>JDBC包</p></blockquote><p>java.sql    javax.sql    </p><p>数据库驱动包：mysql-connector-java-5.1.47.jar</p><p><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/5.1.47">Maven Repository: mysql » mysql-connector-java » 5.1.47 (mvnrepository.com)</a></p><h2 id="1-3、第一个JDBC程序"><a href="#1-3、第一个JDBC程序" class="headerlink" title="1.3、第一个JDBC程序"></a>1.3、第一个JDBC程序</h2><blockquote><p>创建测试数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database jdbcStudy <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci;<br><br>use jdbcStudy;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>`id` <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>),<br>birthday <span class="hljs-type">date</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(`id`,`name`,`password`,email,birthday)<br><span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;zs@sina.com&#x27;</span>,<span class="hljs-string">&#x27;1980-12-04&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-string">&#x27;123123&#x27;</span>,<span class="hljs-string">&#x27;ls@baidu.com&#x27;</span>,<span class="hljs-string">&#x27;1999-02-12&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;wangwu&#x27;</span>,<span class="hljs-string">&#x27;456456&#x27;</span>,<span class="hljs-string">&#x27;ww@qq.com&#x27;</span>,<span class="hljs-string">&#x27;1993-05-22&#x27;</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;lvliu&#x27;</span>,<span class="hljs-string">&#x27;112233&#x27;</span>,<span class="hljs-string">&#x27;ll@163.com&#x27;</span>,<span class="hljs-string">&#x27;2000-06-21&#x27;</span>);<br></code></pre></td></tr></table></figure><ol><li>创建一个普通项目</li><li>导入数据库驱动</li><li>编写实现类</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql">package com.zhao.jdbcdemo01;<br><br>import java.sql.<span class="hljs-operator">*</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>我的第一个JDBC程序<br>public class JdbcFirstDemo &#123;<br>    public <span class="hljs-keyword">static</span> void main(String[] args) throws ClassNotFoundException, <span class="hljs-keyword">SQLException</span> &#123;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>加载驱动<br>        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<span class="hljs-operator">/</span><span class="hljs-operator">/</span>固定写法，加载驱动<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>用户信息和url<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>useUnicode<span class="hljs-operator">=</span><span class="hljs-literal">true</span>（支持中文编码）<span class="hljs-operator">&amp;</span>characterEncoding<span class="hljs-operator">=</span>utf8（设置中文字符集utf<span class="hljs-number">-8</span>）<span class="hljs-operator">&amp;</span>useSSL<span class="hljs-operator">=</span><span class="hljs-literal">true</span>（使用安全的连接）<br>        String url<span class="hljs-operator">=</span>&quot;jdbc:mysql://localhost:3306/jdbcStudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;;<br>        String username <span class="hljs-operator">=</span> &quot;root&quot;;<br>        String password <span class="hljs-operator">=</span> &quot;root&quot;;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span>连接成功 Connection代表数据库<br>        Connection connection <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">4.</span>执行<span class="hljs-keyword">SQL</span>的对象 Statement 执行<span class="hljs-keyword">SQL</span>的对象<br>        Statement statement <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">5.</span>执行<span class="hljs-keyword">SQL</span>的对象去执行<span class="hljs-keyword">SQL</span>，可能存在结果，查看返回结果<br>        String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select * from users&quot;;<br>        ResultSet resultSet <span class="hljs-operator">=</span> statement.executeQuery(<span class="hljs-keyword">sql</span>);<span class="hljs-operator">/</span><span class="hljs-operator">/</span>返回结果集，结果集中封装了我们全部的查询出来的结果<br>        while(resultSet.next())&#123;<br>            System.out.print(&quot;id=&quot;<span class="hljs-operator">+</span>resultSet.getObject(&quot;id&quot;) <span class="hljs-operator">+</span>&quot;\t&quot;);<br>            System.out.print(&quot;name=&quot;<span class="hljs-operator">+</span>resultSet.getObject(&quot;name&quot;) <span class="hljs-operator">+</span>&quot;\t&quot;);<br>            System.out.print(&quot;password=&quot;<span class="hljs-operator">+</span>resultSet.getObject(&quot;password&quot;) <span class="hljs-operator">+</span>&quot;\t&quot;);<br>            System.out.print(&quot;email=&quot;<span class="hljs-operator">+</span>resultSet.getObject(&quot;email&quot;) <span class="hljs-operator">+</span>&quot;\t&quot;);<br>            System.out.println(&quot;birthday=&quot;<span class="hljs-operator">+</span>resultSet.getObject(&quot;birthday&quot;));<br>        &#125;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">6.</span>释放连接<br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤总结：</p><ol><li>加载驱动 Class.forName();</li><li>连接数据库 DriverManager</li><li>获得执行sql的对象 Statement/PreparedStatement</li><li>获得返回的结果集</li><li>释放连接</li></ol><h2 id="1-4、JDBC对象详解"><a href="#1-4、JDBC对象详解" class="headerlink" title="1.4、JDBC对象详解"></a>1.4、JDBC对象详解</h2><blockquote><p>DirverManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DiriverManager.registerDriver(new com.mysql.jdbc.Driver());</span><br>class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="hljs-comment">//固定写法，加载驱动</span><br>Connection connection = DriverManager.getConnection(url, username, password);<br><br><span class="hljs-comment">// Connection 代表数据库</span><br><span class="hljs-comment">// 数据库设置自动提交</span><br><span class="hljs-comment">// 事务提交</span><br><span class="hljs-comment">// 事务回滚</span><br>connection.setAutoCommit();<br>connection.commit();<br>connection.rollback();<br></code></pre></td></tr></table></figure><blockquote><p>URL</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcStudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;<br><br><span class="hljs-comment">// mysql 默认端口 -- 3306</span><br><span class="hljs-comment">// 协议 ：//主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span><br><br><span class="hljs-comment">// oralce 默认端口 -- 1521</span><br><span class="hljs-comment">// jdbc:oracle:thin:@localhost:1521:sid</span><br></code></pre></td></tr></table></figure><blockquote><p>Statement 执行SQL的对象 PrepareStatement 执行SQL的对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String sql = <span class="hljs-string">&quot;select * from users&quot;</span>;  <span class="hljs-comment">//编写sql</span><br><br>statement.executeQuery();<span class="hljs-comment">//查询操作返回 ResultSet结果集</span><br>statement.excute();<span class="hljs-comment">//执行任何SQL</span><br>statement.executeUpdate();<span class="hljs-comment">//更新、插入、删除 都是用这个，返回一个受影响的行数</span><br></code></pre></td></tr></table></figure><blockquote><p>ResultSet 查询的结果集：封装了所有的查询结果</p></blockquote><p>获得指定的数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">resultSet.getObject();<span class="hljs-comment">//在不知道列类型的情况下使用</span><br><span class="hljs-comment">//如果知道列的类型就使用指定的类型</span><br>resultSet.getDate();<br>resultSet.getString();<br>resultSet.getFloat();<br>......<br></code></pre></td></tr></table></figure><p>遍历，指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//[1,2,3,4,5,6]，如同在结果集数组中存在一个指针，对指针操作实现对结果集的操作</span><br>resultSet.beforeFirst(); <span class="hljs-comment">//移动到最前面</span><br>resultSet.afterLast(); <span class="hljs-comment">//移动到最后面</span><br>resultSet.next(); <span class="hljs-comment">//移动到下一个数据</span><br>resultSet.previous(); <span class="hljs-comment">//移动到前一行</span><br>resultSet.absolute(<span class="hljs-number">3</span>); <span class="hljs-comment">//移动到指定行</span><br></code></pre></td></tr></table></figure><blockquote><p>释放资源</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//6.释放连接，非常的耗资源，尤其是connection，用完必须关闭</span><br>resultSet.close();<br>statement.close();<br>connection.close();<br></code></pre></td></tr></table></figure><h2 id="1-5、Statement对象详解"><a href="#1-5、Statement对象详解" class="headerlink" title="1.5、Statement对象详解"></a>1.5、Statement对象详解</h2><p>jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删查改，只需要通过这个对象向数据库发送增删查改语句即可。</p><p>Statement对象的executeUpdate()方法，用于向数据库发送增、删、改的SQL语句，executeUpdate()执行完成后，将会返回一个整数（即增删改语句导致数据库几行数据发生了变化）。</p><p>Statement.executeQuery()方法用于向数据库发送查询语句，executeQuery()方法返回代表查询结果的ResultSet对象。</p><blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement st = conn.createStatement();<br>String sql = <span class="hljs-string">&quot;innsert into user(...) values(...)&quot;</span>;<br><span class="hljs-keyword">int</span> num=st.excuteUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作-delete</p></blockquote><p>使用executeUpdate(String sql)方法完成数据删除操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement st = conn.createStatement();<br>String sql = <span class="hljs-string">&quot;delete from user where id=1&quot;</span>;<br><span class="hljs-keyword">int</span> num=st.excuteUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作-update</p></blockquote><p>使用executeUpdate(String sql)方法完成数据修改操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement st = conn.createStatement();<br>String sql = <span class="hljs-string">&quot;update user set name=&#x27; &#x27; where name=&#x27; &#x27;&quot;</span>;<br><span class="hljs-keyword">int</span> num=st.excuteUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作-query</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement st = conn.createStatement();<br>String sql = <span class="hljs-string">&quot;select * from user where id=1&quot;</span>;<br>ResultSet rs = st.executeQuery(sql);<br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>    <span class="hljs-comment">//根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6、代码实现JDBC增删查改"><a href="#1-6、代码实现JDBC增删查改" class="headerlink" title="1.6、代码实现JDBC增删查改"></a>1.6、代码实现JDBC增删查改</h2><blockquote><p>提取工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo02.utils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(in);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            <span class="hljs-comment">//1.驱动只用加载一次</span><br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url,username,password);<br>    &#125;<br><br>    <span class="hljs-comment">//释放连接资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编写增删改的方法-<code>insert/delete/update</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo02;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-comment">//增加</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInsertDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JdbcUtils.getConnection();<span class="hljs-comment">//获取数据库连接</span><br>            st = conn.createStatement();<span class="hljs-comment">//获得SQL的执行对象</span><br>            <span class="hljs-comment">//增加</span><br>            <span class="hljs-keyword">int</span> i = st.executeUpdate(<span class="hljs-string">&quot;insert into users(`id`,`name`,`password`,`email`,`birthday`) values(5,&#x27;zhaoqi&#x27;,&#x27;666666&#x27;,&#x27;zq@huawei.com&#x27;,&#x27;2001-04-11&#x27;)&quot;</span>);<br>            <span class="hljs-comment">//删除</span><br>          <span class="hljs-comment">//int i = st.executeUpdate(&quot;delete from users where id=5&quot;);</span><br>            <span class="hljs-comment">//更新（修改）</span><br>             <span class="hljs-comment">//int i = st.executeUpdate(&quot;update users set name=&#x27;zhaoqi&#x27;,password=&#x27;668866&#x27;,email=&#x27;123@163.com&#x27; where id=5&quot;);</span><br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;更新成功！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;SQL语句错误！&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编写查询的方法-<code>query</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo02;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">//查询</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQueryDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JdbcUtils.getConnection();<span class="hljs-comment">//获取数据库连接</span><br>            st = conn.createStatement();<span class="hljs-comment">//获得SQL的执行对象</span><br>            ResultSet resultSet = st.executeQuery(<span class="hljs-string">&quot;select * from users&quot;</span>);<br>            <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>                System.out.print(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;name=&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;password=&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;email=&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;email&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+resultSet.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;SQL语句错误！&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/25/jdbc/image-20210608193930611.png" alt="image-20210608193930611" style="zoom:80%;"><h2 id="1-7、SQL注入问题"><a href="#1-7、SQL注入问题" class="headerlink" title="1.7、SQL注入问题"></a>1.7、SQL注入问题</h2><blockquote><p>SQL注入</p></blockquote><p>SQL存在漏洞，会被攻击导致数据泄露（SQL会被拼接，主要是‘or’存在的原因）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo02;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">//SQL注入问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQLInject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        testQuery(&quot;zhangsan&quot;,&quot;123456&quot;);</span><br>        testQuery(<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>,<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery</span><span class="hljs-params">(String username,String password)</span></span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JdbcUtils.getConnection();<span class="hljs-comment">//获取数据库连接</span><br>            st = conn.createStatement();<span class="hljs-comment">//获得SQL的执行对象</span><br>            rs = st.executeQuery(<span class="hljs-string">&quot;select * from users where name=&#x27;&quot;</span>+username+<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                System.out.print(<span class="hljs-string">&quot;id=&quot;</span>+rs.getInt(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;name=&quot;</span>+rs.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;password=&quot;</span>+rs.getString(<span class="hljs-string">&quot;password&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;email=&quot;</span>+rs.getString(<span class="hljs-string">&quot;email&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;SQL语句错误！&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,st,rs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/25/jdbc/image-20210608193952082.png" alt="image-20210608193952082" style="zoom:80%;"><h2 id="1-8、PreparedStatement对象"><a href="#1-8、PreparedStatement对象" class="headerlink" title="1.8、PreparedStatement对象"></a>1.8、PreparedStatement对象</h2><blockquote><p>PreparedStatement可以防止SQL注入，并且效率更高</p></blockquote><blockquote><p>编写增删改的方法<code>insert/delete/update</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo03;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-comment">//PreparedStatement添加</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInsertDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">// 区别</span><br>            <span class="hljs-comment">// 使用 ? 占位符代替参数</span><br>            String sql=<span class="hljs-string">&quot;insert into users(`id`,`name`,`password`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;<br>            <br>          <br>            <span class="hljs-comment">/*String sql=&quot;select * from users where `name`=? and password=?&quot;;</span><br><span class="hljs-comment">            pst.setString(1,&quot;chenpi&quot;);//name</span><br><span class="hljs-comment">            pst.setString(2,&quot;222222&quot;);//password</span><br><span class="hljs-comment">            pst.setString(3,&quot;zhao@Gmail.com&quot;);//email</span><br><span class="hljs-comment">            //注意点：sql.Date  数据库</span><br><span class="hljs-comment">            //      util.Date  java     new java.util.Date().getTime()获得时间戳</span><br><span class="hljs-comment">            pst.setDate(4,new Date(new java.util.Date().getTime()));//birthday</span><br><span class="hljs-comment">            pst.setInt(5,5);//id</span><br><span class="hljs-comment">            */</span><br>            <br>            <span class="hljs-comment">/*String sql=&quot;delete from users where id=?&quot;;</span><br><span class="hljs-comment">             pst.setInt(1,5);//id</span><br><span class="hljs-comment">            */</span><br>            <br>            pst = conn.prepareStatement(sql);<span class="hljs-comment">//预编译sql，先写sql，但不执行</span><br><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//id</span><br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zhaoqi&quot;</span>);<span class="hljs-comment">//name</span><br>            pst.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;666666&quot;</span>);<span class="hljs-comment">//password</span><br>            pst.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;chen@Gmail.com&quot;</span>);<span class="hljs-comment">//email</span><br>            <span class="hljs-comment">//注意点：sql.Date  数据库</span><br>            <span class="hljs-comment">//      util.Date  java     new java.util.Date().getTime()获得时间戳</span><br>            pst.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<span class="hljs-comment">//birthday</span><br><br>            <span class="hljs-comment">//执行</span><br>            <span class="hljs-keyword">int</span> i = pst.executeUpdate();<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,<span class="hljs-keyword">null</span>,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编写查询的方法<code>query</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo03;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQueryDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">// 区别</span><br>            <span class="hljs-comment">// 使用 ? 占位符代替参数</span><br>            String sql=<span class="hljs-string">&quot;select * from users where `name`=? and password=?&quot;</span>;<br>            pst = conn.prepareStatement(sql);<span class="hljs-comment">//预编译sql，先写sql，但不执行</span><br><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chenpi&quot;</span>);<span class="hljs-comment">//name</span><br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;222222&quot;</span>);<span class="hljs-comment">//password</span><br>            <span class="hljs-comment">//执行</span><br>            resultSet = pst.executeQuery();<br>            <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>                System.out.print(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;name=&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;password=&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;email=&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;email&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+resultSet.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,<span class="hljs-keyword">null</span>,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>防止SQL注入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQLInject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        login(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);<br>        login(<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>,<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(String username,String password)</span></span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JdbcUtils.getConnection();<span class="hljs-comment">//获取数据库连接</span><br><span class="hljs-comment">//PrepareStatement防止SQL注入的本质，把传递进来的参数当做字符</span><br>            <span class="hljs-comment">// 假设其中存在转义字符，就直接忽略，&#x27;会被直接转义</span><br>            String sql=<span class="hljs-string">&quot;select * from users where name=? and password=?&quot;</span>;<br>            pst = conn.prepareStatement(sql);<span class="hljs-comment">//预编译sql，先写sql，但不执行</span><br>            pst.setString(<span class="hljs-number">1</span>,username);<br>            pst.setString(<span class="hljs-number">2</span>,password);<br>            rs = pst.executeQuery();<br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                System.out.print(<span class="hljs-string">&quot;id=&quot;</span>+rs.getInt(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;name=&quot;</span>+rs.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;password=&quot;</span>+rs.getString(<span class="hljs-string">&quot;password&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;email=&quot;</span>+rs.getString(<span class="hljs-string">&quot;email&quot;</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;SQL语句错误！&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,<span class="hljs-keyword">null</span>,pst,rs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/25/jdbc/image-20210609145011478.png" alt="image-20210609145011478" style="zoom:80%;"><h2 id="1-9、事务"><a href="#1-9、事务" class="headerlink" title="1.9、事务"></a>1.9、事务</h2><p><strong>要么都成功，要么都失败</strong></p><blockquote><p>ACID原则</p></blockquote><p>原子性：要么全部完成，要么都不完成</p><p>一致性：操作前后，总数不变</p><p>隔离性：多个进程互不干扰</p><p>持久性：一旦提交不可逆，持久化到数据库</p><p>隔离性的问题：</p><p>脏读：一个事务读取到了另一个没有提交的事务</p><p>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了变化</p><p>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p><blockquote><p>代码实现</p></blockquote><ol><li>开启事务<code>conn.setAutoCommit(false);</code></li><li>一组业务执行完毕，提交事务</li><li>可以在catch语句中显示的定义回滚语句，但默认失败就会回滚</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `account`(<br>`id` <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>money <span class="hljs-type">float</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(`name`,money) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo04;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        ResultSet st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            conn= JdbcUtils.getConnection();<br>            <span class="hljs-comment">//关闭数据库的自动提交，自动会开启事务</span><br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//开启事务</span><br><br>            String sql1=<span class="hljs-string">&quot;update account set money = money+100 where name = &#x27;A&#x27;&quot;</span>;<br>            pst = conn.prepareStatement(sql1);<br>            pst.executeUpdate();<br>            <span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<span class="hljs-comment">//报错</span><br>            String sql2=<span class="hljs-string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;<br>            pst = conn.prepareStatement(sql2);<br>            pst.executeUpdate();<br><br>            <span class="hljs-comment">//业务完毕，提交事务</span><br>            conn.commit();<br>            System.out.println(<span class="hljs-string">&quot;成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//如果不写也会回滚，默认失败回滚，这是显示定义</span><br>                conn.rollback();<span class="hljs-comment">//如果失败则回滚</span><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br><br>            &#125;<br>            throwables.printStackTrace();<br><br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn,<span class="hljs-keyword">null</span>,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-10、数据库连接池"><a href="#1-10、数据库连接池" class="headerlink" title="1.10、数据库连接池"></a>1.10、数据库连接池</h2><p>数据库连接 – 执行完毕 – 释放</p><p>连接 – 释放 十分浪费系统资源</p><p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p><p>常用链接数10个——&gt;最小连接数：10</p><p>最大连接数：（如最多只有15就只能15）业务的最高承载上限</p><p>排队等待：最大连接数的已经全部在使用了</p><p>等待超时：100ms，超过设定的就不用等待了</p><hr><p>编写连接池，实现一个接口 DataSource</p><blockquote><p>开源数据源实现（拿来即用）</p></blockquote><p>DBCP、C3P0、Druid（阿里巴巴）</p><p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</p><blockquote><p>DBCP</p></blockquote><p>需要：commons-dbcp-1.4.jar        commons-pool-1.6.jar</p><p><a href="https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp/1.4">Maven Repository: commons-dbcp » commons-dbcp » 1.4 (mvnrepository.com)</a></p><p><a href="https://mvnrepository.com/artifact/commons-pool/commons-pool/1.6">Maven Repository: commons-pool » commons-pool » 1.6 (mvnrepository.com)</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#连接设置</span><br><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/jdbcStudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!-- 初始化连接 --</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#最大连接数量</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">50</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!-- 最大空闲连接 --</span><br><span class="hljs-attr">maxIdle</span>=<span class="hljs-string">20</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!-- 最小空闲连接 --</span><br><span class="hljs-attr">minIdle</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">60000</span><br><span class="hljs-comment">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】</span><br><span class="hljs-comment">#注意：user 与 password 两个属性会被明确地传递，因此这里不需要包含他们。</span><br><span class="hljs-attr">connectionProperties</span>=<span class="hljs-string">useUnicode=true;characterEncoding=UTF8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span><br><span class="hljs-attr">defaultAutoCommit</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span><br><span class="hljs-comment">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span><br><span class="hljs-attr">defaultReadOnly</span>=<span class="hljs-string"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span><br><span class="hljs-comment">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><br><span class="hljs-attr">defaultTransactionIsolation</span>=<span class="hljs-string">READ_UNCOMMITTED</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo05.utils;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbcp.BasicDataSource;<br><span class="hljs-keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils_DBCP</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcpconfig.properties&quot;</span>);<br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(in);<br>            <span class="hljs-comment">//创建数据源 工厂模式 --&gt; 创建</span><br>            dataSource = BasicDataSourceFactory.createDataSource(properties);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span>  dataSource.getConnection();<span class="hljs-comment">//从数据源中获取连接</span><br>    &#125;<br><br>    <span class="hljs-comment">//释放连接资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement st, PreparedStatement pst, ResultSet rs)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pst!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                pst.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo05;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo05.utils.JdbcUtils_DBCP;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDBCP</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn = JdbcUtils_DBCP.getConnection();<br>            <span class="hljs-comment">// 区别</span><br>            <span class="hljs-comment">// 使用 ? 占位符代替参数</span><br>            String sql=<span class="hljs-string">&quot;insert into users(`id`,`name`,`password`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;<br>            pst = conn.prepareStatement(sql);<span class="hljs-comment">//预编译sql，先写sql，但不执行</span><br><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//id</span><br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zhaoqi&quot;</span>);<span class="hljs-comment">//name</span><br>            pst.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;666666&quot;</span>);<span class="hljs-comment">//password</span><br>            pst.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;chen@Gmail.com&quot;</span>);<span class="hljs-comment">//email</span><br>            <span class="hljs-comment">//注意点：sql.Date  数据库</span><br>            <span class="hljs-comment">//      util.Date  java     new java.util.Date().getTime()获得时间戳</span><br>            pst.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<span class="hljs-comment">//birthday</span><br><br>            <span class="hljs-comment">//执行</span><br>            <span class="hljs-keyword">int</span> i = pst.executeUpdate();<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils_DBCP.release(conn,<span class="hljs-keyword">null</span>,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>C3P0连接池</p></blockquote><p>需要：c3p0-0.9.5.5.jar        mchange-commons-java-0.2.19.jar</p><p><a href="https://mvnrepository.com/artifact/com.mchange/c3p0/0.9.5.5">Maven Repository: com.mchange » c3p0 » 0.9.5.5 (mvnrepository.com)</a></p><p><a href="https://mvnrepository.com/artifact/com.mchange/mchange-commons-java/0.2.19">Maven Repository: com.mchange » mchange-commons-java » 0.2.19 (mvnrepository.com)</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        c3p0的缺省（默认）配置</span><br><span class="hljs-comment">        如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource();这样写就表示使用的是c3p0的缺省（默认）</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">default-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcStudy?userUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>uesSSL=true<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">default-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo05.utils;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo02.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils_C3P0</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ComboPooledDataSource dataSource = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//代码版配置</span><br>           <span class="hljs-comment">/* dataSource = new ComboPooledDataSource();</span><br><span class="hljs-comment">            dataSource.setDriverClass();</span><br><span class="hljs-comment">            dataSource.setUser();</span><br><span class="hljs-comment">            dataSource.setPassword();</span><br><span class="hljs-comment">            dataSource.setJdbcUrl();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            dataSource.setMaxPoolSize();</span><br><span class="hljs-comment">            dataSource.getMinPoolSize();*/</span><br>            <span class="hljs-comment">//创建数据源 工厂模式 --&gt; 创建</span><br>            dataSource =<span class="hljs-keyword">new</span> ComboPooledDataSource(); <span class="hljs-comment">//配置文件写法</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span>  dataSource.getConnection();<span class="hljs-comment">//从数据源中获取连接</span><br>    &#125;<br><br>    <span class="hljs-comment">//释放连接资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement st, PreparedStatement pst, ResultSet rs)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pst!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                pst.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.jdbcDemo05;<br><br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo05.utils.JdbcUtils_C3P0;<br><span class="hljs-keyword">import</span> com.zhao.jdbcDemo05.utils.JdbcUtils_DBCP;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestC3P0</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn = JdbcUtils_C3P0.getConnection();<span class="hljs-comment">//原来是自己实现的，现在是用别人实现的</span><br>            <span class="hljs-comment">// 区别</span><br>            <span class="hljs-comment">// 使用 ? 占位符代替参数</span><br>            String sql=<span class="hljs-string">&quot;insert into users(`id`,`name`,`password`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;<br>            pst = conn.prepareStatement(sql);<span class="hljs-comment">//预编译sql，先写sql，但不执行</span><br><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//id</span><br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zhaoqi&quot;</span>);<span class="hljs-comment">//name</span><br>            pst.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;666666&quot;</span>);<span class="hljs-comment">//password</span><br>            pst.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;chen@Gmail.com&quot;</span>);<span class="hljs-comment">//email</span><br>            <span class="hljs-comment">//注意点：sql.Date  数据库</span><br>            <span class="hljs-comment">//      util.Date  java     new java.util.Date().getTime()获得时间戳</span><br>            pst.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<span class="hljs-comment">//birthday</span><br><br>            <span class="hljs-comment">//执行</span><br>            <span class="hljs-keyword">int</span> i = pst.executeUpdate();<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils_C3P0.release(conn,<span class="hljs-keyword">null</span>,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>结论</p></blockquote><p>无论使用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变</p>]]></content>
    
    
    <categories>
      
      <category>JAVAWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL详解</title>
    <link href="/2021/05/18/mysql/"/>
    <url>/2021/05/18/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="1、初始MySQL"><a href="#1、初始MySQL" class="headerlink" title="1、初始MySQL"></a>1、初始MySQL</h1><p>JAVAEE：企业级java开发 web</p><p>前端：页面展示</p><p>后台：连接点（连接数据库JDBC，Mybatis，链接前端）</p><p>数据库：存数据</p><blockquote><p>操作系统，数据结构算法</p><p>离散数学，数字电路，体系结构，编译原理</p></blockquote><h2 id="1-1、什么是数据库"><a href="#1-1、什么是数据库" class="headerlink" title="1.1、什么是数据库"></a>1.1、什么是数据库</h2><p>数据库（DB，DataBase）</p><p>概念：数据仓库、软件，安装在操作系统（windows、linux…）之上，可以存储大量数据。</p><p>作用：存储数据，管理数据</p><h2 id="1-2、数据库分类"><a href="#1-2、数据库分类" class="headerlink" title="1.2、数据库分类"></a>1.2、数据库分类</h2><p><strong>关系型数据库：</strong>（SQL）</p><ul><li>MySQL，Oracle，Sql Sever，DB2，SQLlite</li><li>通过表和表之间，行和列之间的关系进行数据的存储。</li></ul><p><strong>非关系型数据库：</strong>（NOSQL）Not Only SQL</p><ul><li>Redis，MongDB</li><li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li></ul><p><strong>DBMS（数据库管理系统）</strong></p><ul><li>数据库管理软件，科学有效管理数据。维护和获取</li></ul><h2 id="1-3、基础指令"><a href="#1-3、基础指令" class="headerlink" title="1.3、基础指令"></a>1.3、基础指令</h2><p>查看mysql版本信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version()<br></code></pre></td></tr></table></figure><p>创建名为”school”的数据库，基字符集为”utf8”，排序规则为”utf8_general_ci”：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `school` <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;utf8&#x27;</span> <span class="hljs-keyword">COLLATE</span> <span class="hljs-string">&#x27;utf8_general_ci&#x27;</span><br></code></pre></td></tr></table></figure><p>每一个sql执行操作，本质上就是对应了一个sql，可以在软件的历史记录中查看。</p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `school`.`student`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;学员id&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学员姓名&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学员年龄&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `school`.`student` (`id`, `name`, `age`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">001</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">22</span>)<br></code></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `school`.`student` <span class="hljs-keyword">SET</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;zhaop&#x27;</span> <span class="hljs-keyword">WHERE</span> `id` <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>查询数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `school`.`student` <span class="hljs-keyword">WHERE</span> `id` <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="1-4、基本的命令行操作"><a href="#1-4、基本的命令行操作" class="headerlink" title="1.4、基本的命令行操作"></a>1.4、基本的命令行操作</h2><p>cmd命令行连接（最后的root是数据库密码）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>proot <span class="hljs-comment">-- 连接数据库</span><br><br>update mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span> <span class="hljs-keyword">and</span> Host<span class="hljs-operator">=</span><span class="hljs-string">&#x27;localhost&#x27;</span>; <span class="hljs-comment">-- 修改用户密码</span><br><br>flush privileges; <span class="hljs-comment">-- 刷新权限</span><br><br><span class="hljs-comment">-----------------------------------------</span><br><span class="hljs-comment">--所有的语句都使用&#x27;;&#x27;结尾</span><br><span class="hljs-keyword">show</span> databases; <span class="hljs-comment">-- 查看所有的数据库</span><br>use school; <span class="hljs-comment">-- 使用school数据库</span><br><span class="hljs-keyword">show</span> tables; <span class="hljs-comment">-- 查看数据库中所有的表</span><br><span class="hljs-keyword">describe</span> student; <span class="hljs-comment">-- 查看school表的所有信息</span><br><span class="hljs-keyword">create</span> database westos; <span class="hljs-comment">-- 创建westos数据库</span><br><br>exit; <span class="hljs-comment">-- 退出连接</span><br><span class="hljs-comment">-- 单行注释（SQL本来的注释）</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>DDL（数据库定义语言）、DML（数据库操作管理语言）、DQL（数据库查询语言）、DCL（数据库控制语言）</p><h1 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h1><p>操作数据库&gt;操作数据库中的表&gt;操作数据库表中的数据</p><p>MySQL关键字不区分大小写</p><h2 id="2-1、操作数据库语句"><a href="#2-1、操作数据库语句" class="headerlink" title="2.1、操作数据库语句"></a>2.1、操作数据库语句</h2><p>带“[]”的为可选，带“{}”为必选</p><ol><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> westos <span class="hljs-comment">-- IF NOT EXISTS 意思为如果不存在</span><br></code></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> hello <span class="hljs-comment">-- IF EXISTS 意思为如果存在</span><br></code></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE `school`  <span class="hljs-comment">-- 如果你的表名或者字段名是一个特殊字符（比如系统里面可能存在的），就需要带``</span><br></code></pre></td></tr></table></figure></li><li><p>查看数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES <span class="hljs-comment">-- 查看所有的数据库</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2、数据库的数据类型"><a href="#2-2、数据库的数据类型" class="headerlink" title="2.2、数据库的数据类型"></a>2.2、数据库的数据类型</h2><blockquote><p>数值</p></blockquote><table><thead><tr><th>类型名</th><th>描述</th><th>大小</th></tr></thead><tbody><tr><td>tinyint</td><td>十分小的数据</td><td>1字节</td></tr><tr><td>smallint</td><td>较小数据</td><td>2字节</td></tr><tr><td>mediumint</td><td>偏小数据</td><td>3字节</td></tr><tr><td><font color="red">int</font></td><td><font color="red">标准整数</font></td><td><font color="red">4字节</font></td></tr><tr><td>bigint</td><td>较大数据</td><td>8字节</td></tr><tr><td>float</td><td>浮点数</td><td>4字节</td></tr><tr><td>double</td><td>浮点数</td><td>8字节</td></tr><tr><td>decimal</td><td>字符串形式的浮点数</td><td></td></tr></tbody></table><p>decimal：金融计算时使用，float和double存在精度问题，无法存无限循环小数，字符串可以。</p><blockquote><p>字符串</p></blockquote><table><thead><tr><th>类型名</th><th>描述</th><th>大小</th></tr></thead><tbody><tr><td>char</td><td>字符串固定大小的</td><td>0~255</td></tr><tr><td><font color="red">varchar</font></td><td><font color="red">可变字符串，对应String</font></td><td><font color="red">0~65535</font></td></tr><tr><td>tinytext</td><td>微型文本（大约一篇博客）</td><td>2^8-1</td></tr><tr><td>text</td><td>文本串，保存大文本（大约1本书）</td><td>2^16-1</td></tr></tbody></table><blockquote><p>时间日期</p></blockquote><table><thead><tr><th>类型名</th><th>描述</th></tr></thead><tbody><tr><td>date</td><td>YYYY-MM-DD，日期格式</td></tr><tr><td>time</td><td>HH:mm:ss，时间格式</td></tr><tr><td><font color="red">datetime</font></td><td><font color="red">YYYY-MM-DD HH:mm:ss，最常用的日期格式</font></td></tr><tr><td><font color="red">timestamp</font></td><td><font color="red">时间戳，1970.1.1到现在的毫秒数！</font></td></tr><tr><td>year</td><td>年份表示</td></tr></tbody></table><blockquote><p>null</p></blockquote><ul><li>没有值，未知（不建议使用，结果一般为NULL，无意义）</li></ul><h2 id="2-3、数据库的字段属性"><a href="#2-3、数据库的字段属性" class="headerlink" title="2.3、数据库的字段属性"></a>2.3、数据库的字段属性</h2><table><thead><tr><th>属性名</th><th>意思</th><th>描述</th></tr></thead><tbody><tr><td>Unsigned / 无符号</td><td>无符号的整数</td><td>声明了该列不能声明为负数</td></tr><tr><td>zerofill / 填充零</td><td>0填充</td><td>不足的位数，使用0来填充，int(3)：5–&gt;005</td></tr><tr><td>自增</td><td>自动在上一条记录基础上+1（默认，可自定义起始值和步长）</td><td>通常用来设计唯一的主键~index，必须是整数类型</td></tr><tr><td>not null / 非空</td><td>勾选了表示不能为空</td><td>若为not null，无数据时会报错</td></tr><tr><td></td><td>设置默认值</td><td>不设置则为默认</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">阿里规范</span><br><span class="hljs-comment">每个表都必须存在以下五个字段！（项目使用，表示一个记录存在的意义）</span><br><span class="hljs-comment">id  主键</span><br><span class="hljs-comment">`version`  乐观锁</span><br><span class="hljs-comment">is_delete伪删除</span><br><span class="hljs-comment">gmt_create创建时间</span><br><span class="hljs-comment">gmt_update修改时间</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="2-4、创建数据库表"><a href="#2-4、创建数据库表" class="headerlink" title="2.4、创建数据库表"></a>2.4、创建数据库表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 目标：创建一个school数据库</span><br><span class="hljs-comment">-- 创建学生表（列，字段） 使用SQL创建</span><br><span class="hljs-comment">-- 学号int 登录密码varchar(20) 姓名，性别varchar(2)，出生日期(datatime)，家庭住址，email</span><br><span class="hljs-comment">-- 注意点，使用英文()，表的名称和字段尽量使用``括起来</span><br><span class="hljs-comment">-- AUTO_INCREMENT 自增</span><br><span class="hljs-comment">-- DEFAULT 默认</span><br><span class="hljs-comment">-- COMMENT 注释</span><br><span class="hljs-comment">-- ENGINE 引擎</span><br><br><span class="hljs-comment">-- 字符串使用 &#x27;&#x27;括起来！</span><br><span class="hljs-comment">-- 所有的语句后面加,（英文的）最后一个不加</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `student`(<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;匿名&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>`pwd` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;123456&#x27;</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>`sex` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;男&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>`birthday` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;出生日期&#x27;</span>,<br>`address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;家庭住址&#x27;</span>,<br>`email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY(`id`)<br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] `表名`(<br>`字段名` 列类型 [属性] [索引] [注释],<br>    `字段名` 列类型 [属性] [索引] [注释],<br>    ......<br>    `字段名` 列类型 [属性] [索引] [注释]<br>)[表类型] [字符集设置] [注释]<br></code></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE school <span class="hljs-comment">-- 查看创建school数据库的语句</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student <span class="hljs-comment">-- 查看student数据表的定义语句</span><br><span class="hljs-keyword">DESC</span> student <span class="hljs-comment">-- 显示student表的结构</span><br></code></pre></td></tr></table></figure><h2 id="2-5、数据表的类型"><a href="#2-5、数据表的类型" class="headerlink" title="2.5、数据表的类型"></a>2.5、数据表的类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 关于数据库引擎</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">INNODB 默认使用</span><br><span class="hljs-comment">MYISAM 早些年使用的</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为MYISAM2倍</td></tr></tbody></table><p>常规使用操作：</p><ul><li>MYISAM  节约空间，速度较快</li><li>INNODB  安全性高，事务的处理，多表多用户操作</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在在data目录下，一个文件夹就对应一个数据库。本质还是文件的存储！</p><p>MySQL引擎在物理文件上的区别</p><ul><li>InnoDB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MYISAM对应的文件<ul><li>*.frm         表结构的定义文件</li><li>*.MYD        数据文件（data）</li><li>*.MYI          索引文件（index）</li></ul></li></ul><blockquote><p>设置数据库表的字符集编码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><p>不设置的话，会是mysql默认的字符集编码（不支持中文！）</p><p>MySQL的默认编码是Latin1，不支持中文</p><p>详细介绍：<a href="https://blog.csdn.net/qq_30509055/article/details/82023572">mysql默认字符编码设置教程：my.ini设置字符编码_坚持是一种修行的博客-CSDN博客_my.ini修改字符编码</a></p><p>在my.ini文件中配置默认的编码也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">character</span><span class="hljs-operator">-</span><span class="hljs-keyword">set</span><span class="hljs-operator">-</span>server<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><h2 id="2-6、修改删除表"><a href="#2-6、修改删除表" class="headerlink" title="2.6、修改删除表"></a>2.6、修改删除表</h2><blockquote><p>修改表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表名: ALTER TABLE 旧表名 RENAME AS 新表名</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> teacher RENAME <span class="hljs-keyword">AS</span> teacher1<br><span class="hljs-comment">-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> teacher1 <span class="hljs-keyword">ADD</span> age <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)<br><br><span class="hljs-comment">-- 修改表的字段:（修改约束，重命名！）</span><br><span class="hljs-comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> teacher1 CHANGE age age1 <span class="hljs-type">INT</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">-- 字段重命名</span><br><span class="hljs-comment">-- ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性[]</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> teacher1 MODIFY age <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">11</span>) <span class="hljs-comment">-- 修改约束</span><br><span class="hljs-comment">-- 删除表的字段：ALTER TABLE 表名 DROP 字段名</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> teacher1 <span class="hljs-keyword">DROP</span> age1<br></code></pre></td></tr></table></figure><p>change用来字段重命名，不能修改字段类型和约束；</p><p>modify不能字段重命名，只能修改字段类型和约束。</p><blockquote><p>删除表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表（如果存在再删除）</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] teacher1<br></code></pre></td></tr></table></figure><p>创建和删除操作尽量加上判断，以免报错</p><h1 id="3、MySQL数据管理"><a href="#3、MySQL数据管理" class="headerlink" title="3、MySQL数据管理"></a>3、MySQL数据管理</h1><h2 id="3-1、外键"><a href="#3-1、外键" class="headerlink" title="3.1、外键"></a>3.1、外键</h2><blockquote><p>外键方式1：创建表时就创建外键关系</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 学生表的gradeid字段 要去引用年级表的gradeid</span><br><span class="hljs-comment">-- 年级表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `grade`(<br>`gradeid` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;年级id&#x27;</span>,<br>`gradename` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;年级名称&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (`gradeid`)<br>)engine<span class="hljs-operator">=</span>innoDB <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-comment">-- 学生表</span><br><span class="hljs-comment">-- 定义外键key</span><br><span class="hljs-comment">-- 给这个外键添加约束（执行引用）  references 引用</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `student`(<br>    ......<br>`gradeid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学生的年级&#x27;</span>,<br>    ......<br>    key `FK_gradeid` (`gradeid`)<br>    <span class="hljs-keyword">constraint</span> `FK_gradeid` <span class="hljs-keyword">foreign</span> key (`gradeid`) <span class="hljs-keyword">references</span> `grade`(`gradeid`)<br>)engine<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p><blockquote><p>外键方式2：创建表成功后，添加外键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表的时候没有外键关系</span><br><span class="hljs-comment">-- alter table 表名 add constraint 约束名 foreign key(作为外键的列) references 哪个表(哪个字段)</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `student`<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> `FK_gradeid` <span class="hljs-keyword">foreign</span> key(`gradeid`) <span class="hljs-keyword">references</span> `grade`(`gradeid`);<br></code></pre></td></tr></table></figure><p>以上操作都是物理外键，数据库级别的外键，不建议使用！（外键约束过多可能会导致关系混乱，删除表时很难处理）</p><p>最佳实现：</p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>需要使用多张表的数据和外键约束时用程序层面去实现。</li></ul><h2 id="3-2、DML语言"><a href="#3-2、DML语言" class="headerlink" title="3.2、DML语言"></a>3.2、DML语言</h2><p>DML语言就是数据库操作语言。分别为Insert（添加），update（修改），delete（删除）。</p><h2 id="3-3、添加"><a href="#3-3、添加" class="headerlink" title="3.3、添加"></a>3.3、添加</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入语句（添加）</span><br><span class="hljs-comment">-- insert into 表名(字段名1,字段名2,字段名3,...) values(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;,...),(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;,...)</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `grade`(`gradename`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;大四&#x27;</span>),(<span class="hljs-string">&#x27;大三&#x27;</span>),(<span class="hljs-string">&#x27;大二&#x27;</span>),(<span class="hljs-string">&#x27;大一&#x27;</span>)<br><span class="hljs-comment">-- 由于主键自增我们可以忽略（如果不写表的字段，就会一一匹配而报错）</span><br><span class="hljs-comment">-- 一般插入语句，我们一定要数据和字段一一对应</span><br></code></pre></td></tr></table></figure><p>字段是可以省略的，但是后面的值必须要一一对应。</p><h2 id="3-4、修改"><a href="#3-4、修改" class="headerlink" title="3.4、修改"></a>3.4、修改</h2><blockquote><p>update</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法：update 表名 set 属性名=&#x27;修改的值&#x27; where [条件]</span><br><span class="hljs-comment">-- 修改一个属性</span><br><span class="hljs-comment">-- 修改学员名字，带了条件</span><br>update `student` <span class="hljs-keyword">set</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;朱丽叶&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br><span class="hljs-comment">-- 不指定条件的情况下，会改动该表的所有数据</span><br>update `student` <span class="hljs-keyword">set</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;朱丽叶&#x27;</span><br><br><span class="hljs-comment">-- 修改多个属性</span><br>update `student` <span class="hljs-keyword">set</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;朱丽叶&#x27;</span>,`email`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456@qq.com&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>条件语句：where子句，筛选的条件</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于，凡是等于的值全部选定</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于，凡是不等于的范围的值全部选定</td></tr><tr><td>&gt;</td><td>大于，凡是大于的范围的值全部选定</td></tr><tr><td>&lt;</td><td>小于，凡是小于的范围的值全部选定</td></tr><tr><td>&gt;=</td><td>大于或等于，凡是大于或等于的范围的值全部选定</td></tr><tr><td>&lt;=</td><td>小于或等于，凡是小于或等于的范围的值全部选定</td></tr><tr><td>between…and…</td><td>[… , …]闭区间，在某个范围类的值全部选定</td></tr><tr><td>and</td><td>两个条件都要满足的数据被选定</td></tr><tr><td>or</td><td>两个条件满足任意一个或都满足的数据被选定</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">current_time</span> <span class="hljs-comment">--获取当前的时间</span><br></code></pre></td></tr></table></figure><h2 id="3-5、删除"><a href="#3-5、删除" class="headerlink" title="3.5、删除"></a>3.5、删除</h2><blockquote><p>delete 命令</p></blockquote><p>语法：<code>delete from 表名 [where 条件]</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除数据 （避免这样写，会全部删除）</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> `student` <span class="hljs-comment">-- 不可这样写</span><br><br><span class="hljs-comment">-- 删除指定数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> `student` <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>truncate 命令</p></blockquote><p>作用：完全清空一个数据库表，表的结构和索引约束不会变</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 清空student表</span><br><span class="hljs-keyword">truncate</span>  <span class="hljs-keyword">table</span> `student`<br></code></pre></td></tr></table></figure><blockquote><p>delete 和 truncate 区别</p></blockquote><ul><li>相同点：都能删除数据，都不会删除表结构</li><li>不同：<ul><li>truncate 重新设置自增列，计数器会归零</li><li>truncate 不会影响事务</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> `test` <span class="hljs-comment">-- 不会影响自增</span><br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> `test` <span class="hljs-comment">-- 自增会归零</span><br></code></pre></td></tr></table></figure><p>小知识：<code>delete删除的问题</code>，重启数据库，现象</p><ul><li>InnoDB  自增列会从1开始（存在内存当中的，断电即失）</li><li>MyISAM  继续从上一个自增量开始（存在文件中的，不会丢失）</li></ul><h1 id="4、DQL查询数据"><a href="#4、DQL查询数据" class="headerlink" title="4、DQL查询数据"></a>4、DQL查询数据</h1><h2 id="4-1、查询基础"><a href="#4-1、查询基础" class="headerlink" title="4.1、查询基础"></a>4.1、查询基础</h2><p>（data query language：数据库查询语言）</p><blockquote><p>select 完整语法：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [<span class="hljs-keyword">distinct</span>]<span class="hljs-comment">-- 去重</span><br>&#123;<span class="hljs-operator">*</span> <span class="hljs-operator">|</span> table.<span class="hljs-operator">*</span> <span class="hljs-operator">|</span> [table.field1[<span class="hljs-keyword">as</span> alias1][,table.field2[<span class="hljs-keyword">as</span> alias2]][,...]]&#125;<br><span class="hljs-keyword">from</span> table_name [<span class="hljs-keyword">as</span> table_alias]<br>[<span class="hljs-keyword">left</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">right</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> table_name2] <span class="hljs-comment">-- 联合查询</span><br>[<span class="hljs-keyword">where</span> ...] <span class="hljs-comment">-- 指定结果需满足的条件</span><br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> ...] <span class="hljs-comment">-- 指定结果按照哪几个字段来分组</span><br>[<span class="hljs-keyword">having</span>] <span class="hljs-comment">-- 过滤分组的记录必须满足的次要条件</span><br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ...] <span class="hljs-comment">-- 指定查询记录按一个或多个条件排序</span><br>[limit &#123;[<span class="hljs-keyword">offset</span>,]row_count <span class="hljs-operator">|</span> row_countOFFSET <span class="hljs-keyword">offset</span>&#125;]; <span class="hljs-comment">-- 指定查询的记录从哪条至哪条</span><br></code></pre></td></tr></table></figure><p><strong>注意：[ ]括号代表可选的，{ }括号代表必选的，并且顺序不可更改</strong></p><p>简单查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询全部学生的全部信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br><br><span class="hljs-comment">-- 查询指定字段   slect [字段] from [表名]</span><br><span class="hljs-keyword">select</span> `studentNo`,`StudentName` <span class="hljs-keyword">from</span> student<br><br><span class="hljs-comment">-- 别名，给结果起一个名字 as  可以给字段起别名，也可以给表起别名</span><br><span class="hljs-keyword">select</span> `studentNo` <span class="hljs-keyword">as</span> 学号,`StudentName` <span class="hljs-keyword">as</span> 学生姓名 <span class="hljs-keyword">from</span> student<br><br><span class="hljs-comment">-- 函数 Concat(a,b) 拼接字符串到显示列中</span><br><span class="hljs-keyword">select</span> Concat(<span class="hljs-string">&#x27;姓名：&#x27;</span>,StudentName) <span class="hljs-keyword">as</span> 学生姓名 <span class="hljs-keyword">from</span> student<br></code></pre></td></tr></table></figure><blockquote><p>去重 distinct</p></blockquote><p>作用：去除select查询出来的结果中重复的数据，重复的数据只显示一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> `StudentNo` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <span class="hljs-comment">-- 发现重复数据，去重</span><br></code></pre></td></tr></table></figure><blockquote><p>部分数据库表达式</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version() <span class="hljs-comment">-- 查询系统版本（函数）</span><br><span class="hljs-keyword">select</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">3</span><span class="hljs-number">-1</span> <span class="hljs-keyword">as</span> 计算结果 <span class="hljs-comment">-- 用来计算（表达式）</span><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@auto</span>_increment_increment <span class="hljs-comment">-- 查询自增的步长（变量）</span><br><span class="hljs-comment">-- 学员考试成绩+1分查看</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentResult`<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">as</span> 提分后 <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br></code></pre></td></tr></table></figure><p><code>数据库中的表达式：文本值，列，null，函数，计算表达式，系统变量......</code></p><h2 id="4-2、where条件子句"><a href="#4-2、where条件子句" class="headerlink" title="4.2、where条件子句"></a>4.2、where条件子句</h2><p>作用：检索数据中<code>符合条件</code>的值</p><p>搜索的条件由一个或者多个表达式组成！结果为布尔值</p><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>and / &amp;&amp;</td><td>a and b / a&amp;&amp;b</td><td>逻辑与，两个都为真，结果为真</td></tr><tr><td>or / ||</td><td>a or b / a||b</td><td>逻辑或，其中一个为真，结果为真</td></tr><tr><td>not / !</td><td>not a / !a</td><td>逻辑非，取反</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ===============where=======================</span><br><span class="hljs-comment">-- 查询考试成绩在95~100分之间 and可改为&amp;&amp;</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">where</span> `StudentResult`<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-keyword">and</span> `StudentResult`<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span><br><br><span class="hljs-comment">-- 区间查询</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">where</span> `StudentResult` <span class="hljs-keyword">between</span> <span class="hljs-number">95</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span><br><br><span class="hljs-comment">-- 查询除了1000号同学之外的学生的成绩</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentResult` <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">where</span> `StudentNo`<span class="hljs-operator">!=</span><span class="hljs-number">1000</span>;  <span class="hljs-comment">-- 可换where not `StudentNo`=1000</span><br></code></pre></td></tr></table></figure><blockquote><p>模糊查询：比较运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>is null</td><td>a is null</td><td>如果操作符为null，结果为真</td></tr><tr><td>is not null</td><td>a is not null</td><td>如果操作不为null，结果为真</td></tr><tr><td>between</td><td>a between b and c</td><td>若a在b和c之间，则结果为真</td></tr><tr><td><strong>like</strong></td><td>a like b</td><td>SQL匹配，如果a匹配b，则结果为真</td></tr><tr><td><strong>in</strong></td><td>a in (a1,a2,a3……)</td><td>假设a在a1，或者a2……其中的某一个值中，结果为真</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ====================模糊查询=====================</span><br><span class="hljs-comment">-- ======= like ========</span><br><span class="hljs-comment">-- 查询姓刘的同学</span><br><span class="hljs-comment">-- like 结合 %（代表0到任意个字符） _（一个字符）</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> `StudentName` <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;刘%&#x27;</span><br><span class="hljs-comment">-- 查询姓刘的同学，名字后面只有一个字的：like &#x27;刘_&#x27;</span><br><span class="hljs-comment">-- 查询姓刘的同学，名字后面只有两个字的：like &#x27;刘__&#x27;</span><br><span class="hljs-comment">-- 查询名字中间有“嘉”字的同学：like &#x27;%嘉%&#x27;</span><br><span class="hljs-comment">-- ======= in(具体的一个或者多个值)=========</span><br><span class="hljs-comment">-- 查询1001,1002,1003号学员</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> `StudentNo` <span class="hljs-keyword">in</span> (<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>);<br><span class="hljs-comment">-- 查询在安徽，河南洛阳的学生：where address in(&#x27;安徽&#x27;,&#x27;河南洛阳&#x27;)</span><br><span class="hljs-comment">-- ======= null   not null=========</span><br><span class="hljs-comment">-- 查询地址为空的学生  null  &#x27;&#x27;</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> address <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br><span class="hljs-comment">-- 查询有出生日期的学生（不为空）：where BornDate is not null</span><br><span class="hljs-comment">-- 查询没有出生日期的学生（为空）：where BornDate is null</span><br></code></pre></td></tr></table></figure><h2 id="4-4、联表查询"><a href="#4-4、联表查询" class="headerlink" title="4.4、联表查询"></a>4.4、联表查询</h2><p>JOIN理论详解：<a href="https://blog.csdn.net/yujing1314/article/details/106249473">【MySQL高级】七种JION理论和实例详解_阿杰-CSDN博客</a></p><blockquote><p>Join 对比</p></blockquote><img src="/2021/05/18/mysql/images1.png" alt="images1" style="zoom:80%;"><img src="/2021/05/18/mysql/images2.png" alt="images2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ================ 联表查询 join ================</span><br><span class="hljs-comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span><br><br><span class="hljs-comment">/*思路</span><br><span class="hljs-comment">1. 分析需求，分析查询的字段来自哪些表；（联表查询）</span><br><span class="hljs-comment">2. 确定使用哪种连接查询？ 7种join理论</span><br><span class="hljs-comment">3. 确定交叉点（这两个表中哪个数据是相同的）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 判断的条件： 学生表中的 StudentNo = 成绩表中的 StudentNo</span><br><span class="hljs-comment">-- join [连接的表] on [判断的条件] 连接查询</span><br><span class="hljs-comment">-- where 等值查询</span><br><br><span class="hljs-comment">-- Inner Join</span><br><span class="hljs-keyword">select</span> s.StudentNo,StudentName,SubjectNo,StudentResult<br><span class="hljs-keyword">from</span> `student` <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">as</span> r<br><span class="hljs-keyword">where</span> s.StudentNo <span class="hljs-operator">=</span> r.StudentNo<br><br><span class="hljs-comment">-- Right Join</span><br><span class="hljs-keyword">select</span> s.StudentNo,StudentName,SubjectNo,StudentResult<br><span class="hljs-keyword">from</span> `student` s<br><span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">on</span> s.StudentNo <span class="hljs-operator">=</span> r.StudentNo<br><br><span class="hljs-comment">--Left Join</span><br><span class="hljs-keyword">select</span> s.StudentNo,StudentName,SubjectNo,StudentResult<br><span class="hljs-keyword">from</span> `student` s<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">where</span> s.StudentNo <span class="hljs-operator">=</span> r.StudentNo<br><br><span class="hljs-comment">-- 查询缺考的同学</span><br><span class="hljs-keyword">select</span> s.StudentNo,StudentName,SubjectNo,StudentResult<br><span class="hljs-keyword">from</span> `student` s<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">on</span> s.StudentNo <span class="hljs-operator">=</span> r.StudentNo<br><span class="hljs-keyword">where</span> StudentResult <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br><br><span class="hljs-comment">-- ================= 3表查询 ===================</span><br><span class="hljs-comment">-- （查询了参加考试的同学信息：学号，学生姓名，科目名，分数）</span><br><span class="hljs-comment">-- student表中：学号，学生姓名；subject表中：科目名；result表中：分数</span><br><span class="hljs-keyword">select</span> stu.StudentNO,StudentName,SubjectName,StudentResult<br><span class="hljs-keyword">from</span> student stu<br><span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> res<br><span class="hljs-keyword">on</span> res.StudentNo <span class="hljs-operator">=</span> stu.StudentNo<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `subject` sub<br><span class="hljs-keyword">on</span> res.SubjectNo <span class="hljs-operator">=</span> sub.SubjectNo<br><br><span class="hljs-comment">-- 步骤</span><br><span class="hljs-comment">-- 我要查询哪些数据 select......</span><br><span class="hljs-comment">-- 从哪几个表中查 from [表] XXX join [连接的表] on [交叉条件]</span><br><span class="hljs-comment">-- 假设存在一种多张表查询，先查询两张表，然后再逐渐增加</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>inner join</td><td>如果表中至少有一个匹配，就返回行</td></tr><tr><td>left join</td><td>会从左表中返回所有的值，即使右表中没有匹配</td></tr><tr><td>right join</td><td>会从右表中返回所有的值，即使左表中没有匹配</td></tr></tbody></table><blockquote><p>自连接</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `category`(<br>`categoryid` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;主题id&#x27;</span>,<br>`pid` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;父id&#x27;</span>,<br>`categoryName` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;主题名字&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (`categoryid`)<br>)engine<span class="hljs-operator">=</span>innoDB auto_increment<span class="hljs-operator">=</span><span class="hljs-number">9</span> <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `category` (`categoryid`,`pid`,`categoryName`)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;信息技术&#x27;</span>),<br>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;软件开发&#x27;</span>),<br>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;数据库&#x27;</span>),<br>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;美术设计&#x27;</span>),<br>(<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;web开发&#x27;</span>),<br>(<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;ps技术&#x27;</span>),<br>(<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;办公信息&#x27;</span>);<br></code></pre></td></tr></table></figure><img src="/2021/05/18/mysql/images3.png" alt="images3"><p>自己的表和自己的表连接，核心：一张表拆成两张一样的表即可</p><p>父类</p><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr></tbody></table><p>子类</p><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>web开发</td></tr><tr><td>5</td><td>7</td><td>美术设计</td></tr></tbody></table><p>操作：查询父类对应的子类关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 操作，查询父类对应的子类关系</span><br><span class="hljs-comment">-- 把一张表看成两张一模一样的表</span><br><br><span class="hljs-keyword">select</span> a.`categoryName` <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;父栏目&#x27;</span>,b.`categoryName` <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;子栏目&#x27;</span><br><span class="hljs-keyword">from</span> category a,category b<br><span class="hljs-keyword">where</span> a.categoryid<span class="hljs-operator">=</span>b.pid<br></code></pre></td></tr></table></figure><img src="/2021/05/18/mysql/images4.png" alt="images4"><h2 id="4-5、分页和排序"><a href="#4-5、分页和排序" class="headerlink" title="4.5、分页和排序"></a>4.5、分页和排序</h2><blockquote><p>排序 order by [字段] ASC/DESC</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ========== 分页 limit 和排序 order by ================</span><br><span class="hljs-comment">-- 排序：升序 ASC， 降序 DESC</span><br><span class="hljs-comment">-- order by 通过哪个字段排序，怎么排</span><br><span class="hljs-comment">-- 查询的结果根据 成绩降序 排序</span><br><span class="hljs-keyword">select</span> s.`StudnteNo`,StudentName`,`SubjectName`,`StudentResult`<br><span class="hljs-keyword">from</span> student s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `<span class="hljs-keyword">result</span>` r<br><span class="hljs-keyword">on</span> s.StudentNo<span class="hljs-operator">=</span>r.SubjectNo<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `subject` sub<br><span class="hljs-keyword">on</span> r.`SubjectNo`<span class="hljs-operator">=</span>sub.`SubjectNo`<br><span class="hljs-keyword">where</span> `SubjectName`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> StudentResult <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><blockquote><p>分页 limit(查询起始下标 , 页面大小)</p></blockquote><p>分页目的：缓解数据库压力，给人更好体验，瀑布流（一直刷不完的数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法： limit 起始值，页面的大小</span><br><span class="hljs-comment">-- limit 0,5    1~5</span><br><span class="hljs-comment">-- limit 1,5    2~6</span><br><span class="hljs-comment">-- limit 6,5    7~12</span><br><br><span class="hljs-comment">-- 第一页   limit 0,5    (1-1)*5</span><br><span class="hljs-comment">-- 第二页   limit 5,5    (2-1)*5</span><br><span class="hljs-comment">-- 第三页   limit 10,5    (3-1)*5</span><br><span class="hljs-comment">-- 第n页   limit ?,5    (n-1)*pageSize,pageSize</span><br><span class="hljs-comment">-- 【pageSize：页面大小； (n-1)*pageSize：起始值； n：当前页】</span><br><span class="hljs-comment">-- 【总页数 = 数据大小 / 总页数】</span><br></code></pre></td></tr></table></figure><h2 id="4-6、子查询"><a href="#4-6、子查询" class="headerlink" title="4.6、子查询"></a>4.6、子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ================ where ==================</span><br><span class="hljs-comment">-- 1、查询 数据库结构-1 的所有考试结果（学号，科目编号，成绩），降序排列</span><br><span class="hljs-comment">-- 方式一：使用连接查询</span><br><span class="hljs-keyword">select</span> `StudentNo`,r.`SubjectNo`,`StudentResult`<br><span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>` r<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `subject` sub<br><span class="hljs-keyword">on</span> r.SubjectNo <span class="hljs-operator">=</span> sub.SubjectNo<br><span class="hljs-keyword">where</span> SubjectName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> StudentResult <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">-- 方式二：使用子查询（由里及外）</span><br><span class="hljs-keyword">select</span> `StudentNo`,`SubjectNo`,`StudentResult`<br><span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>`<br><span class="hljs-keyword">where</span> SubjectNo <span class="hljs-operator">=</span> (<br>    <span class="hljs-comment">-- 查询所有 数据库结构-1 的学生学号</span><br><span class="hljs-keyword">select</span> SubjectNo <span class="hljs-keyword">from</span> `subject`<br>    <span class="hljs-keyword">where</span> SubjectName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> StudentResult <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><blockquote><p>案例：查询课程为 高等数学-2 且分数不小于80分的同学的学号和姓名</p></blockquote><blockquote><p>方式一：3连表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分数不小于80分的学生的学号和姓名</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> s.`StudentNo`,`StudentName`<br><span class="hljs-keyword">from</span> student s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">on</span> r.StudentNo<span class="hljs-operator">=</span>s.StudentNo<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `subject` sub<br><span class="hljs-keyword">on</span> r.`SubjectNo`<span class="hljs-operator">=</span>sub.`SubjectNo`<br><span class="hljs-keyword">where</span> `SubjectName`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;高等数学-2&#x27;</span> <span class="hljs-keyword">and</span> `StudentResult`<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><blockquote><p>方式二：子查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分数不小于80分的学生的学号和姓名</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> s.`StudentNo`,`StudentName`<br><span class="hljs-keyword">from</span> student s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">on</span> r.StudentNo<span class="hljs-operator">=</span>s.StudentNo<br><span class="hljs-keyword">where</span> `StudentResult`<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span><br><span class="hljs-comment">-- 在此基础上增加一个科目， 高等数学-2</span><br><span class="hljs-comment">-- 查询 高等数学-2 的编号</span><br> <span class="hljs-keyword">and</span> `SubjectNo`<span class="hljs-operator">=</span>(<br> <span class="hljs-keyword">select</span> `SubjectNo` <span class="hljs-keyword">from</span> `subject` <span class="hljs-keyword">where</span> `SubjectName`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;高等数学-2&#x27;</span><br> )<br></code></pre></td></tr></table></figure><blockquote><p>方式三：嵌套查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 嵌套（由里及外）</span><br><span class="hljs-keyword">select</span> `StudentNo`,`StudentName` <span class="hljs-keyword">from</span> `student` <span class="hljs-keyword">where</span> `StudentNo` <span class="hljs-keyword">in</span>( <span class="hljs-comment">-- 根据学生学号查询结果</span><br><span class="hljs-keyword">select</span> `StudentNo` <span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>` <span class="hljs-keyword">where</span> `StudentResult`<span class="hljs-operator">&gt;</span><span class="hljs-number">80</span> <span class="hljs-keyword">and</span> `SubjectNo` <span class="hljs-operator">=</span> ( <span class="hljs-comment">--根据课程号和成绩查询学生学号</span><br><span class="hljs-keyword">select</span> `SubjectNo` <span class="hljs-keyword">from</span> `subject` <span class="hljs-keyword">where</span> `SubjectName` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高等数学-2&#x27;</span> <span class="hljs-comment">-- 查询 高等数学-2 的课程号</span><br>)<br>)<br></code></pre></td></tr></table></figure><h2 id="4-7、分组和过滤（重点）"><a href="#4-7、分组和过滤（重点）" class="headerlink" title="4.7、分组和过滤（重点）"></a>4.7、分组和过滤（重点）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80</span><br><span class="hljs-comment">-- 核心：（根据不同的课程分组）</span><br><span class="hljs-keyword">select</span> `SubjectName`,<span class="hljs-built_in">avg</span>(`StudentResult`) <span class="hljs-keyword">as</span> 平均分,<span class="hljs-built_in">max</span>(`StudentResult`) <span class="hljs-keyword">as</span> 最高分,<span class="hljs-built_in">min</span>(`StudentResult`) <span class="hljs-keyword">as</span> 最低分<br><span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>` r<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `subject` sub<br><span class="hljs-keyword">on</span> r.`SubjectNo`<span class="hljs-operator">=</span>sub.`SubjectNo`<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> r.`SubjectNo`  <span class="hljs-comment">-- 通过什么字段来分组</span><br><span class="hljs-keyword">having</span> 平均分<span class="hljs-operator">&gt;</span><span class="hljs-number">80</span>  <span class="hljs-comment">-- 过滤，平均分大于80才显示</span><br></code></pre></td></tr></table></figure><h1 id="5、MySQL函数"><a href="#5、MySQL函数" class="headerlink" title="5、MySQL函数"></a>5、MySQL函数</h1><h2 id="5-1、常用函数"><a href="#5-1、常用函数" class="headerlink" title="5.1、常用函数"></a>5.1、常用函数</h2><p>常用函数、关键字：<a href="https://blog.csdn.net/uziuzi669/article/details/108924070">面试必刷！MySQL常用函数、关键字。_uziuzi669的博客-CSDN博客</a></p><blockquote><p>数学运算类</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- =============== 常用函数 ===================</span><br><span class="hljs-comment">-- 数学运算</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">abs</span>(<span class="hljs-number">-8</span>)  <span class="hljs-comment">-- 绝对值</span><br><span class="hljs-keyword">select</span> celling(<span class="hljs-number">9.4</span>)  <span class="hljs-comment">-- 向上取整</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">9.4</span>)  <span class="hljs-comment">-- 向下取整</span><br><span class="hljs-keyword">select</span> rand()  <span class="hljs-comment">-- 返回一个 0~1 之间的随机数</span><br><span class="hljs-keyword">select</span> sing(<span class="hljs-number">10</span>)  <span class="hljs-comment">-- 判断一个数的符号 0返回0，负数返回-1，正数返回1</span><br></code></pre></td></tr></table></figure><blockquote><p>字符串类</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 字符串函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">char_length</span>(<span class="hljs-string">&#x27;我爱数据库&#x27;</span>)  <span class="hljs-comment">-- 字符串长度</span><br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;我&#x27;</span>,<span class="hljs-string">&#x27;爱&#x27;</span>,<span class="hljs-string">&#x27;数据库&#x27;</span>)  <span class="hljs-comment">-- 拼接字符串</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">insert</span>(<span class="hljs-string">&#x27;我爱编程helloworld&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;超级热爱&#x27;</span>)  <span class="hljs-comment">-- 查询，从某个位置开始替换某个长度</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">lower</span>(<span class="hljs-string">&#x27;HELLOWORLD&#x27;</span>)  <span class="hljs-comment">-- 转小写</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">upper</span>(<span class="hljs-string">&#x27;helloworld&#x27;</span>)  <span class="hljs-comment">-- 转大写</span><br><span class="hljs-keyword">select</span> instr(<span class="hljs-string">&#x27;helloworld&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>)  <span class="hljs-comment">-- 返回第一次出现的字串的索引</span><br><span class="hljs-keyword">select</span> replace(<span class="hljs-string">&#x27;我爱编程&#x27;</span>,<span class="hljs-string">&#x27;编程&#x27;</span>,<span class="hljs-string">&#x27;数据库&#x27;</span>)  <span class="hljs-comment">-- 替换出现的指定字符串</span><br><span class="hljs-keyword">select</span> substr(<span class="hljs-string">&#x27;我爱数据库&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">-- 返回指定的字符串（源字符串，截取的位置，截取的长度）</span><br><span class="hljs-keyword">select</span> reverse(<span class="hljs-string">&#x27;abcde&#x27;</span>)  <span class="hljs-comment">-- 反转字符串</span><br><br><span class="hljs-comment">-- 查询姓 周的同学，并将 周改为 邹</span><br><span class="hljs-keyword">select</span> replace(StudentName,<span class="hljs-string">&#x27;周&#x27;</span>,<span class="hljs-string">&#x27;邹&#x27;</span>) <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> StudentName <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;周%&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>时间日期类</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 时间和日期函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_date</span>()  <span class="hljs-comment">-- 获取当前日期</span><br><span class="hljs-keyword">select</span> curdate()  <span class="hljs-comment">-- 获取当前日期</span><br><span class="hljs-keyword">select</span> now()  <span class="hljs-comment">-- 获取当前时间（有时分秒）</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">localtime</span>()  <span class="hljs-comment">-- 获取本地时间（有时分秒）</span><br><span class="hljs-keyword">select</span> sysdate()  <span class="hljs-comment">-- 系统时间（有时分秒）</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(now())  <span class="hljs-comment">-- 年</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">month</span>(now())  <span class="hljs-comment">-- 月</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span>(now())  <span class="hljs-comment">-- 日</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">hour</span>(now())  <span class="hljs-comment">-- 时</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">minute</span>(now())  <span class="hljs-comment">-- 分</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">second</span>(now())  <span class="hljs-comment">-- 秒</span><br></code></pre></td></tr></table></figure><blockquote><p>系统类</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 系统</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">system_user</span>()  <span class="hljs-comment">-- 系统当前用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()<span class="hljs-comment">-- 系统当前用户</span><br><span class="hljs-keyword">select</span> version()  <span class="hljs-comment">-- mysql版本</span><br></code></pre></td></tr></table></figure><p>更多请点击：<a href="https://dev.mysql.com/doc/refman/5.7/en/built-in-function-reference.html">MySQL ：： mySQL 5.7 参考手册 ：： 12.1 内置功能和操作员参考</a></p><h2 id="5-2、聚合函数（常用）"><a href="#5-2、聚合函数（常用）" class="headerlink" title="5.2、聚合函数（常用）"></a>5.2、聚合函数（常用）</h2><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>count()</td><td>计数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ============ 聚合函数 ==============</span><br><span class="hljs-comment">-- 都能够统计表中的数据（想查询一个表中有多少个记录，就是用这个count）</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(`StudentNo`) <span class="hljs-keyword">from</span> student;  <span class="hljs-comment">-- count(字段)，会忽略所有的null值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student;  <span class="hljs-comment">-- count(*)，不会忽略null值，本质计算行数，所有的列都会走一遍</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> student;  <span class="hljs-comment">-- count(1)，不会忽略null值，本质计算行数，只会走一列</span><br><br><span class="hljs-comment">-- 求和</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(`StudentResult`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;总和&#x27;</span> <span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>`<br><span class="hljs-comment">-- 求平均值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(`StudentResult`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>`<br><span class="hljs-comment">-- 最大值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(`StudentResult`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最高分&#x27;</span> <span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>`<br><span class="hljs-comment">-- 最小值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(`StudentResult`) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最低分&#x27;</span> <span class="hljs-keyword">from</span> `<span class="hljs-keyword">result</span>`<br></code></pre></td></tr></table></figure><h2 id="5-3、数据库级别的MD5加密（扩展）"><a href="#5-3、数据库级别的MD5加密（扩展）" class="headerlink" title="5.3、数据库级别的MD5加密（扩展）"></a>5.3、数据库级别的MD5加密（扩展）</h2><p>什么是MD5？</p><p>主要增强算法复杂度和不可逆性。</p><p>MD5不可逆，具体的值得MD5是一样的</p><p>MD5破解网站原理：背后有一个字典，通过MD5加密后的值，查加密的前值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ===========测试 MD5加密 ===================</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `testmd5`(<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>`pwd` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br><span class="hljs-keyword">primary</span> key(`id`)<br>)engine<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-comment">-- 明文密码</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `testmd5` <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-string">&#x27;123123&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;wangwu&#x27;</span>,<span class="hljs-string">&#x27;456456&#x27;</span>)<br><br><span class="hljs-comment">-- 加密</span><br>update `testmd5` <span class="hljs-keyword">set</span> pwd<span class="hljs-operator">=</span>MD5(pwd) <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>update `testmd5` <span class="hljs-keyword">set</span> pwd<span class="hljs-operator">=</span>MD5(pwd)  <span class="hljs-comment">-- 加密全部的密码</span><br><br><span class="hljs-comment">-- 插入的时候加密</span><br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `testmd5` <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,MD5(<span class="hljs-string">&#x27;123123&#x27;</span>))<br><span class="hljs-comment">-- 如何校验：将用户传递进来的密码，进行md5加密，然后比对加密后的值</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `testmd5` <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xiaoming&#x27;</span> <span class="hljs-keyword">and</span> pwd<span class="hljs-operator">=</span>md5(<span class="hljs-string">&#x27;123123&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h1><h2 id="6-1、什么是事务？"><a href="#6-1、什么是事务？" class="headerlink" title="6.1、什么是事务？"></a>6.1、什么是事务？</h2><p>要么都成功，要么都失败</p><p>———- 事务开始 —————</p><p>1、SQL执行    A 给 B 转账    A：1000    A转 200    B：300</p><p>2、SQL执行    B收到A转账    A：800    B收200    B：500</p><p>———- 事务结束 —————-</p><p>将一组SQL放在一个批次执行，要么都成功执行，但凡一条SQL执行失败，则全部失败。</p><blockquote><p>事务原则：ACID原则（原子性，一致性，隔离性，持久性）</p></blockquote><p>详细见博客：<a href="https://blog.csdn.net/dengjili/article/details/82468576">事务ACID理解_dengjili的专栏-CSDN博客_acid</a></p><p><strong>原子性（Atomicity）</strong></p><p>要么都成功，要么都失败</p><p><strong>一致性（Consistency）</strong></p><p>事务前后的数据完整性要保证一致，例如两账户转前总和为1000元，转后两账户总和还是1000。</p><p><strong>持久性（Durability）</strong></p><p>事务一旦提交则不可逆，被持久化到数据库中！</p><p><strong>隔离性（Isolation）</strong></p><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，事务之间要相互隔离。</p><blockquote><p>隔离所导致的问题：</p></blockquote><p><strong>脏读：</strong>指一个事务读取到了另一个事务未提交的数据。</p><p><strong>不可重复读：</strong>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定错误，只是某些场合不对）</p><p><strong>虚读（幻读）：</strong>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</p><h2 id="6-2、测试事务"><a href="#6-2、测试事务" class="headerlink" title="6.2、测试事务"></a>6.2、测试事务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ============= 事务 =====================</span><br><span class="hljs-comment">-- mysql 是默认开启事务自动提交的</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>  <span class="hljs-comment">-- 关闭事务</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>  <span class="hljs-comment">-- 开启事务（默认的）</span><br><br><span class="hljs-comment">-- 手动处理事务</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>  <span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-comment">-- 事务开启</span><br><span class="hljs-keyword">start</span> transaction  <span class="hljs-comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span><br><br><span class="hljs-keyword">insert</span> [<span class="hljs-keyword">sql</span>语句]<br><span class="hljs-keyword">insert</span> [<span class="hljs-keyword">sql</span>语句]<br><br><span class="hljs-comment">-- 提交：持久化（成功！）</span><br><span class="hljs-keyword">commit</span><br><br><span class="hljs-comment">-- 回滚：回到之前（失败！）</span><br><span class="hljs-keyword">rollback</span><br><br><span class="hljs-comment">-- 事务结束</span><br><span class="hljs-keyword">set</span> atuocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>  <span class="hljs-comment">-- 开启自动提交</span><br><br><span class="hljs-comment">-- 保存点</span><br><span class="hljs-keyword">savepoint</span> [保存点名]  <span class="hljs-comment">-- 设置一个事务的保存点</span><br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">savepoint</span> [保存点名]  <span class="hljs-comment">-- 回滚到保存点</span><br></code></pre></td></tr></table></figure><blockquote><p>测试事务案例（模拟转账）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ============== 模拟转账 ===================</span><br><span class="hljs-comment">-- 转账，创建shop数据库</span><br><span class="hljs-keyword">create</span> database shop <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci<br>use shop<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `account`(<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>`money` <span class="hljs-type">decimal</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">primary</span> key(`id`)<br>)engine<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `account`(`name`,`money`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">2000.00</span>),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">10000.00</span>)<br><br><span class="hljs-comment">-- 模拟转账：事务</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-keyword">start</span> transaction  <span class="hljs-comment">-- 开启一个事务（一组事务）</span><br><br>update account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-500</span> <span class="hljs-keyword">where</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>  <span class="hljs-comment">-- A减500</span><br>update account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">500</span> <span class="hljs-keyword">where</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B&#x27;</span>  <span class="hljs-comment">-- B加500</span><br><br><span class="hljs-keyword">commit</span>;  <span class="hljs-comment">-- 提交事务，就被持久化了！</span><br><span class="hljs-keyword">rollback</span>;  <span class="hljs-comment">-- 回滚</span><br><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">-- 恢复默认值</span><br></code></pre></td></tr></table></figure><h1 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h1><blockquote><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。</p><p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p></blockquote><p>索引原理详解：<a href="https://cloud.tencent.com/developer/article/1150992">MySQL索引背后的数据结构及算法原理 - 云+社区 - 腾讯云 (tencent.com)</a></p><p>若不熟悉B树和B+树原理请看：<a href="https://blog.csdn.net/a519640026/article/details/106940115">一文彻底搞懂MySQL基础：B树和B+树的区别_码农富哥-CSDN博客</a></p><h2 id="7-1、索引分类"><a href="#7-1、索引分类" class="headerlink" title="7.1、索引分类"></a>7.1、索引分类</h2><blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li>主键索引（primary key）<ul><li>唯一的标识，主键不可重复，只能有一个列作为主键</li></ul></li><li>唯一索引（unique key）<ul><li>避免重复的列出现，唯一索引可以重复，多个列都可以标识为 唯一索引</li></ul></li><li>常规索引（key / index）<ul><li>默认的，key / index 关键字来设置</li></ul></li><li>全文索引（FullText）<ul><li>在特定的数据库引擎下才有，MyISAM</li><li>快速定位数据</li></ul></li></ul><blockquote><p>基础语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 索引的使用</span><br><span class="hljs-comment">-- 1、在创建表的时候给字段增加索引</span><br><span class="hljs-comment">-- 2、创建完毕后，增加索引</span><br><br><span class="hljs-comment">-- 显示所有的索引信息</span><br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> `student`<br><br><span class="hljs-comment">-- 增加一个全文索引  &#123;索引名&#125; &#123;列名&#125;</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> school.student <span class="hljs-keyword">add</span> FullText index `StudentName`(`StudentName`);<br><br><span class="hljs-comment">-- explain 分析sql执行的状况</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `student`;  <span class="hljs-comment">-- 非全文索引</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `student` <span class="hljs-keyword">where</span> <span class="hljs-keyword">match</span>(StudentName) against(<span class="hljs-string">&#x27;zhang&#x27;</span>)<br></code></pre></td></tr></table></figure><p>explain 分析sql结果：<a href="https://blog.csdn.net/jiadajing267/article/details/81269067">【MySQL优化】——看懂explain_漫漫长途，终有回转；余味苦涩，终有回甘-CSDN博客_explain</a></p><h2 id="7-2、测试索引"><a href="#7-2、测试索引" class="headerlink" title="7.2、测试索引"></a>7.2、测试索引</h2><blockquote><p>创建表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `app_user` (<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>`email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户邮箱&#x27;</span>,<br>`phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> comment <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>`gender` tinyint(<span class="hljs-number">4</span>) unsigned <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;性别（0：男； 1：女）&#x27;</span>,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>`age` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>`create_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">current_timestamp</span>,<br>`update_time` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">current_timestamp</span> <span class="hljs-keyword">on</span> update <span class="hljs-built_in">current_timestamp</span>,<br><span class="hljs-keyword">primary</span> key(`id`)<br>)engine<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8mb4 comment<span class="hljs-operator">=</span><span class="hljs-string">&#x27;app用户表&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>插入数据100万条</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入100万条数据  时间: 53.755s</span><br>delimiter $$  <span class="hljs-comment">-- 写函数之前必须要写，标志</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> mock_data()<br><span class="hljs-keyword">returns</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> num <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1000000</span>;<br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>while i<span class="hljs-operator">&lt;</span>num DO<br><span class="hljs-comment">-- 插入语句</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> app_user(`name`,`email`,`phone`,`gender`,`password`,`age`) <span class="hljs-keyword">values</span>(concat(<span class="hljs-string">&#x27;用户&#x27;</span>,i),<span class="hljs-string">&#x27;20473643@qq.com&#x27;</span>,concat(<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span>((<span class="hljs-number">999999999</span><span class="hljs-number">-100000000</span>)<span class="hljs-operator">+</span><span class="hljs-number">10000000</span>))),<span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span><span class="hljs-number">2</span>),uuid(),<span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span><span class="hljs-number">100</span>));<br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">return</span> i;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">-- 执行函数</span><br><span class="hljs-keyword">select</span> mock_data();<br><br><span class="hljs-comment">-- 清空表</span><br><span class="hljs-keyword">truncate</span>  <span class="hljs-keyword">table</span> `app_user`<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> app_user <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户9999&#x27;</span>;  <span class="hljs-comment">-- 时间: 0.541s</span><br><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> app_user <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户9999&#x27;</span>;  <span class="hljs-comment">-- rows：778600</span><br><br><span class="hljs-comment">-- id _ 表名 _ 字段名</span><br><span class="hljs-comment">-- create index 索引名 on 表(字段)</span><br><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">create</span> index id_app_user_name <span class="hljs-keyword">on</span> app_user(`name`);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> app_user <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户9999&#x27;</span>;  <span class="hljs-comment">-- 时间: 0.001s</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> app_user <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户9999&#x27;</span>;  <span class="hljs-comment">-- rows：1</span><br></code></pre></td></tr></table></figure><p>索引在小数据量的时候，用处不大，但是在数据量庞大的时候，区别十分明显。</p><h2 id="7-3、索引原则"><a href="#7-3、索引原则" class="headerlink" title="7.3、索引原则"></a>7.3、索引原则</h2><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的数据库表不需要加索引</li><li>索引一般加在经常查询的字段上</li></ul><blockquote><p>索引的数据结构</p></blockquote><p>B树与B+树：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">CodingLabs - MySQL索引背后的数据结构及算法原理</a>（比上面的更全面）</p><h1 id="8、权限管理和备份"><a href="#8、权限管理和备份" class="headerlink" title="8、权限管理和备份"></a>8、权限管理和备份</h1><h2 id="8-1、用户管理"><a href="#8-1、用户管理" class="headerlink" title="8.1、用户管理"></a>8.1、用户管理</h2><blockquote><p>可视化操作</p></blockquote><p><a href="https://blog.csdn.net/m0_46360532/article/details/115276037">MySQL知识汇总（第六篇）用户管理【可视化+原生SQL 方式】—创建用户，修改密码，用户重命名，用户授权，查看权限，撤销权限_m0_46360532的博客-CSDN博客</a></p><blockquote><p>SQL命令操作</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户 create user 用户名 identitfied by &#x27;密码&#x27;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> kaungshen identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span><br><br><span class="hljs-comment">-- 修改密码 （修改当前用户密码）</span><br><span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;123456&#x27;</span>)<br><br><span class="hljs-comment">-- 修改密码 （修改指定用户密码）</span><br><span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> kuangshen <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;123456&#x27;</span>)<br><br><span class="hljs-comment">-- 重命名 rename user 原名 to 新名字</span><br>rename <span class="hljs-keyword">user</span> kuangshen <span class="hljs-keyword">to</span> kuangshen2<br><br><span class="hljs-comment">-- 用户授权 all privileges 全部的权限， 库.表</span><br><span class="hljs-comment">-- all privileges 除了没有给别人授权的权限，其它都有</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privaileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> kuangshen2<br><br><span class="hljs-comment">-- 查询权限</span><br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> kuangshen2  <span class="hljs-comment">-- 查看指定用户的权限</span><br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> root<span class="hljs-variable">@localhost</span>  <span class="hljs-comment">-- 查询root用户</span><br><br><span class="hljs-comment">-- 撤销权限 revoke 哪些权限，在哪个库撤销，给谁撤销</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span>  <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> kuangshen2<br><br><span class="hljs-comment">-- 删除用户</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> kaungshen2<br></code></pre></td></tr></table></figure><h2 id="8-2、MySQL备份"><a href="#8-2、MySQL备份" class="headerlink" title="8.2、MySQL备份"></a>8.2、MySQL备份</h2><p>备份：保证重要的数据不丢失，做数据转移使用</p><p>MySQL数据库备份的方式</p><ul><li><p>直接拷贝物理文件</p></li><li><p>在MySQL可视化工具中导出</p><ul><li>在想要导出的表或数据库中，右键，选择备份或导出</li><li>选择导出哪些表，导出位置，导出什么↓，其它就是默认值</li><li>一般选择导出结构和数据（结构就是创建表等等的语句）</li></ul></li><li><p>使用cmd命令行导出 mysqldump 命令行使用</p><ul><li>导出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mysqldump -h 主机  -u 用户名  -p 密码  数据库  表名  &gt; 物理磁盘位置:/文件名</span><br>mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql<br><br><span class="hljs-comment"># dump 多张表到 一个文件</span><br><span class="hljs-comment"># mysqldump -h 主机  -u 用户名  -p 密码  数据库  表1 表2 表3  &gt; 物理磁盘位置:/文件名</span><br>mysqldump -hlocalhost -uroot -p123456 school student result &gt;D:/a.sql<br><span class="hljs-comment"># dump 数据库</span><br><span class="hljs-comment"># mysqldump -h 主机  -u 用户名  -p 密码  数据库 &gt; 物理磁盘位置:/文件名</span><br>mysqldump -hlocalhost -uroot -p123456 school &gt;D:/a.sql<br></code></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 登录数据库</span><br>mysql -uroot -p123456<br><span class="hljs-comment"># 使用数据库</span><br>use school<br><span class="hljs-comment"># 导入</span><br><span class="hljs-built_in">source</span> d:/a.sql<br></code></pre></td></tr></table></figure></li></ul><h1 id="9、规范数据库设计"><a href="#9、规范数据库设计" class="headerlink" title="9、规范数据库设计"></a>9、规范数据库设计</h1><h2 id="9-1、为什么要设计"><a href="#9-1、为什么要设计" class="headerlink" title="9.1、为什么要设计"></a>9.1、为什么要设计</h2><blockquote><p>当数据库比较复杂的时候，我们就需要设计了</p></blockquote><p><strong>糟糕的数据库设计：</strong></p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦，异常【屏蔽使用物理外键】</li><li>程序的性能差</li></ul><p><strong>良好的数据库设计：</strong></p><ul><li>节省内存空间</li><li>保证数据库的完整性</li><li>方便开发系统</li></ul><p><strong>软件开发中，关于数据库的设计</strong></p><ul><li>分析需求：分析业务和需要处理的数据库需求</li><li>概要设计：设计关系图E-R图</li></ul><h2 id="9-2、三大范式"><a href="#9-2、三大范式" class="headerlink" title="9.2、三大范式"></a>9.2、三大范式</h2><p>数据规范能有效避免：</p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效信息（文章删除标签还在）</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><strong>第一范式（1NF）</strong></p><ul><li>要求数据库的每一列都是不可分割的原子数据项</li></ul><p><strong>第二范式（2NF）</strong></p><ul><li>前提：满足第一范式</li><li>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。（意为：每张表只描述一件事情）</li></ul><p><strong>第三范式（3NF）</strong></p><ul><li>前提：满足第一范式和第二范式</li><li>在2NF的基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</li></ul><p>更详细及例子解析：<a href="https://www.cnblogs.com/wsg25/p/9615100.html">关系型数据库设计：三大范式的通俗理解 - 景寓6号 - 博客园 (cnblogs.com)</a></p><p><strong>规范性和性能的问题</strong></p><p>关联查询的表不得超过三张表（阿里标准）</p><ul><li>考虑商业化的需求和目标，（成本，用户体验）数据库的性能更加重要！</li><li>在规范性能的问题的时候，需要适当的考虑一下规范性！</li><li>故意给某些表增加一些冗余的字段。（多表查询变单表查询）</li><li>故意增加一些计算列（从大数据量降低为小数据量的查询，索引）</li></ul>]]></content>
    
    
    <categories>
      
      <category>关系型数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA类集框架</title>
    <link href="/2021/05/10/framework/"/>
    <url>/2021/05/10/framework/</url>
    
    <content type="html"><![CDATA[<h1 id="Java类集框架"><a href="#Java类集框架" class="headerlink" title="Java类集框架"></a>Java类集框架</h1><h2 id="Java类集框架简介"><a href="#Java类集框架简介" class="headerlink" title="Java类集框架简介"></a>Java类集框架简介</h2><p>数组长度固定，不可更改，所以出现了基于链表数据结构实现数组数据的存储。但是链表开发过于繁琐，还需要考虑性能问题，结构问题，标准问题等。</p><p>为了解决“动态数组”问题，Java类集框架发布，实现了链表，数组结构，二叉树，队列，栈等信息。</p><p>实现多个数据存储的结构：（时间复杂度中的2均为下标）</p><ul><li>数组：Java语言原始实现，根据索引查询时间复杂度为”O(n)”，利用二分查找时为”O(log2N)”；</li><li>链表：根据索引查为”O(n)”，基于跳表机制为”O(log2N)”；</li><li>树：平衡二叉树，根据key查询可以迅速定位为”O(log2N)”，开发难度太高。</li></ul><h2 id="Collection集合接口"><a href="#Collection集合接口" class="headerlink" title="Collection集合接口"></a>Collection集合接口</h2><p>最原始的开发接口：Collection接口，其定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>Collection接口中提供的公共类集数据的操作方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td><font color="red">public boolean add(E e)</font></td><td><font color="red">向集合中追加单个数据</font></td></tr><tr><td>public boolean addAll(Collection&lt;? extends E&gt; c)</td><td>向集合中追加一组数据</td></tr><tr><td>public void clear()</td><td>清空集合数据</td></tr><tr><td>public boolean contains(Object o)</td><td>判断集合中是否存在指定的数据内容，需要equals()支持</td></tr><tr><td>public boolean containsAll(Collection&lt;?&gt; c)</td><td>判断某个集合的内容是否存在</td></tr><tr><td>public boolean isEmpty()</td><td>判断是否为空集合（没有保存任何数据）</td></tr><tr><td><font color="red">public Iterator<E> iterator()</E></font></td><td><font color="red">获取Iterator接口对象实例</font></td></tr><tr><td>public boolean remove(Object o)</td><td>从集合中删除数据，需要equals()支持</td></tr><tr><td>public int size()</td><td>返回集合中保存的元素个数</td></tr><tr><td>public Object[] toArray()</td><td>将集合中的数据转为对象数组</td></tr></tbody></table><p>Collection接口并不是无限制的进行数据的存储，它可以存储的最大数据个数为”Integer.MAX_VALUE“(整型最大值)。实际开发很难直接见到Collection接口应用，为了更明确给出所有存储结构的特点，都会使用Collection子接口。</p><p>最常见的子接口：List（允许保存重复数据）、Set（不允许保存重复数据）、SortSet（不允许重复且排序保存）、Queue（队列）。</p><img src="/2021/05/10/framework/image-20210522104749085.png" alt="image-20210522104749085" style="zoom:67%;"><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h3 id="List接口简介"><a href="#List接口简介" class="headerlink" title="List接口简介"></a>List接口简介</h3><p>只要想实现动态对象数组，大部分情况下都考虑List接口。其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>虽然List是Collection接口的子接口，但是List接口本身会提供有很多新的扩展的处理方法。</p><p>常用方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public void add(int index,E element)</td><td>在指定索引位置处添加元素</td></tr><tr><td>public E get(int index)</td><td>根据索引获取保存的数据</td></tr><tr><td>public int indexOf(Object o)</td><td>获取指定数据的索引位置</td></tr><tr><td>public ListIterator<E> listIterator()</E></td><td>获取ListIterator接口对象实例</td></tr><tr><td>public E set(int index,E element)</td><td>修改指定索引位置的数据</td></tr><tr><td>public default void sort(Comparator&lt;? super E&gt; c)</td><td>使用特定比较器实现排序操作</td></tr><tr><td>public List<E> subList(int fromIndex,int toIndex)</E></td><td>截取子集合</td></tr><tr><td>public static <E> List<E> of(E… elements)</E></E></td><td>通过给定的元素创建List集合</td></tr></tbody></table><p>其中get()方法的使用几率非常高。</p><p>案例：使用of()方法实现List集合创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.list;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//使用of()方法实现List集合创建</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestListDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//此时所创建的list集合内部存在有重复的数据内容</span><br>        List list=List.of(<span class="hljs-string">&quot;huahua&quot;</span>,<span class="hljs-string">&quot;www.cp.com&quot;</span>,<span class="hljs-string">&quot;memeda&quot;</span>,<span class="hljs-string">&quot;huahua&quot;</span>,<span class="hljs-string">&quot;zhao-p.github,io&quot;</span>,<span class="hljs-string">&quot;huahua&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object obj:<br>             list.toArray()) &#123;<br>            System.out.print(obj+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/../../../TyporaWorkspace/JavaSE/Java类集框架/image-20210522123215921.png" alt="image-20210522123215921" style="zoom:80%;float:left"><p>以上的List集合属于一种半成品的工具类，使用add()方法加数据时会出现异常。异常类型为”UnsupportedOperationException“指的是操作未实现异常，因为of()方法仅仅能够创建一个固定大小的List实例。</p><p>List集合的常用子类：ArrayList、Vectot、LinkedList。</p><img src="/2021/05/10/framework/image-20210522124448308.png" alt="image-20210522124448308" style="zoom:67%;"><h3 id="ArrayList子类"><a href="#ArrayList子类" class="headerlink" title="ArrayList子类"></a>ArrayList子类</h3><img src="/2021/05/10/framework/image-20210522213401351.png" alt="image-20210522213401351" style="zoom:67%;"><p>ArrayList类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;,<span class="hljs-title">RandomAccess</span>,<span class="hljs-title">Cloneable</span>,<span class="hljs-title">Serializable</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p> ArrayList子类继承AbsteactList抽象父类，AbsteactList又实现了List接口，同时继承了AbstractCollection父类（Collection子类）。</p><p>这样实现的原因：List接口下可能有很多子类，这样就会存在一些公共方法的实现，利用抽象类来取公共方法，各子类只完成自己特殊的方法即可，同时为了强调ArrayList是List的子类，就在ArrayList定义时多实现了List接口。若要接口对象实例化，必须依靠子类构造方法，ArrayList类存在两个构造方法。</p><p>构造方法1：实例化ArrayList类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>构造方法2：实例化ArrayList类对象，并配置初始化容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initalCapacity)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(initalCapacity&gt;<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断设置的容量是否大于0</span><br>        <span class="hljs-keyword">this</span>.elementData=<span class="hljs-keyword">new</span> Object[initialCapacity];<span class="hljs-comment">//开辟新数组</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(initalCapacity==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果容量为0</span><br>        <span class="hljs-keyword">this</span>.elementData=EMPTY_ELEMENTDATA;<span class="hljs-comment">//与无参构造类似</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果为负数则直接抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity:&quot;</span>+initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据增加add()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span></span>&#123;<br>modCount++;<span class="hljs-comment">//是进行多线程保护的</span><br>    add(e,elementData,size);<span class="hljs-comment">//调用本类的add()重载方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//无条件返回true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>重载的add()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E e,Object[] elementData,<span class="hljs-keyword">int</span> s)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s==elementData.length)<span class="hljs-comment">//判断当前保存的个数是否已经为数组长度</span><br>        elementData=grow();<span class="hljs-comment">//扩充容量，修改已有的数组引用</span><br>    elementData[s]=e;<span class="hljs-comment">//如果有空间，则进行数据的保存</span><br>    size=s+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>grow()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object[] grow()&#123;<span class="hljs-comment">//此方法返回一个新的数组</span><br>    <span class="hljs-keyword">return</span> grow(size+<span class="hljs-number">1</span>);<span class="hljs-comment">//具体的增长操作</span><br>&#125;<br></code></pre></td></tr></table></figure><p>增长操作的grow()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object[] grow(<span class="hljs-keyword">int</span> minCapacity)&#123;<br>    <span class="hljs-keyword">int</span> oldCapacity=elementData.length;<span class="hljs-comment">//获取已有的数组长度</span><br>    <span class="hljs-comment">//判断已有的长度是否大于0（默认创建的数组长度为0，因为是一个空数组）</span><br>    <span class="hljs-keyword">if</span>(oldCapacity&gt;<span class="hljs-number">0</span>||elementData!=DEFAULTCAPACITY_EMPTY_ELEMENTDATA)&#123;<br>        <span class="hljs-comment">//定义一个新的数组大小</span><br>        <span class="hljs-keyword">int</span> newCapacity=ArraysSupport.newLength(OldCapacity,minCapacity-oldCapacity,oldCapacity&gt;&gt;<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//利用数字拷贝的操作将原始的数组内容拷贝到新的数组之中</span><br>        <span class="hljs-keyword">return</span> elementData=Arrays.copyOf(elementData,newCapacity);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> elementData=<span class="hljs-keyword">new</span> Object[Max.max(DEFAULT_CAPACITY,minCapacity)];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：使用ArrayList实现动态数组操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.arrayList;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//使用ArrayList实现动态数组操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestArrayListDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//获取list接口对象</span><br>        System.out.printf(<span class="hljs-string">&quot;【集合保存数据前的状态】集合长度：%s、集合是否为空：%s\n&quot;</span>,list.size(),list.isEmpty());<br>        list.add(<span class="hljs-string">&quot;huahua&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;plmm&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;数组操作&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;【集合保存数据后的状态】集合长度：%s、集合是否为空：%s\n&quot;</span>,list.size(),list.isEmpty());<br>        <span class="hljs-keyword">for</span> (Object s : list.toArray()) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210522161214128.png" alt="image-20210522161214128" style="zoom:67%;"><p>ArrayList类内部所提供的基本工作原理：</p><ul><li>在ArrayList类中实现数据存储的时候所采用的数据类型为Object对象数组，ArrayList是基于数组实现的集合操作；使用数组操作可以降低时间复杂度（get()方法直接定位，时间复杂度为O(1)，但是有长度局限，意味着需要在项目实现过程中不断进行数组长度的更新，一旦更新长度就要不断创建新的数组。</li><li>ArrayList里面即便现在使用了无参构造（数组为空数组），那么也可以实现数据内容的”无限制“存储，而在进行数据增加的时候就需要动态的实现数组内容的扩充，扩充就意味着垃圾空间的产生。</li></ul><p>结论：ArrayList是List的常用子类，在其使用之前最佳的做法是要预估保存数据的最大长度，因为只有预估正确的长度才可以避免垃圾的产生以及不断的引用修改所带来的性能问题，ArrayList最佳的优势在于对于数据索引查询时，可以保证其性能很高。每一次扩充容量的大小为当前容量的50%。</p><h3 id="保存自定义类对象"><a href="#保存自定义类对象" class="headerlink" title="保存自定义类对象"></a>保存自定义类对象</h3><p><strong>自定义对象存储</strong></p><p>在List接口的定义中以及ArrayList子类的定义里面会发现都存在有泛型，之所以有泛型是因为希望里面所保存的数据的类型要统一，这样也就包括了自定义类对象的存储。</p><p>案例：实现自定义对象存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.arrayList;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//实现自定义对象存储</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestArrayListDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Book&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;JAVA入门&quot;</span>,<span class="hljs-string">&quot;李兴华&quot;</span>,<span class="hljs-number">99.8</span>));<br>        list.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;C语言入门&quot;</span>,<span class="hljs-string">&quot;何杰&quot;</span>,<span class="hljs-number">53.6</span>));<br>        list.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;微信小程序入门&quot;</span>,<span class="hljs-string">&quot;陈国阳&quot;</span>,<span class="hljs-number">42.3</span>));<br>        list.remove(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;C语言入门&quot;</span>,<span class="hljs-string">&quot;何杰&quot;</span>,<span class="hljs-number">53.6</span>));<br>        System.out.println(list.contains(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;微信小程序入门&quot;</span>, <span class="hljs-string">&quot;陈国阳&quot;</span>, <span class="hljs-number">42.3</span>)));<br>        <span class="hljs-keyword">for</span> (Object book : list.toArray()) &#123;<br>            System.out.println(book);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String title, String author, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>        <span class="hljs-keyword">this</span>.author = author;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;【Book】图书名：&quot;</span>+<span class="hljs-keyword">this</span>.title+<span class="hljs-string">&quot;\t作者：&quot;</span>+<span class="hljs-keyword">this</span>.author+<span class="hljs-string">&quot;\t价格：&quot;</span>+<span class="hljs-keyword">this</span>.price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时已经实现了自定义对象的存储，但是在List接口里面提供有一个contains()方法、remove()方法，这时发现这两个操作方法在自定义类对象面前的时候竟然无法生效，这时候需要在自定义类中覆写好equals()方法，才能正确完成功能。</p><p>案例：完成类集中的自定义数据的查找与删除（在Book类中添加equals()方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>==obj)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(!(obj <span class="hljs-keyword">instanceof</span> Book))&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>       &#125;<br>       Book book=(Book)obj;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.title.equals(book.title)&amp;&amp;<span class="hljs-keyword">this</span>.author.equals(book.author)&amp;&amp;<span class="hljs-keyword">this</span>.price==book.price;<br>   &#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210522214729485.png" alt="image-20210522214729485" style="zoom:67%;"><p>由于Object类是所有类的父类，则可以知道：所有的类都存在有这种对象比较的处理方法，从而就可以利用这个公共的方法实现最终所需要数据查询和删除的操作机制。</p><h3 id="LinkedList子类"><a href="#LinkedList子类" class="headerlink" title="LinkedList子类"></a>LinkedList子类</h3><p>在List接口中的LinkedList子类与ArrayList类实现最大区别在于，此类是基于链表实现的数据存储，链表在没有任何处理时实现数据存储的时间复杂度为O(n)。</p><p>LinkedList子类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSequentialList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;,<span class="hljs-title">Deque</span>&lt;<span class="hljs-title">E</span>&gt;,<span class="hljs-title">Cloneable</span>,<span class="hljs-title">Serializable</span></span><br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210522220108666.png" alt="image-20210522220108666" style="zoom:67%;"><p>不管是数组实现还是链表实现，只要仙子啊有一个公共的接口存在，那么整体的处理就都以接口中提供的方法为主。</p><p>案例：观察LinkedList使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.linkedList;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//观察LinkedList使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLinkedListDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;www.sina.com&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;www.163.com&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LinkedList程序类是基于链表结构实现的一种List存储形式，既然是链表其内部就一定会提供有相应的数据存储节点类。</p><p>Node类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>如果要想进行链表数据结构的存储，就必须将数据封装在Node类对象之中，同时这个Node类里面要保存有两个节点引用；上一个节点以及下一个节点，所以此链表为双向链表；</p><p>add()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span></span>&#123;<br>    linkLast(e);<span class="hljs-comment">//在内部切换到linkLast()方法，将新元素保存到最后一个节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>linkLast()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span></span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l=last;<span class="hljs-comment">//保存已经存在的最后一个节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode=<span class="hljs-keyword">new</span> Node&lt;&gt;(l,e,<span class="hljs-keyword">null</span>);<span class="hljs-comment">//将数据包裹在节点中</span><br>    last=newNode;<span class="hljs-comment">//新节点设置为最后一个节点</span><br>    <span class="hljs-keyword">if</span>(l==<span class="hljs-keyword">null</span>)<span class="hljs-comment">//如果没有最后一个节点</span><br>        first=newNode;<span class="hljs-comment">//没有任何节点时，新节点为根节点</span><br>    <span class="hljs-keyword">else</span><br>        l.next=newNode;<span class="hljs-comment">//设置节点关系</span><br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了防止不必要的递归或者是循环的处理操作，会将新的节点直接进行保存，假设新的节点都为最后一个节点，随后基于这个最后一个节点实现相关的引用处理。</p><p>remove方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(o==nul)&#123;<span class="hljs-comment">//如果对象为空时的删除</span><br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>unlink()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span></span>&#123;<br>    fianl E element=x.item;<br>    fianl Node&lt;E&gt; next=x.next;<span class="hljs-comment">//获得要删除节点的下一个节点</span><br>    fianl Node&lt;E&gt; prev=x.prev;<span class="hljs-comment">//获得要删除节点的上一个节点</span><br>    <span class="hljs-keyword">if</span>(prev==<span class="hljs-keyword">null</span>)&#123;<span class="hljs-comment">//上一个节点不存在</span><br>        first=next;<span class="hljs-comment">//修改first节点的指向（根元素）</span><br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要想实现节点的删除，那么一定要有节点的空出，空出的时候需要配置好相关的前一个节点的引用以及后一个节点的引用。</p><hr><p><strong>ArrayList和LinkedList区别：</strong></p><ol><li><p>数据结构不同</p><p>ArrayList是Array(动态数组)的数据结构，LinkedList是Link(链表)的数据结构。</p></li><li><p>效率不同</p><p>当随机访问List（get和set操作）时，ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找。 </p><p>当对数据进行增加和删除的操作(add和remove操作)时，LinkedList比ArrayList的效率更高，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动。</p></li><li><p>自由性不同</p><p>ArrayList自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而LinkedList自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。</p></li><li><p>主要控件开销不同</p><p>ArrayList主要控件开销在于需要在lList列表预留一定空间；而LinkList主要控件开销在于需要存储结点信息以及结点指针信息。</p></li></ol><hr><h3 id="Vector子类"><a href="#Vector子类" class="headerlink" title="Vector子类"></a>Vector子类</h3><p>此类是JDK1.0提出的最早的动态数组实现类，在JDK1.2将其重新修改并归纳到类集框架之中。此类定义机制和ArrayList相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vector</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;,<span class="hljs-title">RandomAccess</span>,<span class="hljs-title">Cloneable</span>,<span class="hljs-title">Serializable</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>结构上和ArrayList类的继承形式是对应的，所使用的父类也是相同的。</p><img src="/2021/05/10/framework/image-20210523095732714.png" alt="image-20210523095732714" style="zoom:67%;"><p>案例：使用Vector类实现数据存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.vector;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">//使用Vector类实现数据存储</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestVectorDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> Vector&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;百度&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;新浪&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;网易&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的操作全部是List集合为标准，处理结果类型，源代码中存在不同：</p><p>无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vector</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>单参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vector</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span></span>&#123;<br>    <span class="hljs-keyword">this</span>(initialCapacity,<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>双参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vextor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity,<span class="hljs-keyword">int</span> capacityIncrement)</span></span>&#123;<br>    <span class="hljs-keyword">super</span>();<br>    <span class="hljs-keyword">if</span>(initalCapacity&lt;<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity:&quot;</span>+initialCapcity);<br>    <span class="hljs-keyword">this</span>.elementData=<span class="hljs-keyword">new</span> Object[initialCapacity];<br>    <span class="hljs-keyword">this</span>.capacityIncrement=capacityIncrement;<br>&#125;<br></code></pre></td></tr></table></figure><p>add()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span></span>&#123;<br>    modCount++;<br>    add(e,elementData,elementCount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用ArrayList的时候如果通过无参构造方法实例化了ArrayList对象，它默认的容量大小是一个空数组，而Vector默认的容量大小数组长度为10。而与ArrayList最大的区别就是在于其使用了synchronized进行了方法的实现。</p><p>ArrayList与Vector之间的关系：</p><ul><li>ArrayList和Vector都使用了数组的机制实现了数据的存储，默认开辟的数组大小是不同的，ArrayList为空数组，Vector默认的大小为10个元素的长度；</li><li>ArrayList类的全部方法为异步处理，Vector类的全部方法使用了synchronized同步标记，所以ArrayList属于非线程安全的集合类，而Vector属于线程安全的集合类；</li></ul><p>大部分的同步在单线程中是没有意义的，开发中List接口基本上是使用ArrayList子类。实现时预估好要存储的数据长度，避免无用的数组空间的开辟。</p><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><h3 id="Set接口简介"><a href="#Set接口简介" class="headerlink" title="Set接口简介"></a>Set接口简介</h3><p>Java类集设计中Set集合最大特点是里面保存的数据不允许出现有重复。</p><p>Set接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Set</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>Set接口是Collection接口的直接子接口，但是Set接口并没有像List接口那样对Collection接口进行了大量的扩充，而仅仅是维持了Collection接口定义（List中的get()方法是无法在Set子类中使用的），Set接口中扩充了default方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-function">Set&lt;E&gt; <span class="hljs-title">of</span><span class="hljs-params">(E...elements)</span></span><br></code></pre></td></tr></table></figure><p>案例：观察Set集合的特点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.set;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-comment">//观察Set集合的特点</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSetDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//此时的Set集合存在有重复的数据的配置</span><br>        Set&lt;String&gt; set=Set.of(<span class="hljs-string">&quot;迅雷&quot;</span>,<span class="hljs-string">&quot;百度&quot;</span>,<span class="hljs-string">&quot;网易&quot;</span>,<span class="hljs-string">&quot;腾讯&quot;</span>,<span class="hljs-string">&quot;网易&quot;</span>);<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523130230646.png" alt="image-20210523130230646" style="zoom:67%;"><p>使用Set设置有重复的数据内容会抛出IllegalArgumentException异常，同时告诉哪些数据重复。</p><p>在集合接口中所给出的of()方法本身仅仅只是可以实现一个集合的定义，而要想真正进行集合内容的操作是不支持的，所以正确的做法是通过其常用的子类：HashSet（散列存储）、TreeSet（有序存储）、LinkedHashSet（链表存储）。</p><img src="/2021/05/10/framework/image-20210523130947065.png" alt="image-20210523130947065" style="zoom:67%;"><h3 id="HashSet子类"><a href="#HashSet子类" class="headerlink" title="HashSet子类"></a>HashSet子类</h3><p>在Set接口中最为常用的一个子类就是HashSet子类，首先来观察一下HashSet子类的继承结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSet</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Set</span>&lt;<span class="hljs-title">E</span>&gt;,<span class="hljs-title">Cloneable</span>,<span class="hljs-title">Serializable</span></span><br></code></pre></td></tr></table></figure><p>HashSet子类直接继承自AbstractSet抽象父类，同时实现了Set接口，而AbstractSet类又是AbstractCollection子类，继承结构如下：</p><p><img src="/2021/05/10/framework/image-20210523150522483-1622448523840.png" alt="image-20210523150522483"></p><p>无参构造：HashSet内部使用的是HashMap的另一种结构实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">()</span></span>&#123;<br>    map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>有参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span></span>&#123;<br>    map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;(initialCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>HashSet的实现结构严重依赖于HashMap类的处理结构，所以此时出现的大小关系与数组没有任何联系。</p><p>案例：观察HashSet的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.set;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-comment">//观察HashSet的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashSetDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;String&gt; set=<span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;baidu&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;wangyiyun&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;tencent&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;tencent&quot;</span>);<span class="hljs-comment">//重复内容不保存</span><br>        set.add(<span class="hljs-string">&quot;sina&quot;</span>);<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523150119346.png" alt="image-20210523150119346" style="zoom:67%;"><p>所有的类集都是通过子类向父接口进行对象实例化，完成之后通过父接口里面定义的方法实现相关数据操作，但是对应于HashSet类提供有一个LinkedHashSet类，这个类不允许保存重复数据，但是可以按照数据保存的顺序进行存储。</p><p>案例：观察LinkedHashSet子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.set;<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">//观察LinkedHashSet子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLinkedHashSetDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;String&gt; set=<span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;baidu&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;wangyiyun&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;tencent&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;tencent&quot;</span>);<span class="hljs-comment">//重复内容不保存</span><br>        set.add(<span class="hljs-string">&quot;sina&quot;</span>);<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523150643932.png" alt="image-20210523150643932" style="zoom:67%;"><p>使用LinkedHashSet子类之后，数据保存顺序就是最终数据存储的顺序，同时LinkedHashSet还是HashSet的子类。</p><h3 id="TreeSet子类"><a href="#TreeSet子类" class="headerlink" title="TreeSet子类"></a>TreeSet子类</h3><p>TreeSet保存的数据都是有序的，TreeSet结构定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSet</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">NavigableSet</span>&lt;<span class="hljs-title">E</span>&gt;,<span class="hljs-title">Cloneable</span>,<span class="hljs-title">Serializable</span></span><br></code></pre></td></tr></table></figure><p>TreeSet是AbstractSet抽象类的子类，同时这个子类又实现了NavigableSet接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NavigableSet</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">SortedSet</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>NavigableSet接口是SortedSet的子接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SortedSet</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Set</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523151905335.png" alt="image-20210523151905335" style="zoom:67%;"><p>案例：观察TreeSet子类的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.set;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">//观察TreeSet子类的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTreeSetDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;String&gt; set=<span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;baidu&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;wangyiyun&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;tencent&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;tencent&quot;</span>);<span class="hljs-comment">//重复内容不保存</span><br>        set.add(<span class="hljs-string">&quot;sina&quot;</span>);<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523152247168.png" alt="image-20210523152247168" style="zoom:67%;"><p>结果发现数据按首字母排序保存，在项目中若需要实现多个数据的排序存储，可以通过TreeSet子类完成。</p><h3 id="TreeSet排序说明"><a href="#TreeSet排序说明" class="headerlink" title="TreeSet排序说明"></a>TreeSet排序说明</h3><p>TreeSet可以实现字符串对象的排序，在自定义类中实现Comparable比较器接口后就可以实现任意的数据排序操作。若未实现接口则程序报ClassCastException错误。</p><p>注意：在使用Comparable实现自定义大小比较关系时要将所有的属性都拿来实现大小关系的判断，若仅使用部分属性且这部分刚好相同，那么就会认为是同一个对象。</p><p>案例：TreeSet与Comparable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.set;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">//TreeSet排序说明</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTreeSetDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;Book&gt; set=<span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        set.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;JAVA入门&quot;</span>,<span class="hljs-string">&quot;李兴华&quot;</span>,<span class="hljs-number">99.8</span>));<br>        set.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;C语言入门&quot;</span>,<span class="hljs-string">&quot;何杰&quot;</span>,<span class="hljs-number">53.6</span>));<br>        set.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;Go语言入门&quot;</span>,<span class="hljs-string">&quot;陈思宇&quot;</span>,<span class="hljs-number">77.45</span>));<br>        set.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;C语言入门&quot;</span>,<span class="hljs-string">&quot;何杰&quot;</span>,<span class="hljs-number">53.6</span>));<br>        set.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;微信小程序入门&quot;</span>,<span class="hljs-string">&quot;陈国阳&quot;</span>,<span class="hljs-number">42.3</span>));<br>        <span class="hljs-keyword">for</span> (Book book : set) &#123;<br>            System.out.println(book);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Book</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String title, String author, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>        <span class="hljs-keyword">this</span>.author = author;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;【Book】图书名：&quot;</span>+<span class="hljs-keyword">this</span>.title+<span class="hljs-string">&quot;\t作者：&quot;</span>+<span class="hljs-keyword">this</span>.author+<span class="hljs-string">&quot;\t价格：&quot;</span>+<span class="hljs-keyword">this</span>.price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Book o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.price&gt;o.price)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.price&lt;o.price)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.title.compareTo(o.title)&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.title.compareTo(o.title)&lt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.author.compareTo(o.author);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523155307065.png" alt="image-20210523155307065" style="zoom:67%;"><p>要想使用TreeSet实现多个对象的排序，对类的要求太高（属性太多时使用compareTo()方法比较的内容太复杂），若是自定义类非必要情况下不建议使用TreeSet。</p><h3 id="重复内容判断"><a href="#重复内容判断" class="headerlink" title="重复内容判断"></a>重复内容判断</h3><p>整个Set结合里面都是不允许保存有重复元素（HashSet、LinkedHashSet、TreeSet）。TreeSet可以通过Comparable接口实现重复元素判断，基于比较的方式，不是公共的重复元素判断标准。</p><p>实际项目中实现重复元素判断要结合Object类完成。需要通过两个方法实现重复判断：</p><ul><li><p>获取对象编码，首先依据编码获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure></li><li><p>对象比较，将获取的数据和传入的数据进行比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Obejct obj)</span></span><br></code></pre></td></tr></table></figure></li></ul><p>对于类中的hashCode()由于需要保证其唯一性，所以可借助开发工具（Eclipse、IDEA）自动生成。</p><p>生成方法：按住电脑alt+insert，选择equals() and hashCode()，一路next到最后一个页面时内容全部打勾。</p><p>案例：观察重复元素的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.set;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">//观察重复元素的处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashCodeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;IDCard&gt; set=<span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        set.add(<span class="hljs-keyword">new</span> IDCard(<span class="hljs-number">1016</span>,<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">21</span>));<br>        set.add(<span class="hljs-keyword">new</span> IDCard(<span class="hljs-number">1018</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">22</span>));<br>        set.add(<span class="hljs-keyword">new</span> IDCard(<span class="hljs-number">1024</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">18</span>));<br>        set.add(<span class="hljs-keyword">new</span> IDCard(<span class="hljs-number">1024</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">18</span>));<br>        set.add(<span class="hljs-keyword">new</span> IDCard(<span class="hljs-number">1033</span>,<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-number">20</span>));<br>        <span class="hljs-keyword">for</span> (IDCard idCard : set) &#123;<br>            System.out.println(idCard);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDCard</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IDCard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;【IDCard】编号：&quot;</span>+<span class="hljs-keyword">this</span>.id+<span class="hljs-string">&quot;\t姓名：&quot;</span>+<span class="hljs-keyword">this</span>.name+<span class="hljs-string">&quot;\t年龄：&quot;</span>+<span class="hljs-keyword">this</span>.age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        IDCard idCard = (IDCard) o;<br>        <span class="hljs-keyword">return</span> id == idCard.id &amp;&amp;<br>                age == idCard.age &amp;&amp;<br>                name.equals(idCard.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(id, name, age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523164333416.png" alt="image-20210523164333416" style="zoom:67%;"><h2 id="集合输出"><a href="#集合输出" class="headerlink" title="集合输出"></a>集合输出</h2><p>现在为止成功实现单值集合的数据存储操作，但是这些集合输出都使用的是对象数组转换后的形式完成；按照Java类集的设计要求，对于集合的输出结构分为四种：Iterator、ListIterator、Enumeration、foreach。其中Iterator和foreach使用较多。</p><h3 id="Iterator迭代输出"><a href="#Iterator迭代输出" class="headerlink" title="Iterator迭代输出"></a>Iterator迭代输出</h3><p>Iterator是专门用于类集数据输出的标准化操作接口。</p><p>Iterable接口的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public default void forEach(Consumer&lt;? super T&gt; action)</td><td>直接利用消费型函数式接口实现内容的输出，对应Lambda表达式</td></tr><tr><td>public Iterator<T> iterator()</T></td><td>获取Iterator接口对象，只要是此接口的子类都拥有此方法</td></tr></tbody></table><p>案例：观察forEach()方法实现集合输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//观察forEach()方法实现集合输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestforEachDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;阿里&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;腾讯&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;拼多多&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;字节跳动&quot;</span>);<br>        list.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐使用Iterator接口实现集合的输出，其基本的实现输出架构：</p><img src="/2021/05/10/framework/image-20210523170922859.png" alt="image-20210523170922859" style="zoom:67%;"><p>Iterator的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public boolean hasNext()</td><td>判断是否由下一个内容</td></tr><tr><td>public E next()</td><td>获取内容</td></tr><tr><td>default void remove()</td><td>删除内容</td></tr></tbody></table><p>迭代：里面的执行会根据具体的判断结果来进行推断，例如，用桶向不透明池子加水：加一桶后观察，满了没？没满继续加一桶，加完再观察，满了没？没满继续加一桶，······</p><p>案例：实现Iterator接口内容输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//观察forEach()方法实现集合输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestforEachDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">//直接使用Arrays类中提供的asList()方法将若干数据内容转为list接口实例</span><br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//List&lt;String&gt; list=Arrays.asList(&quot;阿里&quot;,&quot;腾讯&quot;,&quot;拼多多&quot;,&quot;字节跳动&quot;);</span><br>        list.add(<span class="hljs-string">&quot;阿里&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;腾讯&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;拼多多&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;字节跳动&quot;</span>);<br>        System.out.println(list.remove(<span class="hljs-string">&quot;腾讯&quot;</span>));<br>        <span class="hljs-comment">//list.forEach(System.out::println);</span><br>        Iterator&lt;String&gt; iterator=list.iterator();<span class="hljs-comment">//创建迭代对象</span><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<span class="hljs-comment">//判断是否有下一个数据</span><br>            String string=iterator.next();<span class="hljs-comment">//获取数据</span><br>            System.out.println(string);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码实现了删除和输出的功能，在List接口和Iterator接口里面都提供一个remove()数据删除方法，那么这两个删除的区别是？</p><p>案例：观察迭代输出过程中的List删除的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//观察forEach()方法实现集合输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestforEachDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">//直接使用Arrays类中提供的asList()方法将若干数据内容转为list接口实例</span><br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//List&lt;String&gt; list=Arrays.asList(&quot;阿里&quot;,&quot;腾讯&quot;,&quot;拼多多&quot;,&quot;字节跳动&quot;);</span><br>        list.add(<span class="hljs-string">&quot;阿里&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;腾讯&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;拼多多&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;字节跳动&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(list.remove(&quot;腾讯&quot;));</span><br>        <span class="hljs-comment">//list.forEach(System.out::println);</span><br>        Iterator&lt;String&gt; iterator=list.iterator();<span class="hljs-comment">//创建迭代对象</span><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<span class="hljs-comment">//判断是否有下一个数据</span><br>            String string=iterator.next();<span class="hljs-comment">//获取数据</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;阿里&quot;</span>.equals(string))&#123;<span class="hljs-comment">//设置一个判断条件</span><br>                list.remove(string);<span class="hljs-comment">//删除数据</span><br>            &#125;<br>            System.out.println(string);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的删除出现了ConcurrentModificationException（并发修改问题）异常，因为在整个集合里面，都会有一个防止多线程访问时数据修改不准确的计数变量，在进行迭代输出时，如果修改了原始的集合内容，那么对于整个程序来讲就认为有线程破坏了正常的输出结构，所以产生了如上问题。</p><p>案例：通过Iterator实现删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//观察forEach()方法实现集合输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestforEachDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">//直接使用Arrays类中提供的asList()方法将若干数据内容转为list接口实例</span><br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;阿里&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;腾讯&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;拼多多&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;字节跳动&quot;</span>);<br>        Iterator&lt;String&gt; iterator=list.iterator();<span class="hljs-comment">//创建迭代对象</span><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<span class="hljs-comment">//判断是否有下一个数据</span><br>            System.out.println(list);<br>            String string=iterator.next();<span class="hljs-comment">//获取数据</span><br>            iterator.remove();<span class="hljs-comment">//删除当前数据</span><br>        &#125;<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523191727539.png" alt="image-20210523191727539" style="zoom:67%;"><p>Iterator接口主要功能是进行输出，主要的方法也是hasNext()、next()，删除操作只作为了解即可。</p><h3 id="ListIterator双向迭代输出"><a href="#ListIterator双向迭代输出" class="headerlink" title="ListIterator双向迭代输出"></a>ListIterator双向迭代输出</h3><p>Iterator接口再进行迭代输出的时候只能够由前向后实现迭代操作，但是通过ListIterator接口就能够实现双向迭代处理。ListIterator结构定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ListIterator</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>此接口属于Iterator子接口，但是在Iterator接口中并没有提供获取ListIterator接口的方法。而在List子接口里提供了获取ListIterator接口的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListIterator&lt;E&gt; <span class="hljs-title">listIterator</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523193208590.png" alt="image-20210523193208590" style="zoom:67%;"><p>ListIterator是Iterator子接口，所以由前向后的迭代操作就可以通过Iterator接口中提供的方法来处理，而对于由后向前迭代操作才由ListIterator接口自行扩充，有如下的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public void add(E e)</td><td>向集合中增加数据</td></tr><tr><td>public boolean hasPrevious()</td><td>判断是否有前一个元素</td></tr><tr><td>public E previous()</td><td>获取前一个元素</td></tr><tr><td>public void set(E e)</td><td>修改当前元素数据</td></tr></tbody></table><p>案例：观察ListIterator接口操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ListIterator;<br><br><span class="hljs-comment">//双向迭代：观察ListIterator接口操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestListIteratorDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">//直接使用Arrays类中提供的asList()方法将若干数据内容转为list接口实例</span><br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;阿里&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;腾讯&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;拼多多&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;字节跳动&quot;</span>);<br>        ListIterator&lt;String&gt; listIterator=list.listIterator();<span class="hljs-comment">//创建双向迭代对象</span><br>        System.out.println(<span class="hljs-string">&quot;【由前向后输出】&quot;</span>);<br>        <span class="hljs-keyword">while</span>(listIterator.hasNext())&#123;<span class="hljs-comment">//判断是否有下一个数据</span><br>            String string=listIterator.next();<span class="hljs-comment">//获取数据</span><br>            System.out.print(string+<span class="hljs-string">&quot;、&quot;</span>);<br>            listIterator.set(<span class="hljs-string">&quot;【国家电网】&quot;</span>+string);<span class="hljs-comment">//修改数据</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;\n【由后向前输出】&quot;</span>);<span class="hljs-comment">//追加一个空行</span><br>        <span class="hljs-keyword">while</span> (listIterator.hasPrevious())&#123;<br>            System.out.print(listIterator.previous()+<span class="hljs-string">&quot;、&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523195040063.png" alt="image-20210523195040063" style="zoom:67%;"><p>上面的代码既实现了双向迭代输出，还实现了修改内容。但是集合输出一般是单向迭代，在进行双向迭代时：若想实现由后向前迭代，必须先实现由前向后的迭代。</p><h3 id="Enumeration枚举输出"><a href="#Enumeration枚举输出" class="headerlink" title="Enumeration枚举输出"></a>Enumeration枚举输出</h3><p>JDK1.0时提供有一个Vector向量操作类用于实现动态对象数组，但是JDK1.2这个类的结构已经发生了改变，同时也加入到了类集之中，但是Vector本身也配置了一个专属的输出Enumeration。</p><p>若要获得Enumeration接口对象实例，就必须依靠Vector类中的以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Enumeration&lt;E&gt; <span class="hljs-title">elements</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>获取了Enumeration接口对象实例后，若要操作枚举输出，课采用下列方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public default Iterator<E> asIterator()</E></td><td>将Enumeration转为Iterator接口对象实例</td></tr><tr><td>public boolean hasMoreElements()</td><td>判断是否有下一个元素</td></tr><tr><td>public E nextElement()</td><td>获取当前元素</td></tr></tbody></table><img src="/2021/05/10/framework/image-20210523203018617.png" alt="image-20210523203018617" style="zoom:67%;"><p>案例：通过Enumeration实现Vector集合输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">//通过Enumeration实现Vector集合输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEnumeration</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Vector&lt;String&gt; vector=<span class="hljs-keyword">new</span> Vector&lt;&gt;();<span class="hljs-comment">//只有Vector才能获取Enumeration</span><br>        vector.add(<span class="hljs-string">&quot;工商银行&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;东方航空&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;华润集团&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;中国石油&quot;</span>);<br>        Enumeration enumeration=vector.elements();<span class="hljs-comment">//将Vector转为Enumeration</span><br>        <span class="hljs-keyword">while</span>(enumeration.hasMoreElements())&#123;<span class="hljs-comment">//是否有数据</span><br>            System.out.println(enumeration.nextElement());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然Enumeration里面的方法名称很长，但是很多项目里面还会有一些旧的方法出现的情况下一般都有可能使用到Enumeration。</p><h3 id="foreach输出"><a href="#foreach输出" class="headerlink" title="foreach输出"></a>foreach输出</h3><p>为方便进行数组和集合的输出，提供新的for循环结构–foreach输出，foreach可以避免数组索引的处理问题，集合也可以使用foreach输出。</p><p>案例：通过foreach实现集合输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">//通过foreach实现集合输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Testforeach01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list= Arrays.asList(<span class="hljs-string">&quot;美利坚&quot;</span>,<span class="hljs-string">&quot;英吉利&quot;</span>,<span class="hljs-string">&quot;德意志&quot;</span>,<span class="hljs-string">&quot;法兰西&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s:list) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然foreach输出功能很简化，比Iterator功能也更强，但是不能忽略Iterator接口，因为foreach循环结构不可能脱离Iterable接口。</p><hr><p><strong>面试题：如何可以将一个自定义类通过foreach格式实现类中数组的输出？</strong></p><p>若想实现自定义的foreach迭代的处理要求，则必须手工实现Iterable接口、Iterator接口，所以程序结构如下：</p><img src="/2021/05/10/framework/image-20210523210401948.png" alt="image-20210523210401948" style="zoom:67%;"><p>案例：手工实现foreach循环结构支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Testfoeach02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book book=Book.getInstance();<span class="hljs-comment">//获取Iterable接口子类实例</span><br>        <span class="hljs-keyword">for</span> (Book temp:book) &#123;<br>            System.out.println(temp);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Book</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Book INSTANCE=<span class="hljs-keyword">new</span> Book();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Book ALL[]=<span class="hljs-keyword">new</span> Book[]&#123;<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;西游记&quot;</span>),<br>    <span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;三国演义&quot;</span>),<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;红楼梦&quot;</span>),<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;水浒传&quot;</span>)&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> foot=<span class="hljs-number">0</span>;<span class="hljs-comment">//作为数组内容是否存在的计数</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Book</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String title)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;【Book】图书名称：&quot;</span>+<span class="hljs-keyword">this</span>.title;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Book <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;Book&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BookIter();<br>    &#125;<br><br>    <span class="hljs-comment">//定义内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookIter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Book</span>&gt;</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> Book.<span class="hljs-keyword">this</span>.foot&lt;Book.ALL.length;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> Book.ALL[Book.<span class="hljs-keyword">this</span>.foot++];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210523211530834.png" alt="image-20210523211530834" style="zoom:60%;"><p>以上操作表示如何可以实现一个类实例化对象基于foreach结构输出，而要想把这个结构发挥的更加极致，最佳做法是结合链表程序来完成。</p><hr><p>案例：将Iterable应用在自定义链表结构中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.iterable;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//将Iterable应用在自定义链表结构中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIterable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ILink&lt;String&gt; iLink=<span class="hljs-keyword">new</span> LinkImpl&lt;&gt;();<br>        iLink.add(<span class="hljs-string">&quot;巴基斯坦&quot;</span>);<br>        iLink.add(<span class="hljs-string">&quot;埃塞俄比亚&quot;</span>);<br>        iLink.add(<span class="hljs-string">&quot;尼泊尔&quot;</span>);<br>        iLink.add(<span class="hljs-string">&quot;吉尔吉斯坦&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String temp:iLink) &#123;<span class="hljs-comment">//直接迭代</span><br>            System.out.println(temp);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ILink</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(T e)</span></span>;<span class="hljs-comment">//向链表中实现数据追加</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkImpl</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">ILink</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<span class="hljs-comment">//提供一个节点</span><br>        <span class="hljs-keyword">private</span> T data;<span class="hljs-comment">//节点数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个节点</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(T data)</span></span>&#123;<span class="hljs-comment">//创建新的节点</span><br>            <span class="hljs-keyword">this</span>.data=data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//-------------------编写链表实现类---------------</span><br><br>    <span class="hljs-keyword">private</span> Node root;<span class="hljs-comment">//根节点</span><br>    <span class="hljs-keyword">private</span> Node last;<span class="hljs-comment">//保存最后一个节点</span><br>    <span class="hljs-keyword">private</span> Node currentNode;<span class="hljs-comment">//获取数据时进行当前节点的保存</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(T e)</span> </span>&#123;<br>        Node newNode=<span class="hljs-keyword">new</span> Node(e);<span class="hljs-comment">//新元素创建一个新节点</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root=newNode;<span class="hljs-comment">//第一个节点作为根元素</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">this</span>.last.next=newNode;<span class="hljs-comment">//设置下一个的引用</span><br>        &#125;<br>        <span class="hljs-keyword">this</span>.last=newNode;<span class="hljs-comment">//保存最后一个节点</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.currentNode=<span class="hljs-keyword">this</span>.root;<span class="hljs-comment">//配置当前节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LinkIter();<span class="hljs-comment">//返回自定义迭代对象</span><br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkIter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> LinkImpl.<span class="hljs-keyword">this</span>.currentNode!=<span class="hljs-keyword">null</span>;<span class="hljs-comment">//当前节点有数据</span><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            T data=LinkImpl.<span class="hljs-keyword">this</span>.currentNode.data;<span class="hljs-comment">//获取节点数据</span><br>            LinkImpl.<span class="hljs-keyword">this</span>.currentNode=LinkImpl.<span class="hljs-keyword">this</span>.currentNode.next;<span class="hljs-comment">//修改当前节点</span><br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种处理机制是在Java数据结构里面对于数据输出的最佳支持，而之前那种数据保存在数组中的做法明显会产生严重的垃圾，同时如果链表中的内容很多，那么这个数组垃圾空间就会无限大，如果使用的是迭代器的方式完成的，则是最佳的做法。</p><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>整个Java类集框架中，根据数据存储结构的不同，分为两种类集形式：单值集合、二元偶对象集合。其中Collection就是单值集合的操作接口，二元偶对象是指“key=value”存储结构。使用二元偶对象就是通过key查找对应的value数据。</p><p>给定的两种数据集合的选择：</p><p>两种数据集合都可以实现数据的存储，但是存储数据的目的不同。Collection（List、Set）存储数据目的是为了进行输出，而Map存储数据目的一是为了输出，二是为了数据查询（根据key实现value的查询）。</p><h3 id="Map的接口简介"><a href="#Map的接口简介" class="headerlink" title="Map的接口简介"></a>Map的接口简介</h3><p>Map是二元偶对象最大的存储父接口，可以直接通过“key=value”的形式进行数据的保存，所以在数据存放时一般会存放两个数据，Map接口的常用方法如下：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public void clear()</td><td>清空Map集合</td></tr><tr><td>public boolean containsKey(Object key)</td><td>判断指定的key数据是否存在</td></tr><tr><td>public boolean containsValue(Object value)</td><td>判断指定的value数据是否存在</td></tr><tr><td><font color="red">public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</font></td><td><font color="red">将Map集合转为Set集合</font></td></tr><tr><td><font color="red">public V get(Object key)</font></td><td><font color="red">根据key获取对应的value数据</font></td></tr><tr><td>public Set<K> keySet()</K></td><td>获取全部的key，key是不能够重复的</td></tr><tr><td>public Collection<V> values()</V></td><td>获取Map集合中全部的value数据</td></tr><tr><td>public static &lt;K,V&gt; Map.Entry&lt;K,V&gt; entry(K k,V v)</td><td>创建MAp.Entry接口对象</td></tr><tr><td><font color="red">public V put(K key,V value)</font></td><td><font color="red">向集合中实现数据的存储</font></td></tr><tr><td>public V remove(Object key)</td><td>根据key删除集合中的数据</td></tr></tbody></table><p>在整个Map接口中定义方法的时候和Collection、Set都有联系，得出类继承结构图如下：</p><img src="/2021/05/10/framework/image-20210524095923036.png" alt="image-20210524095923036" style="zoom:67%;"><p>为方便Map接口的使用，提供了许多的of()方法，利用此方法可以方便的创建一个没有重复key的Map集合。</p><p>案例：观察Map集合的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.map;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//观察Map集合的创建</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMapDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//根据Map接口提供的of()方法实现Map集合的创建</span><br>        Map&lt;Integer,String&gt; map=Map.of(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;美国&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;俄罗斯&quot;</span>);<br>        System.out.println(map.getClass());<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210524100602864.png" alt="image-20210524100602864" style="zoom:67%;"><p>以上使用简化的模式创建了Map集合信息（简化集合，里面没有修改功能的定义），同时集合中信息没有任何重复。若使用of()方法定义的不可修改的Map集合出现有重复key就会报错。</p><p>Map集合中不建议过多的使用重复数据进行配置处理的，若想要正确实现Map接口的操作，可以使用其子类：HashMap、LinkedHashMap、TreeMap、Hashtable。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap是Map接口中最常用的子类。定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Serializable</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;<span class="hljs-keyword">extends</span> <span class="hljs-title">Objectimplements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210524102628023.png" alt="image-20210524102628023" style="zoom:67%;"><p>案例：通过HashMap实现数据存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.map;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//通过HashMap实现数据存储</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashMapDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;Integer,String&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//通过子类实现接口对象实例化</span><br>        map.put(<span class="hljs-number">0</span>,<span class="hljs-keyword">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;【未发生替换】&quot;</span>+map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;baidu&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;【已发生替换】&quot;</span>+map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;sina&quot;</span>));<span class="hljs-comment">//key重复</span><br>        System.out.println(<span class="hljs-string">&quot;【未发生替换】&quot;</span>+map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;tiktok&quot;</span>));<span class="hljs-comment">//新的key</span><br>        map.put(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;白嫖&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为：</p><blockquote><p>【未发生替换】null（由于“1”这个key不存在，所以不存在有替换问题，替换前的内容为null）<br>【已发生替换】baidu（由于key存在，所以要发生替换，替换后返回替换前的内容）<br>【未发生替换】null（key不存在所以不会返回替换前的数据）<br>{0=null, null=白嫖, 1=sina, 2=tiktok}（数据存储）</p></blockquote><p>以上Map集合设置了具体的数据信息，观察到了put()方法返回值得作用，但是对于HashMap子类来讲有一个重要的特点：在HashMap子类中出现的key或者value都是允许为null的。</p><p>通过HashMap子类实现数据存储时里面保存的数据都是无序的状态。所以只要与Hash有关的程序类都属于无序存储数据。使用Map存数据主要是根据key实现数据查找。</p><p>案例：通过key实现数据查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.map;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//通过key实现数据查找</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashMapDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;Integer,String&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;鸿星尔克&quot;</span>);<br>        map.put(<span class="hljs-number">41</span>,<span class="hljs-string">&quot;安踏&quot;</span>);<br>        map.put(<span class="hljs-number">22</span>,<span class="hljs-string">&quot;德尔惠&quot;</span>);<br>        map.put(<span class="hljs-number">36</span>,<span class="hljs-string">&quot;美特斯邦威&quot;</span>);<br>        map.put(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;null&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【key不存在】&quot;</span>+map.get(<span class="hljs-number">9</span>));<br>        System.out.println(<span class="hljs-string">&quot;【key存在】&quot;</span>+map.get(<span class="hljs-number">22</span>));<br>        System.out.println(<span class="hljs-string">&quot;【null-key查询】&quot;</span>+map.get(<span class="hljs-keyword">null</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210524105532557.png" alt="image-20210524105532557" style="zoom:67%;"><p>HashMap子类的工作原理的实现机制分析：</p><ol><li>观察HashMap子类中提供的构造方法定义：</li></ol><p>无参构造：创建默认的Map集合，初始化容量为16个元素，每次扩充的阈值为75%。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>单参构造：由用户设置初始化Map集合的容量，每次扩充的阈值使用默认的75%。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span></span><br></code></pre></td></tr></table></figure><p>双参构造：由用户设置初始化Map集合的容量，并且设置扩充的阈值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity,<span class="hljs-keyword">float</span> loadFactor)</span></span><br></code></pre></td></tr></table></figure><hr><p>观察这三个构造方法具体定义：</p><p>无参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16 默认容量为16</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<span class="hljs-comment">//默认的扩容阈值</span><br></code></pre></td></tr></table></figure><p>若使用默认的构造创建了HashMap，则达到75%存储个数（16*0.75=12）就要扩容。</p><hr><p>单参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>双参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//判断当前的容量小于0，则抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                               initialCapacity);<br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<span class="hljs-comment">//设置的容量是否超过最大值</span><br>            initialCapacity = MAXIMUM_CAPACITY;<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<span class="hljs-comment">//扩容阈值的配置</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                               loadFactor);<br>        <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>        <span class="hljs-keyword">this</span>.threshold = tableSizeFor(initialCapacity);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<span class="hljs-comment">//最大初始化容量：1073741824</span><br></code></pre></td></tr></table></figure><hr><ol start="2"><li>在HashMap子类里面如果想进行数据查询则一定要进行数据保存，而数据保存需要通过put()方法完成。</li></ol><p>分析put()方法对应源代码以及相关操作方法：</p><p>put()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key,V value)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key),key,value,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>hash()方法：通过key对应的数据进行一个Hash码的控制，所以Map集合中的key需要使用到hashCode()支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">return</span> (key==<span class="hljs-keyword">null</span>)?<span class="hljs-number">0</span>:(h=key.hashCode())^(h&gt;&gt;&gt;<span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>putVal()方法：需要考虑到普通节点与排序节点之间的处理关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br>        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;<span class="hljs-comment">//数据在节点封装</span><br>        <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            n = (tab = resize()).length;<span class="hljs-comment">//resize()是实现扩容操作的</span><br>        <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>            tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;K,V&gt; e; K k;<br>            <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>                ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                e = p;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<span class="hljs-comment">//排序有关的节点</span><br>                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>                        p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>                        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                            treeifyBin(tab, hash);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                        <span class="hljs-keyword">break</span>;<br>                    p = e;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>                V oldValue = e.value;<br>                <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                    e.value = value;<br>                afterNodeAccess(e);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        ++modCount;<span class="hljs-comment">//防止多线程程序并发处理时的线程安全保障</span><br>        <span class="hljs-keyword">if</span> (++size &gt; threshold)<span class="hljs-comment">//如果现在元素的个数超过了初始化的大小</span><br>            resize();<span class="hljs-comment">//扩容处理</span><br>        afterNodeInsertion(evict);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>resize()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>       Node&lt;K,V&gt;[] oldTab = table;<br>       <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>       <span class="hljs-keyword">int</span> oldThr = threshold;<br>       <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断已有的容量是否大于0</span><br>           <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="hljs-comment">//如果大于最大的容量</span><br>               threshold = Integer.MAX_VALUE;<span class="hljs-comment">//设置为整型最大值</span><br>               <span class="hljs-keyword">return</span> oldTab;<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>               newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold，扩容一倍</span><br>       &#125;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>           newCap = oldThr;<br>       <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>           newCap = DEFAULT_INITIAL_CAPACITY;<br>           newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>       &#125;<br>       <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                     (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>       &#125;<br>       threshold = newThr;<br>       <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>       Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>       table = newTab;<br>       <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>               Node&lt;K,V&gt; e;<br>               <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;<br>                   oldTab[j] = <span class="hljs-keyword">null</span>;<br>                   <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                       newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                       ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                   <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                       Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                       Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                       Node&lt;K,V&gt; next;<br>                       <span class="hljs-keyword">do</span> &#123;<br>                           next = e.next;<br>                           <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                               <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                   loHead = e;<br>                               <span class="hljs-keyword">else</span><br>                                   loTail.next = e;<br>                               loTail = e;<br>                           &#125;<br>                           <span class="hljs-keyword">else</span> &#123;<br>                               <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                   hiHead = e;<br>                               <span class="hljs-keyword">else</span><br>                                   hiTail.next = e;<br>                               hiTail = e;<br>                           &#125;<br>                       &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                       <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                           loTail.next = <span class="hljs-keyword">null</span>;<br>                           newTab[j] = loHead;<br>                       &#125;<br>                       <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                           hiTail.next = <span class="hljs-keyword">null</span>;<br>                           newTab[j + oldCap] = hiHead;<br>                       &#125;<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> newTab;<br>   &#125;<br></code></pre></td></tr></table></figure><p>结论：每当HashMap中的存储容量达到了阈值范围，那么将自动实现扩容一倍的处理操作，所有的操作为了保证性能都是直接通过移位的形式来处理的。</p><hr><ol start="3"><li>性能保障：链表在进行数据查询的时候其时间复杂度为O(n)，二叉树结构的时间复杂度为O(log)</li></ol><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><h3 id="Map-Entry"><a href="#Map-Entry" class="headerlink" title="Map.Entry"></a>Map.Entry</h3><h3 id="Iterator迭代输出-1"><a href="#Iterator迭代输出-1" class="headerlink" title="Iterator迭代输出"></a>Iterator迭代输出</h3><h3 id="自定义Map集合KEY"><a href="#自定义Map集合KEY" class="headerlink" title="自定义Map集合KEY"></a>自定义Map集合KEY</h3><h2 id="Stack栈"><a href="#Stack栈" class="headerlink" title="Stack栈"></a>Stack栈</h2><p>Stack栈是一种先进后出(FILO)的数据结构。其类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Vector</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public E push(E item)</td><td>向栈中保存数据</td></tr><tr><td>public E pop()</td><td>从栈顶弹出数据</td></tr><tr><td>public boolean empty()</td><td>判断是否为空栈</td></tr></tbody></table><p>栈的数据结构存在：空栈（无数据），满栈（栈溢出），栈中有数据才可以弹出，弹出时顺道删除数据。</p><p>案例：实现栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stack;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-comment">//实现栈的操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStackDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Stack&lt;String&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<span class="hljs-comment">//定义栈</span><br>        System.out.println(<span class="hljs-string">&quot;【是否为空栈】：&quot;</span>+stack.empty());<br>        stack.push(<span class="hljs-string">&quot;第1位进栈：汉武帝刘彻&quot;</span>);<br>        stack.push(<span class="hljs-string">&quot;第2位进栈：唐太宗李世民&quot;</span>);<br>        stack.push(<span class="hljs-string">&quot;第3位进栈：宋太祖赵匡胤&quot;</span>);<br>        <span class="hljs-keyword">while</span>(!stack.empty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;【开始出栈】——&gt;&quot;</span>+stack.pop());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：使用栈实现字符串反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stack;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-comment">//利用栈操作实现字符串反转</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStackDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str=<span class="hljs-string">&quot;baidu&quot;</span>;<br>        <span class="hljs-keyword">char</span>[] data=str.toCharArray();<br>        Stack&lt;Character&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            stack.push(data[i]);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!stack.empty())&#123;<br>            System.out.print(stack.pop());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意：如果栈内无数据了时执行弹出方法，就会报空栈异常。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>Queue队列是一种先进先出(FIFO)的数据结构。此接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>会抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr><td>Insert添加</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>Remove移除</td><td>remove()</td><td>poll()</td></tr><tr><td>Examine检查</td><td>element()</td><td>peek()</td></tr></tbody></table><p>Queue属于接口，需要子类LinkedList提供接口的实现。</p><p>队列操作过程中有两组操作方法：队列数据的保存、队列数据的取出，常用方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public boolean add(E e)</td><td>【Exception】向队列中保存数据，有错误时抛出异常</td></tr><tr><td>public boolean offer(E e)</td><td>实现数据保存，成功返回true，否则返回false</td></tr><tr><td>public E remove()</td><td>【Exception】从队列头部获取数据并删除原始内容，空队列抛出异常</td></tr><tr><td>public E poll()</td><td>从队列获取数据，如果为空队列则返回null</td></tr></tbody></table><p>案例：实现队列基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.queue;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">//实现队列的基本操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQueueDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Queue&lt;String&gt; queue=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<span class="hljs-comment">//为队列的接口对象实例化</span><br>        System.out.println(<span class="hljs-string">&quot;【向队列增加数据】&quot;</span>+queue.offer(<span class="hljs-string">&quot;1刘玄德&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;【向队列增加数据】&quot;</span>+queue.offer(<span class="hljs-string">&quot;2关云长&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;【向队列增加数据】&quot;</span>+queue.offer(<span class="hljs-string">&quot;3张翼德&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;【向队列增加数据】&quot;</span>+queue.offer(<span class="hljs-string">&quot;4赵子龙&quot;</span>));<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;【通过队列获取数据】&quot;</span>+queue.poll());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传统的队列采用先进先出单向处理模式，但是队列的数据结构在项目中可以实现有效的数据缓存控制，所以产生了双端队列，其首位都可以实现数据的保存和读取。</p><p><img src="/2021/05/10/framework/image-20210526095459048.png" alt="image-20210526095459048" style="zoom:67%;"><img src="/2021/05/10/framework/image-20210526095525823-1622448523841.png" alt="image-20210526095525823"></p><p>实现双端队列的处理需要通过Deque接口提供的方法，</p><table><thead><tr><th></th><th>Throws Exception</th><th>Special value</th><th>Throws Exception</th><th>Special value</th></tr></thead><tbody><tr><td>Insert</td><td>addFirst(e)</td><td>offerFirst(e)</td><td>addLast(e)</td><td>offerLast(e)</td></tr><tr><td>Remove</td><td>removeFirst()</td><td>pollFirst()</td><td>removeLast()</td><td>pollLast()</td></tr><tr><td>Examine</td><td>getFirst()</td><td>peekFirst()</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p>案例：使用双端队列实现数据保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.queue;<br><br><span class="hljs-keyword">import</span> com.sun.security.jgss.GSSUtil;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">//使用双端队列实现数据保存</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQueueDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Deque&lt;String&gt; deque=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        deque.addFirst(<span class="hljs-string">&quot;这是第一个&quot;</span>);<br>        deque.addLast(<span class="hljs-string">&quot;反向：这是第一个&quot;</span>);<br>        System.out.println(deque.pollFirst());<br>        System.out.println(deque.pollLast());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Properties属性操作"><a href="#Properties属性操作" class="headerlink" title="Properties属性操作"></a>Properties属性操作</h2><p>Java中存在.properties资源文件（属性文件），而现在给出的Properties类主要功能就可以方便的实现这些资源文件的处理操作。其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Hashtable</span>&lt;<span class="hljs-title">Object</span>,<span class="hljs-title">Object</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>Properties在继承Hashtable类的时候所设置的泛型类型依然为Object，因为Properties实现的是属性控制，而属性控制的类型主要为字符串。</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public Properties()</td><td>构建Properties类对象实例</td></tr><tr><td>public Object setProperty(String key,String value)</td><td>设置属性内容</td></tr><tr><td>public String getProperty(String key)</td><td>根据key获取属性，如果属性不存在返回null</td></tr><tr><td>public String getProperty(String key,String defaultValue)</td><td>根据key获取属性，属性不存在返回默认值</td></tr><tr><td>public void store(OutputStream out,String comments) throws IOException</td><td>将属性内容通过输出流输出</td></tr><tr><td>public void store(Writer writer,String comments) throws IOException</td><td>将属性内容通过输出流输出</td></tr><tr><td>public void load(InputStream inStream) throws IOException</td><td>通过字节输入流读取全部属性内容</td></tr><tr><td>public void load(Reader reader) throws IOException</td><td>通过字符输入流读取全部属性内容</td></tr></tbody></table><p>案例：实现属性的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.properties;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">//实现属性的基本操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPropertiesDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//如果此时实例化Properties属性的时候没有设置初始化大小，则容量为8</span><br>        Properties properties=<span class="hljs-keyword">new</span> Properties();<span class="hljs-comment">//创建一个属性操作类</span><br>        properties.setProperty(<span class="hljs-string">&quot;武帝&quot;</span>,<span class="hljs-string">&quot;刘彻&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;高祖&quot;</span>,<span class="hljs-string">&quot;刘邦&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;献帝&quot;</span>,<span class="hljs-string">&quot;刘协&quot;</span>);<br>        System.out.println(properties);<br>        System.out.println(<span class="hljs-string">&quot;【获取属性key存在】&quot;</span>+properties.getProperty(<span class="hljs-string">&quot;献帝&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;【获取属性不key存在】&quot;</span>+properties.getProperty(<span class="hljs-string">&quot;光武帝&quot;</span>,<span class="hljs-string">&quot;汉朝皇帝&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过IO流进行输出输入。</p><p>案例：将属性的内容保存在资源文件之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">properties.store(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:/&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;king.properties&quot;</span>)),<span class="hljs-string">&quot;KingInfo&quot;</span>);<br></code></pre></td></tr></table></figure><p>案例：通过文件读取属性内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:/&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;king.properties&quot;</span>)));<br>        System.out.println(<span class="hljs-string">&quot;【获取属性前提】&quot;</span>+properties.getProperty(<span class="hljs-string">&quot;献帝&quot;</span>));<br></code></pre></td></tr></table></figure><p>Properties类既可实现属性文件的存储，也可以实现属性资源文件的读取。资源文件读取有两种方式：通过Properties类完成读取，另一种是通过ResourceBundle类读取的（可以方便的读取CLASSPATH下的资源文件，按照包的形式进行读取控制）。</p><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p>Collections是为集合操作提供的一个辅助的工具类，这个类中有很多可以实现各种集合的处理操作的方法。</p><p>案例：集合的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.collections;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//Collections工具类，集合的基本操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCollections</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-string">&quot;Java入门&quot;</span>,<span class="hljs-string">&quot;Vue入门到精通&quot;</span>,<span class="hljs-string">&quot;Golang语言的进阶&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【原始集合】&quot;</span>+list);<br>        Collections.reverse(list);<span class="hljs-comment">//集合反转</span><br>        System.out.println(<span class="hljs-string">&quot;【集合反转】&quot;</span>+list);<br>        Collections.sort(list);<span class="hljs-comment">//集合排序</span><br>        System.out.println(<span class="hljs-string">&quot;【集合反转】&quot;</span>+list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/10/framework/image-20210526214711685.png" alt="image-20210526214711685" style="zoom:67%;"><p>以上额处理操作对于反转和排序的功能原始的List集合里面是不包含的，但是可以通过第三方工具类来完成。</p><p>案例：枚举输出</p><p>正常情况下只有Vector类可以实现枚举输出，但是使用Collections工具类后，任何的Collections接口子类都可以通过Enumeration实现输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.collections;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//枚举输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCollectionsDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-string">&quot;太平洋&quot;</span>,<span class="hljs-string">&quot;大西洋&quot;</span>,<span class="hljs-string">&quot;印度洋&quot;</span>,<span class="hljs-string">&quot;北冰洋&quot;</span>);<br>        Enumeration&lt;String&gt; enu=Collections.enumeration(list);<br>        <span class="hljs-keyword">while</span>(enu.hasMoreElements())&#123;<br>            System.out.println(enu.nextElement());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>Stream接口目的是通过函数式编程的结构实现集合数据的分析，Collection接口中也追加了相关的操作方法。</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public default Stream<E> stream()</E></td><td>获取一个Stream接口对象实例</td></tr><tr><td>public default Stream<E> parallelStream()</E></td><td>获取多线程的Stream接口对象实例，并行处理数据</td></tr></tbody></table><p>案例：实现Stream基础操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStreamDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//需要分析的数据存储</span><br>        <span class="hljs-comment">//假设现在在集合中要存储的数据有成千上万个</span><br>        Collections.addAll(list,<span class="hljs-string">&quot;程序设计基础&quot;</span>,<span class="hljs-string">&quot;JAVA&quot;</span>,<span class="hljs-string">&quot;JAVAWeb&quot;</span>,<span class="hljs-string">&quot;计算机网络原理&quot;</span>,<span class="hljs-string">&quot;数据库基本原理&quot;</span>,<span class="hljs-string">&quot;C++面向对象&quot;</span>);<br>        Stream&lt;String&gt; stream=list.stream();<span class="hljs-comment">//获取stream对象</span><br>        <span class="hljs-comment">//filter()：对给定的数据执行过滤，本次是查询是否包含有单词“JAVA”</span><br>        <span class="hljs-comment">//将所有满足过滤条件的数据收集成一个新的List集合</span><br>        List result=stream.filter((ele)-&gt;ele.toLowerCase().contains(<span class="hljs-string">&quot;java&quot;</span>)).collect(Collectors.toList());<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>[JAVA, JAVAWeb]</p></blockquote><p>若此时的操作没有采用上面的函数式编程来完成，则这样的操作代码需要手工获取Iterator迭代对象，随后编写if语句，同时还需定义一个新的List集合进行数据的存储，而使用函数式编程一行语句解决所有问题。</p><p>Stream在进行数据处理时还可以实现数据的部分操作。</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public Stream<T> limit(long maxSize)</T></td><td>设置获取的最大数据量</td></tr><tr><td>public Stream<T> skip(long n)</T></td><td>跳过多少行的数据量</td></tr></tbody></table><p>案例：实现部分内容的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">//实现部分内容的处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStreamDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//需要分析的数据存储</span><br>        <span class="hljs-comment">//假设现在在集合中要存储的数据有成千上万个</span><br>        Collections.addAll(list,<span class="hljs-string">&quot;程序设计基础&quot;</span>,<span class="hljs-string">&quot;JAVA&quot;</span>,<span class="hljs-string">&quot;JAVAWeb&quot;</span>,<span class="hljs-string">&quot;计算机网络原理&quot;</span>,<span class="hljs-string">&quot;数据库基本原理&quot;</span>,<span class="hljs-string">&quot;C++面向对象&quot;</span>,<span class="hljs-string">&quot;C#从入门到实战&quot;</span>);<br>        Stream&lt;String&gt; stream=list.stream();<span class="hljs-comment">//获取stream对象</span><br>        <span class="hljs-comment">//filter()：对给定的数据执行过滤，本次是查询是否包含有单词“JAVA”</span><br>        <span class="hljs-comment">//将所有满足过滤条件的数据收集成一个新的List集合</span><br>        <span class="hljs-comment">//从list数组中跨过2个数据，取5个数据，只取带有j和c的数据</span><br>        List result=stream.skip(<span class="hljs-number">2</span>).limit(<span class="hljs-number">5</span>).filter((ele)-&gt;ele.toLowerCase().matches(<span class="hljs-string">&quot;(.*j.*)|(.*c.*)&quot;</span>)).collect(Collectors.toList());<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><blockquote><p>[JAVAWeb, C++面向对象, C#从入门到实战]</p></blockquote><p>通过“skip(2).limit(4)”这两个方法组合就可以避免全部的数据参与到运算过程之中。之所以强调有Stream主要的原因在于，使用Stream的时候可以直接在Java中实现MapReduce数据分析模型。</p><p>案例：数据分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.DoubleSummaryStatistics;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">//数据分析</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStreamDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Order&gt; orders=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        orders.add(<span class="hljs-keyword">new</span> Order(<span class="hljs-string">&quot;无籽西瓜PLUS&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">300</span>));<br>        orders.add(<span class="hljs-keyword">new</span> Order(<span class="hljs-string">&quot;火龙果&quot;</span>,<span class="hljs-number">24</span>,<span class="hljs-number">150</span>));<br>        orders.add(<span class="hljs-keyword">new</span> Order(<span class="hljs-string">&quot;大香蕉plus&quot;</span>,<span class="hljs-number">16</span>,<span class="hljs-number">200</span>));<br>        Stream&lt;Order&gt; stream=orders.stream();<br>        DoubleSummaryStatistics plus = stream.filter((ele) -&gt; ele.getName().toLowerCase().contains(<span class="hljs-string">&quot;plus&quot;</span>)).mapToDouble((orderObject) -&gt; orderObject.getPrice() * orderObject.getAmount()).summaryStatistics();<br>        System.out.println(<span class="hljs-string">&quot;【订单总量】&quot;</span>+plus.getCount());<br>        System.out.println(<span class="hljs-string">&quot;【订单总费用】&quot;</span>+plus.getSum());<br>        System.out.println(<span class="hljs-string">&quot;【商品平均价格】&quot;</span>+plus.getAverage());<br>        System.out.println(<span class="hljs-string">&quot;【商品最高价格】&quot;</span>+plus.getMax());<br>        System.out.println(<span class="hljs-string">&quot;【商品最低价格】&quot;</span>+plus.getMin());<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span></span>&#123;<span class="hljs-comment">//描述订单</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//商品名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<span class="hljs-comment">//商品单价</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> amount;<span class="hljs-comment">//数量</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">(String name, <span class="hljs-keyword">double</span> price, <span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>        <span class="hljs-keyword">this</span>.amount = amount;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAmount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> amount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MapReduce是谷歌提出的数据分析模型，在Map阶段对要分析的数据进行处理，而在Reduce阶段实现数据的统计，在JDK1.8后使用Stream就可以通过函数式编程的模型迅速实现数据分析的处理操作。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA进阶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA IO</title>
    <link href="/2021/05/02/Javaio/"/>
    <url>/2021/05/02/Javaio/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h1><h2 id="操作文件的类-File"><a href="#操作文件的类-File" class="headerlink" title="操作文件的类-File"></a>操作文件的类-File</h2><h3 id="File类基本使用"><a href="#File类基本使用" class="headerlink" title="File类基本使用"></a>File类基本使用</h3><p>使用File类可以进行创建或删除文件等常用操作。</p><p>File类实现了Comparable接口，其对象可以通过Arrays.sort()的方式来实现大小的关系匹配。</p><p>如果想进行具体的文件或目录操作，必须清除相应的路径的配置，可使用如下的方法实现基本的处理。</p><table><thead><tr><th align="center">no</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">01</td><td align="center"><font color="red">public File(String pathname)</font></td><td align="center"><font color="red">普通</font></td><td align="center"><font color="red">设置一个要操作文件的完整路径</font></td></tr><tr><td align="center">02</td><td align="center"><font color="red">public File(File parent,String child)</font></td><td align="center"><font color="red">普通</font></td><td align="center"><font color="red">设置有文件的父目录和子文件路径</font></td></tr><tr><td align="center">03</td><td align="center">public boolean createNewFile() throws IOException</td><td align="center">普通</td><td align="center">创建一个新的文件</td></tr><tr><td align="center">04</td><td align="center"><font color="red">public boolean delete()</font></td><td align="center"><font color="red">普通</font></td><td align="center"><font color="red">文件删除操作</font></td></tr><tr><td align="center">05</td><td align="center"><font color="red">public boolean exists()</font></td><td align="center"><font color="red">普通</font></td><td align="center"><font color="red">判断文件是否存在</font></td></tr></tbody></table><p>上述操作可以直接实现文件的创建、删除以及路径、是否存在的判断。</p><p><strong>案例1：</strong></p><p>获取File类的实例化，对象如果此时给定的文件路径存在，那么就进行文件的删除，如果文件不存在，则执行文件的创建。</p><p>注意：不同的操作系统，路径的分隔符的表示是不同的。如：</p><p>Windows分隔符：\            Linux分隔符：/</p><p>最好就是使用File中提供的常量（File.separator）来代替分隔符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//separator常量代替路径分隔符</span><br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;file.txt&quot;</span>);<span class="hljs-comment">//定义文件要操作的路径</span><br>        <span class="hljs-comment">//System.out.println(file);//获取文件信息</span><br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<span class="hljs-comment">//文件路径存在</span><br>            System.out.println(<span class="hljs-string">&quot;【文件存在】执行删除操作：&quot;</span>+file.delete());<span class="hljs-comment">//删除给定的文件</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;【文件不存在】执行创建操作：&quot;</span>+file.createNewFile());<span class="hljs-comment">//创建文件</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要处理文件就要保证文件路径编写正确（文件可以不存在），但是如果要进行具体操作：如删除文件就必须保证文件存在。</p><h3 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h3><p>很多应用程序为了方便管理程序往往需要创建有若干个目录，这时可以通过File类实现对目录的控制。</p><p>若打开不存在的文件路径就会出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;file.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2021/05/02/Javaio/image-20210517142032857.png" alt="image-20210517142032857"></p><p>由于给定的文件目录不存在，所以对于所有的文件的控制就将出现异常信息，那么这是就必须对文件的目录进行创建的相关维护，所以用如下方法可以进行目录的控制。</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public boolean mkdir()</td><td>创建单级目录</td></tr><tr><td><font color="red">public boolean mkdirs()</font></td><td><font color="red">创建多级目录（更实用）</font></td></tr><tr><td>public String getParent()</td><td>获取父路径</td></tr><tr><td><font color="red">public File getParentFile()</font></td><td><font color="red">获取父路径对应的文件对象</font></td></tr></tbody></table><p>案例：</p><p>实现父路径的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(!file.getParentFile().exists())&#123;<span class="hljs-comment">//父路径不存在</span><br>            file.getParentFile().mkdirs();<span class="hljs-comment">//创建父路径</span><br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/02/Javaio/image-20210517143148677.png" alt="image-20210517143148677"></p><p>当前程序实现了目录下的文件创建，但是出现性能损耗问题：</p><img src="/2021/05/02/Javaio/image-20210517143808350.png" alt="image-20210517143808350" style="zoom: 80%;"><p>所以当前代码从性能考虑，最佳做法是通过静态代码块（整个程序运行过程中只对操作目录进行一次的判断与创建）的形式完成。</p><p>范例：通过静态代码块实现目录的创建（线程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo01</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> File parentFile=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator);<br>    <span class="hljs-keyword">static</span>&#123;<span class="hljs-comment">//静态代码块优先于主方法执行</span><br>        <span class="hljs-keyword">if</span>(!parentFile.getParentFile().exists())&#123;<span class="hljs-comment">//父路径不存在</span><br>            parentFile.getParentFile().mkdirs();<span class="hljs-comment">//创建父目录</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-comment">//separator常量代替路径分隔符</span><br>                File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+Thread.currentThread().getName());<span class="hljs-comment">//定义文件要操作的路径</span><br>                <span class="hljs-keyword">if</span>(file.exists())&#123;<span class="hljs-comment">//文件路径存在</span><br>                    System.out.println(<span class="hljs-string">&quot;【文件存在】执行删除操作：&quot;</span>+file.delete());<span class="hljs-comment">//删除给定的文件</span><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;【文件不存在】执行创建操作：&quot;</span>+file.createNewFile());<span class="hljs-comment">//创建文件</span><br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;,<span class="hljs-string">&quot;file-zhao&quot;</span>+i).start();<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(&quot;【文件路径】&quot;+file);//获取文件信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所谓性能优化就是对语言的深刻认知，找到最适合的方式完成功能。</p><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><p>如果在操作系统中使用一些目录列表命令的时候（dir\II）一般都可以获取文件的详细内容，这时候在File类中也可以获取这些信息，方法如下：</p><table><thead><tr><th align="left">方法名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">public boolean canExecute()</td><td align="left">判断当前的路径是否拥有可执行的权限</td></tr><tr><td align="left">public boolean canRead()</td><td align="left">判断当前的路径是否拥有可读的权限</td></tr><tr><td align="left">public boolean canWrite()</td><td align="left">判断当前路径是否拥有可写的权限</td></tr><tr><td align="left">public File getAbsoluteFile()</td><td align="left">获取文件绝对路径实例</td></tr><tr><td align="left">public String getAbsolutePath()</td><td align="left">获取文件绝对路径字符串</td></tr><tr><td align="left">public String getName()</td><td align="left">获取路径的名称</td></tr><tr><td align="left">public boolean isAbsolute()</td><td align="left">是否为绝对路径</td></tr><tr><td align="left"><font color="red">public boolean isDirectory()</font></td><td align="left"><font color="red">是否为目录</font></td></tr><tr><td align="left"><font color="red">public boolean isFile()</font></td><td align="left"><font color="red">是否为文件</font></td></tr><tr><td align="left">public boolean isHidden()</td><td align="left">是否为隐藏文件或目录</td></tr><tr><td align="left">public <strong>long</strong> lastModified()</td><td align="left">获取最后一次修改日期</td></tr><tr><td align="left">public <strong>long</strong> length()</td><td align="left">获取文件的长度（字节单位）</td></tr></tbody></table><p>在Java程序里面所有描述文件大小，内存大小，日期时间的数据内容全部都以long数据类型的数据为主。</p><p>案例：获取文件的相关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.png&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<span class="hljs-comment">//获取信息前提是文件存在</span><br>            System.out.printf(<span class="hljs-string">&quot;【文件大小】字节：%s、KB：%5.2f\n&quot;</span>,file.length(),((<span class="hljs-keyword">double</span>)file.length()/<span class="hljs-number">1024</span>));<br>            SimpleDateFormat simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;【最后修改日期】：&quot;</span>+simpleDateFormat.format(file.lastModified()));<br>            System.out.printf(<span class="hljs-string">&quot;【文件权限】可读：%s、可写：%s、可执行：%s\n&quot;</span>,file.canRead(),file.canWrite(),file.canExecute());<br>            System.out.printf(<span class="hljs-string">&quot;【文件绝对路径】%s\n&quot;</span>,file.getAbsoluteFile());<br>            System.out.printf(<span class="hljs-string">&quot;【文件目录】%s\n&quot;</span>,file.getParent());<br>            System.out.printf(<span class="hljs-string">&quot;【文件名称】%s\n&quot;</span>,file.getName());<br>            System.out.printf(<span class="hljs-string">&quot;【路径类型】文件夹：%s、文件：%s\n&quot;</span>,file.isDirectory(),file.isFile());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210517201853138.png" alt="image-20210517201853138" style="zoom:67%;"><p>在程序中不管是文件还是目录所有的路径都是统一设置到File类中的，这样就要求在File类里面可以判断路径的类型。</p><h3 id="获取目录信息"><a href="#获取目录信息" class="headerlink" title="获取目录信息"></a>获取目录信息</h3><p>由于在定义File类对象的时候可以直接将目录的路径设置到File类的对象实例之中，那么就可以通过File类实现指定目录之中的全部子路径的列出，可以使用如下两个方法完成。</p><table><thead><tr><th align="left">方法名</th><th>描述</th></tr></thead><tbody><tr><td align="left">public String [] list()</td><td>列出所有的子路径名称</td></tr><tr><td align="left">public File[] listFiles()</td><td>列出所有子路径的File对象数组</td></tr><tr><td align="left">public File[] listFiles(FileFilter filter)</td><td>列出目录组成的时候设置一个判断的过滤器</td></tr></tbody></table><p>范例：观察目录列表操作</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.zhao.<span class="hljs-keyword">file</span>;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//获取目录的相关信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TestFileDemo03 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;e:&quot;</span>+<span class="hljs-keyword">File</span>.separator+<span class="hljs-string">&quot;com&quot;</span>+<span class="hljs-keyword">File</span>.separator);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">file</span>.exists()&amp;&amp;<span class="hljs-keyword">file</span>.isDirectory())&#123;<span class="hljs-comment">//如果路径存在且是一个目录</span><br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;【list()方法执行结果】&quot;</span>+ Arrays.toString(<span class="hljs-keyword">file</span>.list()));<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;【listFiles()方法执行结果】&quot;</span>+Arrays.toString(<span class="hljs-keyword">file</span>.listFiles()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/02/Javaio/image-20210517205333256.png" alt="image-20210517205333256"></p><p>如果使用的是list()方法实际上现在所列出的内容仅仅是子路径下的名称而已，而对于listFiles()方法在进行列出的时候是可以将子路径转为对应的File类对象实例。</p><p>面试题：请问要求列出一个指定目录下的全部“txt”文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">//列出一个指定目录下的全部”txt“文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator);<br>        info(file);<span class="hljs-comment">//设置要列表的目录路径</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(File file)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(file.isDirectory())&#123;<br>            File list[]=file.listFiles((f)-&gt;f.isDirectory()?<span class="hljs-keyword">true</span>:f.getName().endsWith(<span class="hljs-string">&quot;.txt&quot;</span>));<span class="hljs-comment">//列出目录中的全部组成</span><br>            <span class="hljs-keyword">if</span>(list!=<span class="hljs-keyword">null</span>)&#123;<span class="hljs-comment">//存在文件列表，避免有不可打开的文件影响结果</span><br>                <span class="hljs-keyword">for</span> (File temp : list) &#123;<br>                    info(temp);<span class="hljs-comment">//递归，继续列出</span><br>                    &#125;<br>                &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(file);<span class="hljs-comment">//输出文件信息</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210517211241372.png" alt="image-20210517211241372" style="zoom:67%;atr"><p>如果要想实现目录中的全部子文件信息的列出，那么这个时候就考虑目录下还有子目录的处理问题，所以此时最佳的方案就是判断给定的路径是否为目录，如果为目录则继续进行目录的列出，所以通过递归的形式完成处理。</p><h3 id="文件更名"><a href="#文件更名" class="headerlink" title="文件更名"></a>文件更名</h3><p>在操作系统里面任何文件都是可以实现名称修改的，所以针对于这种名称修改的操作就可以通过File类中的方法完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renameTo</span><span class="hljs-params">(File dest)</span><span class="hljs-comment">//文件更名操作</span></span><br></code></pre></td></tr></table></figure><p>范例：实现文件更名操作（包括文件移位）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">//实现文件更名操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo05</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        File oldFile=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.png&quot;</span>);<span class="hljs-comment">//原始文件</span><br>        File newFile=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;f:&quot;</span>+File.separator+<span class="hljs-string">&quot;csy.png&quot;</span>);<span class="hljs-comment">//新文件</span><br>        <span class="hljs-comment">//System.out.println(&quot;【文件更名操作】&quot;+oldFile.renameTo(newFile));</span><br>        System.out.println(<span class="hljs-string">&quot;【文件更名操作】&quot;</span>+newFile.renameTo(oldFile));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210517212936659.png" alt="javaio/image-20210517212936659"><p>通过实验可以发现renameTo()方法除了拥有更名的功能之外还可以实现文件的磁盘移动，是进行磁盘文件管理中不可或缺的重要技术组成。</p><p>面试题：现在有一个数据的采集目录，在目录中的所有的日志文件定义的结构为“plmm-日期码-编号.log”命名的，以这种操作方式实现一堆文件的生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 面试题：现在有一个数据的采集目录，在目录中的所有的日</span><br><span class="hljs-comment">* 志文件定义的结构为“plmm-编号.log”命名的，以这种操</span><br><span class="hljs-comment">* 作方式实现一堆文件的生成。</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo06</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> File dir=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator);<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">if</span>(!dir.exists())&#123;<span class="hljs-comment">//判断目录是否存在</span><br>            dir.mkdirs();<span class="hljs-comment">//创建目录</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SimpleDateFormat simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">140</span>; i++) &#123;<br>            File file=<span class="hljs-keyword">new</span> File(dir,<span class="hljs-string">&quot;plmm-&quot;</span>+simpleDateFormat.format(<span class="hljs-keyword">new</span> Date())+<span class="hljs-string">&quot;-&quot;</span>+i+<span class="hljs-string">&quot;.log&quot;</span>);<br>            file.createNewFile();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进阶：将e盘中com\zhao文件夹中的所有plmm-20210517-118.log文件统一长度为最大序号的长度，序号太小前面补零。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">//将位于e:\com文件下所有txt文件名称改成统一长度</span><br><br><span class="hljs-comment">//编写一个专属的命名工具类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DirRenameUtil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> File dir;<span class="hljs-comment">//需要明确的知道当前操作的目录地址</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sequenceLength;<span class="hljs-comment">//保存整体的文件编号的最大长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> fileCount;<span class="hljs-comment">//文件个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DirRenameUtil</span><span class="hljs-params">(File dir)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.dir=dir;<br>        <span class="hljs-keyword">this</span>.calcFileCount(dir);<span class="hljs-comment">//统计文件个数</span><br>        <span class="hljs-keyword">this</span>.sequenceLength=String.valueOf(<span class="hljs-keyword">this</span>.fileCount).length();<span class="hljs-comment">//获取文件序列的最大长度</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rename</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.renameHandle(<span class="hljs-keyword">this</span>.dir);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">renameHandle</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            File list[] = file.listFiles();<span class="hljs-comment">//列出全部的子路径</span><br>                <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (File sub : list) &#123;<br>                        <span class="hljs-keyword">this</span>.renameHandle(sub);<span class="hljs-comment">//继续列出</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (file.isFile()) &#123;<span class="hljs-comment">//当前的路径是文件</span><br>                    String seq = file.getName().substring(file.getName().lastIndexOf(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-number">1</span>, file.getName().indexOf(<span class="hljs-string">&quot;.log&quot;</span>));<span class="hljs-comment">//中间序号</span><br>                    <span class="hljs-keyword">if</span> (seq.length() != <span class="hljs-keyword">this</span>.sequenceLength) &#123;<span class="hljs-comment">//当前的序号是否满足于最大的序号长度</span><br>                        String newFile = file.getName().substring(<span class="hljs-number">0</span>, file.getName().lastIndexOf(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-number">1</span>)+ <span class="hljs-keyword">this</span>.addZero(seq) + <span class="hljs-string">&quot;.log&quot;</span>;<br>                        file.renameTo(<span class="hljs-keyword">new</span> File(newFile));<span class="hljs-comment">//更名处理</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addZero</span> <span class="hljs-params">(String val)</span></span>&#123;<br>            StringBuffer buf = <span class="hljs-keyword">new</span> StringBuffer(val);<br>            <span class="hljs-keyword">while</span> (buf.length() != <span class="hljs-keyword">this</span>.sequenceLength) &#123;<span class="hljs-comment">//还可以继续添加0</span><br>                buf.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> buf.toString();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calcFileCount</span> <span class="hljs-params">(File file)</span></span>&#123;<span class="hljs-comment">//统计文件的数量</span><br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                File list[] = file.listFiles();<span class="hljs-comment">//列出全部的子路径</span><br>                <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (File sub : list) &#123;<br>                        <span class="hljs-keyword">this</span>.calcFileCount(sub);<span class="hljs-comment">//继续列出</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (file.isFile()) &#123;<span class="hljs-comment">//当前的路径是文件</span><br>                        <span class="hljs-keyword">this</span>.fileCount++;<span class="hljs-comment">//文件个数增加</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFileDemo07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        File dir=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator);<br>        <span class="hljs-keyword">new</span> DirRenameUtil(dir).rename();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据流简介"><a href="#数据流简介" class="headerlink" title="数据流简介"></a>数据流简介</h2><p>流(Stream)主要是指数据的处理方式，以及对于目标内容的处理机制。存在输入和输出的两个相对性的概念。</p><img src="/2021/05/02/Javaio/image-20210518140809225.png" alt="image-20210518140809225" style="zoom:80%;"><p>程序中的流指的是数据的处理方向，File类实现对文件的创建和删除等操作，但无法实现文件的内容操作，必须通过流实现文件内容的处理。</p><ul><li><p>字节操作流：OutputStream（字节输出流）、InputStream（字节输入流）；</p></li><li><p>字符操作流：Writer（字符输出流）、Reader（字符输入流）。</p></li></ul><p>所有的数据流都是按照如下标准做法进行处理（文件操作为例）：</p><ul><li>通过File类定义一个要操作的文件的路径（此操作是在进行文件输入输出的时候所需要采用的方式）；</li><li>通过字节流的子类为父类对象实例化；</li><li>实现数据的读、写操作；</li><li>流属于非常宝贵的资源，操作完毕后一定要进行关闭（close()）。</li></ul><img src="/2021/05/02/Javaio/image-20210520130755682.png" alt="image-20210520130755682" style="zoom: 67%;"><h3 id="OutputStream字节输出流"><a href="#OutputStream字节输出流" class="headerlink" title="OutputStream字节输出流"></a>OutputStream字节输出流</h3><p>OutputStream类是提供实现字节数据的输出流，分析其定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Closeable</span>,<span class="hljs-title">Flushable</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>OutputStream类是在JDK1.0的时候提供给开发者使用的，但是其所实现额Closeable接口是在JDK1.5的时候提供的，实现的Flushable接口也是在JDK1.5的时候实现的。</p><table><thead><tr><th>Closeable接口</th><th>Flushable接口</th></tr></thead><tbody><tr><td>public interface Closeable extends AutoCloseable{public void close() throws IOException}</td><td>public interface Flushable{public void flush() throws IOException}</td></tr></tbody></table><p>OutputStream提供之初就存在close()、flush()的处理方法，就是说在后续的JDK版本里面才将对应接口中对应的处理方法单独提炼出来的。在OutputStream类中提供3个中要的数据输出方法</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public void write(byte[] b)  throws IOException</td><td>将字节数组进行输出</td></tr><tr><td>public void write(byte[] b,int off, int len)  throws IOException</td><td>实现指定范围的字节数组内容的输出</td></tr><tr><td>public abstract void write(int b)  throws IOException</td><td>输出单个字节</td></tr></tbody></table><p>Output类定义了所有字节输出流中最为重要的三个内容输出方法，但是OutputStream类毕竟属于一个抽象类，所以如果想进行抽象类的对象化实例，则必须依靠子类，既然此时需要实现的是文件的输出操作，所以可以使用FileOutputStream子类，这个类主要去观察其内部所提供的构造方法。</p><img src="/2021/05/02/Javaio/image-20210519091409601.png" alt="image-20210519091409601" style="zoom:67%;"><p>案例：向文件之中进行内容的输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//向文件之中进行内容的输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOutputStream</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file.getParentFile().exists())&#123;<span class="hljs-comment">//此时文件有父目录</span><br>            file.getParentFile().mkdirs();<span class="hljs-comment">//创建父目录</span><br>        &#125;<br>        OutputStream outputStream=<span class="hljs-keyword">new</span> FileOutputStream(file);<br>        String message=<span class="hljs-string">&quot;i like plmm&quot;</span>;<span class="hljs-comment">//此为要输出的数据内容</span><br>        <span class="hljs-comment">//OutputStream类的输出是以字节数据类型为主的，所以需要将字符串转为字符数据类型</span><br>        <span class="hljs-keyword">byte</span> data[]=message.getBytes();<span class="hljs-comment">//将字符串转为字节数据</span><br>        outputStream.write(data);<span class="hljs-comment">//输出全部字节数组的内容</span><br>        outputStream.close();<span class="hljs-comment">//关闭输出流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当本程序执行之后会自动根据要输出的文件进行文件的创建，随后将相应的内容的数据直接写入到文件里面，但是此时程序如果重复执行实际上只会出现内容的覆盖。在实例化FileOutputStream类对象时开启append追加模式可以进行文件内容追加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">OutputStream outputStream=<span class="hljs-keyword">new</span> FileOutputStream(file,<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>字节输出流实现内容的保存时按照固定的套路实现的，整个操作只需按步骤进行定义。</p><h3 id="InputStream字节输入流"><a href="#InputStream字节输入流" class="headerlink" title="InputStream字节输入流"></a>InputStream字节输入流</h3><p>基于字节的方式实现指定输入流数据的读取操作，定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Closeable</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public int available() throws IOException</td><td>获取全部的可用字节数</td></tr><tr><td>public abstract int read() throws IOException</td><td>读取单个字节数据</td></tr><tr><td><font color="red">public int read(byte[] b) throws IOException</font></td><td><font color="red">把内容读取到字节数组之中，并返回读取的字节长度，如果此时已经读取到输入流底部（无数据）返回“-1”</font></td></tr><tr><td>public int rea(byte[] b,int off,int len) throws IOException</td><td>读取部分内容到字节数组之中，并返回读取的字节长度</td></tr><tr><td>public byte[] readAllBytes() throws IOException</td><td>[JDK1.9]读取输入流中的全部字节内容</td></tr><tr><td>public long transferTo(OutputStream out) throws IOEception</td><td>[JDK1.9]流的传输转换</td></tr></tbody></table><p>在OutputStream类中提供有三个write()方法，反过来在InputStream类中又提供有三个read()方法，无论从方法的名称上以及参数的类型上及个数上都是非常对称的。分析三个读取操作区别：</p><img src="/2021/05/02/Javaio/image-20210518202922596.png" alt="image-20210518202922596" style="zoom:67%;"><p>案例：通过InputStream实现数据的读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//通过InputStream实现数据的读取</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInputStream01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists()) &#123;<span class="hljs-comment">//文件存在</span><br>            <span class="hljs-keyword">try</span> (InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(file)) &#123;<span class="hljs-comment">//字节输入流</span><br>                <span class="hljs-keyword">byte</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//开辟1k的空间进行读取</span><br>                <span class="hljs-keyword">int</span> len=inputStream.read(data);<span class="hljs-comment">//读取数据到字节数组</span><br>                System.out.println(<span class="hljs-string">&quot;【读取到的数据内容】：&quot;</span>+<span class="hljs-keyword">new</span> String(data)+<span class="hljs-string">&quot;ccc&quot;</span>+len);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210518203020607.png" alt="image-20210518203020607" style="zoom:67%;"><p>此时程序已经实现了整个数据内容的读取，但是如果此时要读取的内容很大，但是所开辟的数组空间很小：这时无法一次性进行数据的读取，那么需要重复多次读取，而如果文件已经读取到底部的时候，调用read()方法返回的内容就是“-1”（不再是读取到的字节个数了）。</p><p>案例：执行数据的多次读取</p><p>使用do while，程序由于一次性的读取不可能将所有的内容全部读取完成，所以采用的方式就是进行部分读取的处理，而在进行部分读取的时候又需要将每一次读取到的内容保存在StringBuffer之中，但是在保存的时候必须保证有内容读取的时候（len!=-1）才可以实现数据的添加，太繁琐，实际项目用while循环方式。</p><p>案例：通过while循环实现数据读取。</p><p>将</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123; <br>&#125;<span class="hljs-keyword">while</span>();<br></code></pre></td></tr></table></figure><p>换为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>((len=inputStream.read(data))!=-<span class="hljs-number">1</span>)&#123;<br>       buffer.append(<span class="hljs-keyword">new</span> String(data));<br>&#125;<br></code></pre></td></tr></table></figure><p>案例源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//通过InputStream实现数据的读取</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInputStream01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        StringBuffer buffer=<span class="hljs-keyword">new</span> StringBuffer();<span class="hljs-comment">//保存读取到的内容</span><br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists()) &#123;<span class="hljs-comment">//文件存在</span><br>            <span class="hljs-keyword">try</span> (InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(file)) &#123;<span class="hljs-comment">//字节输入流</span><br>                <span class="hljs-keyword">byte</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8</span>];<span class="hljs-comment">//开辟1k的空间进行读取</span><br>                <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//保存数据读取个数</span><br>               <span class="hljs-comment">/* do&#123;</span><br><span class="hljs-comment">                    len=inputStream.read(data);//读取数据到字节数组并返回读取个数</span><br><span class="hljs-comment">                    if(len!=-1)&#123;</span><br><span class="hljs-comment">                        buffer.append(new String(data));//每次读取到的内容都保存在缓冲流中</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125;while(len!=-1);//没有读取到底*/</span><br>                <br>                <span class="hljs-comment">//第一个表达式：input.read(data)，将输入流的数据读取到字节数组之中</span><br>                <span class="hljs-comment">//第二个表达式：len=input.read(data)，将读取到的数据长度赋值给len变量</span><br>                <span class="hljs-comment">//第三个表达式：len=inputStream.read(data))!=-1，判断len的内容是否不为-1</span><br>                <span class="hljs-keyword">while</span>((len=inputStream.read(data))!=-<span class="hljs-number">1</span>)&#123;<br>                    buffer.append(<span class="hljs-keyword">new</span> String(data));<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;【读取到的数据内容】：&quot;</span>+buffer+<span class="hljs-string">&quot;ccc&quot;</span>+len);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>                &#125;<span class="hljs-keyword">while</span>(len!=-<span class="hljs-number">1</span>);<span class="hljs-comment">//没有读取到底</span><br>                System.out.println(<span class="hljs-string">&quot;【读取到的数据内容】：&quot;</span>+buffer+<span class="hljs-string">&quot;ccc&quot;</span>+len);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Writer字符输出流"><a href="#Writer字符输出流" class="headerlink" title="Writer字符输出流"></a>Writer字符输出流</h3><p>虽然使用OutputStream类可以实现数据的输出，但是这个类本身却存在一个严重问题：需要将所有的数据变为字节数组，而后才能实现最终的内容输出。为了解决这个问题，提供新输出类—Writer类。</p><p>通过Writer类实现字符数据的输出，使用如下方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public Appendable append(char c) throws IOException</td><td>实现内容的追加</td></tr><tr><td>public void write(char[] cbuf) throws IOException</td><td>输出字符串数据</td></tr><tr><td>public void write(String str) throws IOExcption</td><td>输出字符串数据</td></tr><tr><td>public void write(int c) throws IOException</td><td>输出单个字符</td></tr></tbody></table><p>字符和字节数据都是可以自动向int类型转换的，所以不管是使用何种数据流，都有输出或读取单个内容的支持方法，这种方法的参数或返回值都是int型。</p><p>案例：使用Writer类实现数据的输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-comment">//使用Writer类实现数据的输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestWriter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file.getParentFile().exists())&#123;<br>            file.getParentFile().mkdirs();<br>        &#125;<br>        <span class="hljs-keyword">try</span>( Writer out=<span class="hljs-keyword">new</span> FileWriter(file,<span class="hljs-keyword">true</span>)) &#123;<br>            ;<span class="hljs-comment">//通过子类获取实例化对象</span><br><br>            out.write(<span class="hljs-string">&quot;huahua\n&quot;</span>);<span class="hljs-comment">//输出信息</span><br>            out.append(<span class="hljs-string">&quot;are you ok&quot;</span>);<span class="hljs-comment">//追加输出信息</span><br><span class="hljs-comment">//        out.close();//关闭输出流</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比较OutputStream类，使用Writer类实现输出最大优势在于可以直接实现字符串内容的输出，避免了与字节数组之间的转换处理操作。</p><h3 id="Reader字符输入流"><a href="#Reader字符输入流" class="headerlink" title="Reader字符输入流"></a>Reader字符输入流</h3><p>定义结构：</p><img src="/2021/05/02/Javaio/image-20210519095328740.png" alt="image-20210519095328740" style="zoom:67%;"><p>Reader实现数据读取的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public int read(char[] cbuf) throws IOException</td><td>将要读取的数据读取到字符数组之中</td></tr><tr><td>public abstract int read(char[] cbuf,int off,int len) throws IOException</td><td>将数据读取到指定字符数组的部分内容</td></tr><tr><td>public int read() throws IOException</td><td>读取单个字符内容</td></tr><tr><td>public long skip(long n) throws IOException</td><td>跳过若干个字节后定位读取位置</td></tr><tr><td>public long transferTo(Writer out) throws IOException</td><td>将字符输入流转为特定的字符输出流</td></tr></tbody></table><p>在Writer类中提供有直接实现字符串数据输出的write()方法，但是在Reader类中没有将所有的字符输入流以字符串形式返回的处理方法，主要原因在，数据量过大会造成内存溢出。正确读取方式：声明一个字符数组，随后利用read()方法读取数据并根据返回的读取个数实现字符数组与字符串之间的转换。</p><p>案例：实现数据读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">//Reader实现数据读取</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestReader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            <span class="hljs-keyword">try</span>(Reader in=<span class="hljs-keyword">new</span> FileReader(file)) &#123;<span class="hljs-comment">//通过子类获取实例化对象</span><br>                <span class="hljs-keyword">char</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//开辟数组</span><br>                <span class="hljs-keyword">int</span> len = in.read(data);<span class="hljs-comment">//数组装不满</span><br>                System.out.println(<span class="hljs-keyword">new</span> String(data));<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当前程序实现了文件数据的读取，但是不管用的是InputStream还是Reader，其基本操作流程是相同的，只不过InputStream是基于字节数组操作的，而Reader是基于字符数组操作的。</p><h3 id="字符流与字节流区别"><a href="#字符流与字节流区别" class="headerlink" title="字符流与字节流区别"></a>字符流与字节流区别</h3><p>通过之前一系列的分析之后应该已经清楚了字节流和字符流的基本操作形式，但是：字节流和字符流本身有什么区别？在实际开发之中应该如何选择呢？</p><img src="/2021/05/02/Javaio/image-20210519122024645.png" alt="image-20210519122024645" style="zoom:67%;"><p>字符是程序处理的结果，字节是原生的数据存储。</p><p>案例：</p><p>通过OutputStream类字节流实现内容的输出，程序执行输出之后不进行输出流对象的关闭（不调用close()方法）。此时文件可以正常实现输出。</p><p>通过Writer类字符流输出不关闭，此时的程序实现程序的输出，但是没有关闭输出流，发现文件中不存在任何的内容，而之所以关闭才会出现内容，是因为关闭的时候会强制进行内存缓冲区的刷新，这样就会把内存中的数据强制性进行文件保存，由于缓冲区的输出是需要进行清空处理的，所以使用append()方法也不一定会输出，除非内容很大，内存存不下才会自动输出。如果此时不确定文件能不能关闭，可以通过flush()方法强制刷新缓冲区。</p><p>总结：字节输出流不会进过内存缓冲区进行数据的暂存，而是直接与目标介质进行输出控制，而所有的字符流都需要经过内存处理后才可以实现。实际上大部分IO操作都可以通过字节流的方式来完成，但是如果要是在中文的处理上，首选字符流。</p><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>实现数据的输入与输出操作类为字节流和字符流两组，但是在一些环境下有可能会出现这两种不同类型的数据流之间的互相转换问题，这种操作被称为转换流，其主要分为两种：InputStreamReader、OutputStreamWriter，其都属于字符流的子类。</p><img src="/2021/05/02/Javaio/image-20210519130445068.png" alt="image-20210519130445068" style="zoom:50%;"><img src="/2021/05/02/Javaio/image-20210519130155013.png" alt="image-20210519130155013" style="zoom:67%;"><p>通过继承关系得出结论：转换流全部是字符流的子类，转换流的主要功能是将字节流转换为字符流进行操作（字符流在IO开发中更加适合实现中文的处理）。</p><p>案例：通过输出转换流将字节流转换为字符流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//通过输出转换流将字节流转换为字符流</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOutputStreamWriter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file.getParentFile().exists())&#123;<span class="hljs-comment">//此文件有父目录</span><br>            file.getParentFile().mkdirs();<span class="hljs-comment">//新建父目录</span><br>        &#125;<br>        Writer out=<span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(file));<br>        out.write(<span class="hljs-string">&quot;huahua plmm&quot;</span>);<span class="hljs-comment">//字符流可以直接输出字符串</span><br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用字节流直接输出，则一定要将字符串转为字符数组，是如果将字节流转为字符流，可以直接实现字符串的输出。</p><p>案例：观察字节输入流转为字符输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stream;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//观察字节输入流转为字符输入流</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInputStreamReader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            Reader in=<span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(file));<br>            <span class="hljs-keyword">char</span>[] data=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len=in.read(data);<br>            System.out.println(<span class="hljs-keyword">new</span> String(data));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FileWriter、FileReader的继承结构。</li></ul><p>文件的字符输入流和输出流都属于转换流的子类，继承关系如下：</p><img src="/2021/05/02/Javaio/image-20210519201725378.png" alt="image-20210519201725378" style="zoom: 67%; "><p>通过类继承的关系发现所有给出的文件字符流也属于转换流的子类。</p><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><p>所有系统都有copy命令，实现数据文件的复制操作。Windows中：</p><ol><li>文件拷贝是选择字节流还是字符流操作？</li></ol><p>答：拷贝文件可能是图片、音乐、视频等，这些数据全是二进制数据，所以选择字节流。</p><ol start="2"><li>怎样拷贝？</li></ol><p>答：可以将要拷贝的内容全部读取到内存中后一次性输出，也可以采用管道形式一点点的进行读取和拷贝。后一种在实际中更方便。</p><ol start="3"><li>对于拷贝命令中所需要输入的源文件路径和目标文件路径的定义可以采用初始化参数的形式完成处理。</li></ol><p>案例：实现文件的拷贝处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.copy;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//实现文件的拷贝处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCopyDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> CopyUtil(args).copy());<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyUtil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> File inFile;<span class="hljs-comment">//输入文件路径</span><br>    <span class="hljs-keyword">private</span> File outFile;<span class="hljs-comment">//输出文件路径</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通过数组实现拷贝参数的配置，这个数组的长度一定是2</span><br><span class="hljs-comment">    * 第一个内容为拷贝文件的源路径，第二个内容为拷贝文件的输出目标路径</span><br><span class="hljs-comment">    * args 拷贝的路径</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyUtil</span><span class="hljs-params">(String args[])</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(args.length!=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//参数的个数不足</span><br>            System.out.println(<span class="hljs-string">&quot;【ERROR】程序拷贝命令输入的参数不足，程序无法执行&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;使用参考：Java TestCopyDemo01 源文件路径 目标文件路径&quot;</span>);<br>            System.exit(<span class="hljs-number">1</span>);<span class="hljs-comment">//程序退出</span><br>        &#125;<br>        <span class="hljs-keyword">this</span>.inFile=<span class="hljs-keyword">new</span> File(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">this</span>.outFile=<span class="hljs-keyword">new</span> File(args[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyUtil</span><span class="hljs-params">(String inPath,String outPath)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.inFile=<span class="hljs-keyword">new</span> File(inPath);<br>        <span class="hljs-keyword">this</span>.outFile=<span class="hljs-keyword">new</span> File(outPath);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 实现文件的拷贝处理操作</span><br><span class="hljs-comment">    * return 拷贝问你件所花费的时间</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">copy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<span class="hljs-comment">//IOException是最大的IO异常</span><br>        <span class="hljs-keyword">long</span> start=System.currentTimeMillis();<span class="hljs-comment">//获取开始时间</span><br>        InputStream inputStream=<span class="hljs-keyword">null</span>;<br>        OutputStream outputStream=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            inputStream=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">this</span>.inFile);<span class="hljs-comment">//字节输入流</span><br>            outputStream=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">this</span>.outFile);<span class="hljs-comment">//字节输出流</span><br>            <span class="hljs-keyword">byte</span> data[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];<span class="hljs-comment">//每次拷贝2048个字节内容</span><br>            <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//保存每次拷贝的长度</span><br>            <span class="hljs-keyword">while</span>((len=inputStream.read(data))!=-<span class="hljs-number">1</span>)&#123;<br>                outputStream.write(data);<span class="hljs-comment">//内容输出</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(inputStream!=<span class="hljs-keyword">null</span>)&#123;<br>                inputStream.close();<br>            &#125;<span class="hljs-keyword">if</span>(outputStream!=<span class="hljs-keyword">null</span>)&#123;<br>                outputStream.close();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<span class="hljs-comment">//获取结束时间</span><br>        <span class="hljs-keyword">return</span> end-start;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>InputStream类的 新的拷贝方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">transferTo</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException</span><br></code></pre></td></tr></table></figure><p>这个方法的出现就避免了之前每一次通过循环方式进行输入流和输出流的处理了，此时的copy()方法实现简化了，相当于替换如下的拷贝逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> data[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];<span class="hljs-comment">//每次拷贝2048个字节内容</span><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//保存每次拷贝的长度</span><br><span class="hljs-keyword">while</span>((len=inputStream.read(data))!=-<span class="hljs-number">1</span>)&#123;<br>    outputStream.write(data);<span class="hljs-comment">//内容输出</span><br>&#125;<br></code></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">inputStream.transferTo(outputStream);<span class="hljs-comment">//实现了拷贝</span><br></code></pre></td></tr></table></figure><p>案例：给你一个目录，要求实现整个目录的拷贝。可以使用递归的形式完成（既可以整个目录copy，也可以文件copy）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.copy;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//实现文件的拷贝处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCopyDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> CopyUtil01(args).copy());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICopy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">copy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyUtil01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICopy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> File inFile;<span class="hljs-comment">//输入文件路径</span><br>    <span class="hljs-keyword">private</span> File outFile;<span class="hljs-comment">//输出文件路径</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 通过数组实现拷贝参数的配置，这个数组的长度一定是2</span><br><span class="hljs-comment">     * 第一个内容为拷贝文件的源路径，第二个内容为拷贝文件的输出目标路径</span><br><span class="hljs-comment">     * args 拷贝的路径</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyUtil01</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (args.length != <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//参数的个数不足</span><br>            System.out.println(<span class="hljs-string">&quot;【ERROR】程序拷贝命令输入的参数不足，程序无法执行&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;使用参考：Java TestCopyDemo01 源文件夹路径 目标文件夹路径&quot;</span>);<br>            System.exit(<span class="hljs-number">1</span>);<span class="hljs-comment">//程序退出</span><br>        &#125;<br>        <span class="hljs-keyword">this</span>.inFile = <span class="hljs-keyword">new</span> File(args[<span class="hljs-number">0</span>]);<span class="hljs-comment">//有可能是文件路径，也有可能是文件夹路径</span><br>        <span class="hljs-keyword">this</span>.outFile = <span class="hljs-keyword">new</span> File(args[<span class="hljs-number">1</span>]);<span class="hljs-comment">//有可能是文件路径，也有可能是文件夹路径</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyUtil01</span><span class="hljs-params">(String inPath, String outPath)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.inFile = <span class="hljs-keyword">new</span> File(inPath);<span class="hljs-comment">//有可能是文件路径，也有可能是文件夹路径</span><br>        <span class="hljs-keyword">this</span>.outFile = <span class="hljs-keyword">new</span> File(outPath);<span class="hljs-comment">//有可能是文件路径，也有可能是文件夹路径</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 实现文件的拷贝处理操作</span><br><span class="hljs-comment">     * return 拷贝问你件所花费的时间</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">copy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<span class="hljs-comment">//IOException是最大的IO异常</span><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<span class="hljs-comment">//获取开始时间</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.outFile.exists()) &#123;<span class="hljs-comment">//输出的目录不存在</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.outFile.isDirectory()) &#123;<span class="hljs-comment">//给定的是目录</span><br>                <span class="hljs-keyword">this</span>.outFile.mkdirs();<span class="hljs-comment">//直接创建</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.outFile.isFile()) &#123;<span class="hljs-comment">//给定的是文件</span><br>                <span class="hljs-keyword">this</span>.outFile.getParentFile().mkdirs();<span class="hljs-comment">//创建父目录</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inFile.isDirectory()) &#123;<br>            <span class="hljs-keyword">this</span>.copyHandle(<span class="hljs-keyword">this</span>.inFile);<span class="hljs-comment">//递归操作</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.copyFile(<span class="hljs-keyword">this</span>.inFile);<br>        &#125;<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<span class="hljs-comment">//获取结束时间</span><br>        <span class="hljs-keyword">return</span> end - start;<span class="hljs-comment">//获取花费时间</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyHandle</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<span class="hljs-comment">//实现具体拷贝处理</span><br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<span class="hljs-comment">//给定的输入路径为目录</span><br>            File[] list = file.listFiles();<span class="hljs-comment">//列出全部组成</span><br>            <span class="hljs-keyword">for</span> (File temp : list) &#123;<span class="hljs-comment">//迭代全部的目录列表</span><br>                <span class="hljs-keyword">this</span>.copyHandle(temp);<span class="hljs-comment">//实现拷贝的调用</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (file.isFile()) &#123;<span class="hljs-comment">//当前给出的文件是一个路径</span><br>                <span class="hljs-keyword">this</span>.copyFile(file);<span class="hljs-comment">//实现拷贝功能的调用</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(File inputFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        OutputStream outputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = <span class="hljs-keyword">new</span> FileInputStream(inputFile);<span class="hljs-comment">//字节输入流</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inFile.isDirectory()) &#123;<span class="hljs-comment">//是一个输入目录</span><br>                String outFileName = inputFile.getPath().replace(<span class="hljs-keyword">this</span>.inFile.getPath(), <span class="hljs-string">&quot;&quot;</span>);<br>                File outputFile = <span class="hljs-keyword">new</span> File(<span class="hljs-keyword">this</span>.outFile, outFileName);<br>                <span class="hljs-keyword">if</span> (!outputFile.getParentFile().exists()) &#123;<span class="hljs-comment">//不存在输出的目录</span><br>                    outputFile.getParentFile().mkdirs();<span class="hljs-comment">//创建相应的输出目录</span><br>                &#125;<br>                outputStream = <span class="hljs-keyword">new</span> FileOutputStream(outputFile);<span class="hljs-comment">//字节输出流</span><br>                inputStream.transferTo(outputStream);<span class="hljs-comment">//实现拷贝</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inFile.isFile()) &#123;<br>                outputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">this</span>.outFile);<span class="hljs-comment">//字节输出流</span><br>                inputStream.transferTo(outputStream);<span class="hljs-comment">//实现拷贝</span><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>) &#123;<br>                inputStream.close();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>计算机基本组成是0和1，要想让计算机显示文字就必须对文字编码，早期是AscII码描述基本字符，中文字符需要更长编码范围，本次围绕中文编码。</p><p>常用编码类型：</p><ul><li>GBK/GB2312：描述中文国标编码，其中GBK可以描述简体中文与繁体中文，而GB2312仅仅是简体中文；</li><li>ISO8859-1：国际通用编码，可以描述任何文字，但是对于一些图形化的文字需要做出转码；</li><li>UNICODE：是一种十六进制的编码，可以描述世界上的各种文字信息，包括单字节的或者是多字节的，但是有一个问题，并不是所有的文字都需要如此长的编码，例如：英文字母，如果也使用这种方式进行编码所占用的传输带宽就没有意义了；</li><li>UTF编码：可以理解为“ISO8859-1+Unicode”（优势结合），在需要十六进制编码的时候就使用十六进制的长度，如果不需要则使用ISO8859-1的形式，这种编码更加适合网络传输，而常用的规格就是”UTF-8“编码。</li></ul><p>案例：获取当前系统中的环境属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.utf;<br><span class="hljs-comment">//获取当前系统中的环境属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUTF</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.getProperties().list(System.out);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般使用UTF-8编码形式</p><h2 id="内存操作流"><a href="#内存操作流" class="headerlink" title="内存操作流"></a>内存操作流</h2><p>之前的输入输出都是以文件为基础的，使用文件流实现数据的操作特点：所有输入输出终端类型全部为文件，同时储存终端会产生一个文件。若不希望产生具体的文件的同时完成输入输出操作，就需要基于内存的方式实现输入和输出的处理。共存在两组：</p><ul><li>字符内存操作流：ByteArrayInputStream（字节内存输入流）、ByteArrayOutputStream（字节内存输出流）；</li><li>字节内存操作流：CharArrayReader（字符内存输入流）、CharArrayWriter（字符内存输出流）；</li></ul><p>在内存流的处理上使用字节内存流和字符内存流从操作流程上来说是非常类似的，本次以字节内存流为主。</p><img src="/2021/05/02/Javaio/image-20210520132400609.png" alt="image-20210520132400609" style="zoom:50%;"><p>案例：完成一个基于内存的大小写转换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.utf;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//内存操作流</span><br><span class="hljs-comment">//完成一个基于内存的大小写转换功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMemory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String message=<span class="hljs-string">&quot;HUAHUA PLMM&quot;</span>;<br>        InputStream inputStream=<span class="hljs-keyword">new</span> ByteArrayInputStream(message.getBytes());<span class="hljs-comment">//将要进行读取的数据保存在内存输入流</span><br>        OutputStream outputStream=<span class="hljs-keyword">new</span> ByteArrayOutputStream();<span class="hljs-comment">//内存输出流</span><br>        <span class="hljs-keyword">int</span> data=<span class="hljs-number">0</span>;<span class="hljs-comment">//每一次读取单个字节</span><br>        <span class="hljs-keyword">while</span>((data=inputStream.read())!=-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//持续读取数据</span><br>            outputStream.write(Character.toLowerCase(data));<span class="hljs-comment">//将所有读取到的字节转小写后保存在内存输出流</span><br>        &#125;<br>        System.out.println(outputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么提供内存流？</p><p>某些输出的过程仅仅是能够在内存中处理的，例如：项目中使用到的登录验证码和图片等都是在内存中处理的。</p><p>结合内存输出流和文件输入流实现整个文件数据的全部读取，可用字节内存输出流的中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] toByteArray() <span class="hljs-comment">//将内存流中保存的全部字节一次性取出</span><br></code></pre></td></tr></table></figure><p>案例：实现文件的全部读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.utf;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//字节内存输出流实现文件的全部读取</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMemoryDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            InputStream inputStream=<span class="hljs-keyword">new</span> FileInputStream(file);<br>            ByteArrayOutputStream byteArrayOutputStream=<span class="hljs-keyword">new</span> ByteArrayOutputStream();<span class="hljs-comment">//不要转型</span><br>            <span class="hljs-keyword">byte</span> data[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//每次读取10个字符</span><br>            <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>((len=inputStream.read(data))!=-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//持续读取</span><br>                byteArrayOutputStream.write(data,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//将内容保存在字节输出流</span><br>            &#125;<br>            String content=<span class="hljs-keyword">new</span> String(byteArrayOutputStream.toByteArray());<span class="hljs-comment">//将字节数组转为字符串</span><br>            System.out.println(content);<br>            inputStream.close();<br>            byteArrayOutputStream.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时操作有隐患：数据量过大会造成内存的溢出。JDK1.9之后InputStream类中存在新功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] readAllBytes() <span class="hljs-keyword">throws</span> IOException<br></code></pre></td></tr></table></figure><p>此方法就可以直接将全部输入流的字节内容完全进行读取。</p><p>案例：使用readAllBytes()方法实现读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.utf;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//使用readAllBytes()方法实现读取</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMemoryDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;zhao&quot;</span>+File.separator+<span class="hljs-string">&quot;stream&quot;</span>+File.separator+<span class="hljs-string">&quot;plmm.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            InputStream inputStream=<span class="hljs-keyword">new</span> FileInputStream(file);<br>            String content=<span class="hljs-keyword">new</span> String(inputStream.readAllBytes());<br>            System.out.println(content);<br>            inputStream.close();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>存在严重的隐患：内存溢出。早期一直是通过内存输出流控制的，因为所有的具体逻辑可以由开发者自己完成，就可以防止产生的内存溢出，现在为了方便又加入了。</p><h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>管道最早是进程之间的数据通讯模式，因为在计算机的操作系统中每个进程都是独立的，每个进程的数据都是自己进行管理的，但是不同的进程之间有可能需要实现一些通讯的处理，就需要管道。</p><img src="/2021/05/02/Javaio/image-20210520153445968.png" alt="image-20210520153445968" style="zoom:50%;"><p>&lt;img src=”image-20210520154054708.png” alt=”image-20210520154054708” style=”zoom:68%;float:right” /</p><p>Java本身是属于多线程的编程语言，而多线程和多进程区别：一个进程可以产生多个线程，那么这些线程都属于同一个进程中的组成单元，所以这些线程都可以直接共享给定进程里面的所有资源，包括数据。</p><img src="/2021/05/02/Javaio/image-20210520154054708.png" alt="image-20210520154054708" style="zoom:68%;"><p>但是在Java里面强调不同的线程也有可能存在属于自己的内容，不同线程之间也应该利用管道的方式来进行处理。</p><p>为解决管道流的操作，提供两个类：字节流（PipedOutputStream、PipedInputStream），字符流（PipedReader、PipedWriter）。</p><p>以字节数组为主观察管道流的使用：</p><p>案例：通过线程管道流实现内容的发送与接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.pipeline;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PipedInputStream;<br><span class="hljs-keyword">import</span> java.io.PipedOutputStream;<br><br><span class="hljs-comment">//通过线程管道流实现内容的发送与接收</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPipelineDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SendThread sendThread=<span class="hljs-keyword">new</span> SendThread();<span class="hljs-comment">//发送线程</span><br>        ReceiveThread receiveThread=<span class="hljs-keyword">new</span> ReceiveThread();<span class="hljs-comment">//接收线程</span><br>        sendThread.getOutput().connect(receiveThread.getInput());<br>        <span class="hljs-keyword">new</span> Thread(sendThread).start();<br>        <span class="hljs-keyword">new</span> Thread(receiveThread).start();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> PipedOutputStream pipedOutputStream=<span class="hljs-keyword">new</span> PipedOutputStream();<span class="hljs-comment">//管道输出流</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//通过管道实现数据的发送</span><br>            <span class="hljs-keyword">this</span>.pipedOutputStream.write(<span class="hljs-string">&quot;工作:HUAHUA&quot;</span>.getBytes());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PipedOutputStream <span class="hljs-title">getOutput</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//通过子类操作</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.pipedOutputStream;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReceiveThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> PipedInputStream pipedInputStream=<span class="hljs-keyword">new</span> PipedInputStream();<span class="hljs-comment">//管道输入流</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//读取全部的输入字节</span><br>            <span class="hljs-keyword">int</span> len=<span class="hljs-keyword">this</span>.pipedInputStream.read(bytes);<span class="hljs-comment">//接收管道的数据</span><br>            System.out.println(<span class="hljs-string">&quot;【接收到消息】&quot;</span>+<span class="hljs-keyword">new</span> String(bytes));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PipedInputStream <span class="hljs-title">getInput</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.pipedInputStream;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>管道流存在的意义是为不同进程之间的通讯提供服务的，而多线程上的管道流实际意义不大。</p><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><p>在操作系统的编程中，对于早期的文件为了让其可以保存的数据更加有意义，所以会进行一些严格化的数据管理，例如：假设在文件里面存放三个数据，并希望可以随意实现某一条数据的读取。</p><img src="/2021/05/02/Javaio/image-20210520171035541.png" alt="image-20210520171035541" style="zoom:50%;"><p>随机读取相当于在文件中设置一个指针，每次读取都会依据指针所在位置进行指定长度数据的读取，如果想读取某一条数据，只需修改指针的文字，这就叫随机文件读取。使用的类为RandomAccessFile类，其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessFile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataOutput</span>,<span class="hljs-title">DataInput</span>,<span class="hljs-title">Closeable</span></span><br></code></pre></td></tr></table></figure><p>此类存在读写两种功能，具体方法：</p><p>构造方法1：接收File类对象，指定操作路径，需设置模式：”r”为只读，”w“为只写，”rw“读写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RandomAccessFile</span><span class="hljs-params">(File file,String mode)</span> <span class="hljs-keyword">throws</span> FIleNotFoundException</span><br></code></pre></td></tr></table></figure><p>构造方法2：不再使用File类对象表示文件，而是直接输入了一个固定的文件路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RandomAccessFile</span><span class="hljs-params">(String name,String mode)</span> <span class="hljs-keyword">throws</span> FIleNotFoundException</span><br></code></pre></td></tr></table></figure><p>普通方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public void close() throws IOException</td><td>关闭操作</td></tr><tr><td>public int read(byte[] b) throws IOException</td><td>将内容读取到一个byte数组之中</td></tr><tr><td>public final byte readByte() throws IOException</td><td>读取一个字节</td></tr><tr><td>public final int readInt() throws IOException</td><td>从文件中读取整型数据</td></tr><tr><td>public void seek(long pos) throws IOException</td><td>设置读指针的位置</td></tr><tr><td>public final void writeBytes(String s) throws IOException</td><td>将一个字符串写入到文件之中，按字节的方式处理</td></tr><tr><td>public final void writeInt(int v) throws IOException</td><td>将一个int型数据写入文件，长度为4位</td></tr><tr><td>public int skipBytes(int n) throws IOException</td><td>指针跳过多少个字节</td></tr></tbody></table><p>注意的是：如果使用了rw的方式声明RandomAccessFile对象时，要写入的文件不存在，系统将自动进行创建。</p><p>案例：使用RandomAccessFile类写入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.RandomAccessFile;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><br><span class="hljs-comment">//使用RandomAccessFile类写入数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRandomAccessFile01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;huahua.txt&quot;</span>);<br>        RandomAccessFile randomAccessFile=<span class="hljs-keyword">null</span>;<br>        randomAccessFile=<span class="hljs-keyword">new</span> RandomAccessFile(file,<span class="hljs-string">&quot;rw&quot;</span>);<span class="hljs-comment">//声明一个RandomAccessFile类对象，并以读写的方式打开文件</span><br>        String name=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> age=<span class="hljs-number">0</span>;<br>        name=<span class="hljs-string">&quot;zhangsan&quot;</span>;<span class="hljs-comment">//字符串长度为8</span><br>        age=<span class="hljs-number">30</span>;<span class="hljs-comment">//数字长度为4</span><br>        randomAccessFile.writeBytes(name);<span class="hljs-comment">//将姓名写入文件中</span><br>        randomAccessFile.writeInt(age);<span class="hljs-comment">//将年龄写入文件中</span><br>        name=<span class="hljs-string">&quot;lisi&quot;</span>;<br>        age=<span class="hljs-number">22</span>;<br>        randomAccessFile.writeBytes(name);<br>        randomAccessFile.writeInt(age);<br>        name=<span class="hljs-string">&quot;wangwu&quot;</span>;<br>        age=<span class="hljs-number">14</span>;<br>        randomAccessFile.writeBytes(name);<br>        randomAccessFile.writeInt(age);<br>        randomAccessFile.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：使用RandomAccessFile类读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.RandomAccessFile;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><br><span class="hljs-comment">//使用RandomAccessFile类读取数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRandomAccessFile02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;huahua.txt&quot;</span>);<br>        RandomAccessFile randomAccessFile=<span class="hljs-keyword">new</span> RandomAccessFile(file,<span class="hljs-string">&quot;r&quot;</span>);<br>        String name=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> age=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span> b[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8</span>];<span class="hljs-comment">//准备空间读取姓名</span><br>        randomAccessFile.skipBytes(<span class="hljs-number">12</span>);<span class="hljs-comment">//跨过12个字节</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            b[i]=randomAccessFile.readByte();<span class="hljs-comment">//循环读取前8个内容</span><br>        &#125;<br>        name=<span class="hljs-keyword">new</span> String(b);<span class="hljs-comment">//将读取出来的byte数组变为String</span><br>        age=randomAccessFile.readInt();<span class="hljs-comment">//读取数字</span><br>        System.out.println(<span class="hljs-string">&quot;第二个人的信息——&gt;姓名：&quot;</span>+name+<span class="hljs-string">&quot;，年龄：&quot;</span>+age);<br><br>        randomAccessFile.seek(<span class="hljs-number">0</span>);<span class="hljs-comment">//指针回到文件开头</span><br>        b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8</span>];<span class="hljs-comment">//准备空间读取姓名</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            b[i]=randomAccessFile.readByte();<span class="hljs-comment">//循环读取前8个内容</span><br>        &#125;<br>        name=<span class="hljs-keyword">new</span> String(b);<span class="hljs-comment">//将读取出来的byte数组变为String</span><br>        age=randomAccessFile.readInt();<span class="hljs-comment">//读取数字</span><br>        System.out.println(<span class="hljs-string">&quot;第一个人的信息——&gt;姓名：&quot;</span>+name+<span class="hljs-string">&quot;，年龄：&quot;</span>+age);<br><br>        randomAccessFile.skipBytes(<span class="hljs-number">12</span>);<span class="hljs-comment">//跳过第一个人的信息</span><br>        b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8</span>];<span class="hljs-comment">//准备空间读取姓名</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            b[i]=randomAccessFile.readByte();<span class="hljs-comment">//循环读取前8个内容</span><br>        &#125;<br>        name=<span class="hljs-keyword">new</span> String(b);<span class="hljs-comment">//将读取出来的byte数组变为String</span><br>        age=randomAccessFile.readInt();<span class="hljs-comment">//读取数字</span><br>        System.out.println(<span class="hljs-string">&quot;第三个人的信息——&gt;姓名：&quot;</span>+name+<span class="hljs-string">&quot;，年龄：&quot;</span>+age);<br>        randomAccessFile.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>OutputStream类可以实现数据输出，但是OutputStream类只支持字节数据的输出，利用打印流实现数据输出可提高编写效率。</p><p>打印流分为：字节打印流（PrintStream）和字符打印流（PrintWriter），可以打印任何数据。</p><p>构造方法1：通过一个File对象实例化PrintStream类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PrintStream</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> FileNotFoundException</span><br></code></pre></td></tr></table></figure><p>构造方法2：接收OutputStream对象，实例化PrintStream类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PrintStream</span><span class="hljs-params">(OutputStream out)</span></span><br></code></pre></td></tr></table></figure><p>常用方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public PrintStream printf(Locale l,String format,Object… args)</td><td>根据指定的Locale进行格式化输出</td></tr><tr><td>public PrintStream printf(String format,Object… args)</td><td>根据本地环境格式化输出</td></tr><tr><td>public void print(boolean b)</td><td>此方法被重载很多次，输出任意数据</td></tr><tr><td>public void println(boolean b)</td><td>此方法被重载很多次，输出任意数据后换行</td></tr></tbody></table><p>案例：使用PrintStream输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.printStream;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-comment">//使用PrintStream输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPrintStreamDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        PrintStream printStream=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//此时通过FileOutputStream实例化，意味着所有的输出是向文件之中打印</span><br>        printStream=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;huahua.txt&quot;</span>)));<br>        printStream.print(<span class="hljs-string">&quot;hello&quot;</span>);<br>        printStream.println(<span class="hljs-string">&quot;huahua&quot;</span>);<br>        printStream.print(<span class="hljs-string">&quot;1+1=&quot;</span>+<span class="hljs-number">2</span>);<br>        printStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>格式化输出</p><table><thead><tr><th align="center">字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">表示内容为字符串</td></tr><tr><td align="center">%d</td><td align="center">表示内容为整数</td></tr><tr><td align="center">%f</td><td align="center">表示内容为小数</td></tr><tr><td align="center">%c</td><td align="center">表示内容为字符</td></tr></tbody></table><p>案例：使用打印流进行格式化输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.printStream;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-comment">//使用打印流进行格式化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPrintStreamDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        PrintStream printStream=<span class="hljs-keyword">null</span>;<br>        printStream=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;huahua.txt&quot;</span>)));<br>        String name=<span class="hljs-string">&quot;小华同志&quot;</span>;<span class="hljs-comment">//定义字符串</span><br>        <span class="hljs-keyword">int</span> age=<span class="hljs-number">24</span>;<span class="hljs-comment">//定义整数</span><br>        <span class="hljs-keyword">float</span> score=<span class="hljs-number">990.356f</span>;<span class="hljs-comment">//定义小数</span><br>        <span class="hljs-keyword">char</span> sex=<span class="hljs-string">&#x27;W&#x27;</span>;<span class="hljs-comment">//定义字符</span><br>        <span class="hljs-comment">//格式化输出</span><br>        printStream.printf(<span class="hljs-string">&quot;姓名：%s,年龄：%d,成绩：%f,性别：%c&quot;</span>,name,age,score,sex);<br>        printStream.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="System类对IO的支持"><a href="#System类对IO的支持" class="headerlink" title="System类对IO的支持"></a>System类对IO的支持</h2><p>System类对于IO的三个支持：</p><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>public static final PrintStream out</td><td>对应系统标准输出</td></tr><tr><td>public static final PrintStream err</td><td>错误信息输出</td></tr><tr><td>public static final InputStream in</td><td>对应着标准输入，一般是键盘</td></tr></tbody></table><img src="/2021/05/02/Javaio/image-20210520210922968.png" alt="image-20210520210922968" style="zoom:80%;"><p>案例：观察out和err的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.system;<br><span class="hljs-comment">//观察out和err的区别</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSystemDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Integer.parseInt(<span class="hljs-string">&quot;huahua&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;【信息输出】&quot;</span>+e);<br>            System.err.println(<span class="hljs-string">&quot;【错误输出】&quot;</span>+e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210520211632757.png" alt="image-20210520211632757" style="zoom: 67%;"><p>out是黑色文本显示，err是红色文本显示</p><p>开发中：需要对代码进行调试，重要的操作数据通过err实现输出，便于在一堆输出信息中定位到需要的数据内容。</p><p>System.out和System.err本身都属于PrintStream的对象实例（该对象的实例是由JVM负责实例化的），所以这两个类的对象可以直接向OutputStream类进行转型。</p><p>案例：通过OutputStream接收System.out的对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.system;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">//通过OutputStream接收System.out的对象实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSystemDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        OutputStream outputStream=System.out;<span class="hljs-comment">//向屏幕打印</span><br>        outputStream.write(<span class="hljs-string">&quot;huahua plmm&quot;</span>.getBytes());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时OutputStream中的write()方法会根据实例化其子类的不同而带来不同的输出目的地，所以这就属于最为明显的对象多态性所带来的操作特点。</p><p>在System类中的in的常量描述的是通过标准键盘输入设备实现内容的输入处理，通过这个常量实现键盘数据的输入控制。</p><p>案例：通过System.in实现键盘内容输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.system;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//通过System.in实现键盘内容输入</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSystemDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        InputStream keyboardInput=System.in;<span class="hljs-comment">//键盘数据输入</span><br>        System.out.println(<span class="hljs-string">&quot;请输入要发送的数据信息：&quot;</span>);<br>        <span class="hljs-keyword">byte</span> data[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">6</span>];<span class="hljs-comment">//InputStream是与字节数组结合操作的</span><br>        <span class="hljs-keyword">int</span> len=keyboardInput.read(data);<span class="hljs-comment">//将要输入的数据保存在字节数组之中</span><br>        System.out.println(<span class="hljs-string">&quot;【输入数据回显】&quot;</span>+<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,len));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中1个字母或数字占byte数组1位，而1个汉字占3位。</p><img src="/2021/05/02/Javaio/image-20210520213922967.png" alt="image-20210520213922967" style="zoom:80%;"><p>存在的问题：因为InputStream如果要想实现数据的读取，那么一定靠字节数组来完成，但是如果说用户要输入的内容很长，那么就难处理，所以这种键盘输入仅仅是Java数据输入的基本形式。</p><hr><p>问题：为什么对象输出的时候会直接调用类中的toString()方法？</p><p>在Java程序中如果直接进行对象输出不管是否调用了toString()方法最终执行的结果都是toString()中的数据内容，实际上这种操作是和PrintStream类中的方法实现分不开的。</p><p>print(String str):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(String s)</span></span>&#123;<br>    write(String.valueOf(s));<br>&#125;<br></code></pre></td></tr></table></figure><p>print(Object obj):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(String s)</span></span>&#123;<br>    write(String.valueOf(s));<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现此时的操作全部通过String.valueOf()的方法进行了处理，而这儿valueOf()方法的源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>    <span class="hljs-keyword">return</span>(obj==<span class="hljs-keyword">null</span>)?<span class="hljs-string">&quot;null&quot;</span>:obj.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的valueOf()方法会判断传入的内容是否为空，如果为空，返回”null“字符串，否则自动调用类中的toString()方法。</p><hr><h2 id="BufferedReader缓冲输入流"><a href="#BufferedReader缓冲输入流" class="headerlink" title="BufferedReader缓冲输入流"></a>BufferedReader缓冲输入流</h2><p>使用InputStream或者Reader类实现内容读取时都必须将其所要读的数据保存在数组之中才可以正常实现功能，但是这样泰国繁琐，所以此时可以考虑将所有读取到的内容暂时放到缓冲区当中，在需要时一次性读取全部内容，避免繁琐的数组操作，所有就有一个专属的类：BufferedReader。</p><img src="/2021/05/02/Javaio/image-20210521092901959.png" alt="image-20210521092901959" style="zoom:68%;"><p>类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Reader</span></span><br></code></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BuferedReader</span><span class="hljs-params">(Reader in)</span></span><br></code></pre></td></tr></table></figure><p>数据读取方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">readLine</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span><br></code></pre></td></tr></table></figure><p>BufferedReader类实现数据读取的方法readLine()的最大特点在于，可以实现一个字符串数据的读取，并且是依据换行进行的分割。</p><p>案例：通过BufferedReader实现键盘数据输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.bufferedReader;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBufferedReader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader bufferedReader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        System.out.print(<span class="hljs-string">&quot;请输入发送的信息：&quot;</span>);<span class="hljs-comment">//信息发送完毕一定要回车</span><br>        String str=bufferedReader.readLine();<span class="hljs-comment">//以回车为分隔符</span><br>        System.out.println(<span class="hljs-string">&quot;【数据回显】&quot;</span>+str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时实现键盘输入方式比直接用System.in更加容易。BufferedReader类除了实现键盘数据输入之外，也可以实现文本数据的读取。</p><p>案例：读取文本数据信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.bufferedReader;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBufferedReader02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;huahua.txt&quot;</span>);<br>        BufferedReader bufferedReader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file));<br>        String data=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>((data=bufferedReader.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(data);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scanner输入流"><a href="#Scanner输入流" class="headerlink" title="Scanner输入流"></a>Scanner输入流</h2><p>使用InputStream类通过字节的形式实现数据的输入非常麻烦，而通过BufferedReader类进行输入流控制，虽然方便，但是只能用“\n”作为读取的分隔符。</p><p>Scanner类可以实现最为简化的读取。</p><p>构造方法1：获取一个文件的扫描流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Scanner</span><span class="hljs-params">(File source)</span> <span class="hljs-keyword">throws</span> FileNotFoundException</span><br></code></pre></td></tr></table></figure><p>构造方法2：采用特定的编码方式打开一个文件流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Scanner</span><span class="hljs-params">(File source,String charseName)</span> <span class="hljs-keyword">throws</span> FileNotFoundException</span><br></code></pre></td></tr></table></figure><p>构造方法3：明确定义一个输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Scanner</span><span class="hljs-params">(InputStream source)</span></span><br></code></pre></td></tr></table></figure><p>构造方法4：明确的采用特定的代码打开一个字节输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Scanner</span><span class="hljs-params">(InputStream source,String charseName)</span></span><br></code></pre></td></tr></table></figure><p>构造方法5：直接将一个字符串作为一个输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Scanner</span><span class="hljs-params">(String source)</span></span><br></code></pre></td></tr></table></figure><p>普通方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>public boolean hasNext()</td><td>此方法被重载很多次，判断是否有任意指定的数据</td></tr><tr><td>public String next()</td><td>获取当前输入的数据</td></tr><tr><td>public Xxx nextXxx()</td><td>此方法被重载很多次，获取任意指定类型的数据</td></tr><tr><td>public Scanner useDelimiter</td><td>设置读取分隔符</td></tr></tbody></table><p>案例：实现键盘数据输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.scanner;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">//实现键盘数据输入</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestScannerDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要发送的信息：&quot;</span>);<br>        <span class="hljs-keyword">if</span>(scanner.hasNext())&#123;<span class="hljs-comment">//有数据输入</span><br>            String value=scanner.next();<br>            System.out.println(<span class="hljs-string">&quot;【回显输入数据】&quot;</span>+value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果像传统的方式使用BufferedReader类实现键盘数据的输入处理，那么整个的程序逻辑需要进行大量的流的类型转换操作，而Scanner代码的结构上会更加简单。</p><p>Scanner类还可以实现各种指定数据类型的判断以及接收操作，包括：int，double，BigInteger，BigDecimal等。</p><p>案例：通过程序实现整型数据的输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(scanner.hasNextInt())&#123;<span class="hljs-comment">//有数据输入</span><br>            <span class="hljs-keyword">int</span> value=scanner.nextInt();<br>           System.out.println(<span class="hljs-string">&quot;【回显输入数据】&quot;</span>+value);<br>&#125;<br></code></pre></td></tr></table></figure><p>也支持持有正则表达式的验证处理输入操作，只有满足指定正则的规定，那么才可以实现正确的数据输入。</p><p>案例：Scanner正则处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(scanner.hasNext(<span class="hljs-string">&quot;\\w+@\\w+\\.\\w+&quot;</span>))&#123;<br>     String value=scanner.next(<span class="hljs-string">&quot;\\w+@\\w+\\.\\w+&quot;</span>);<br>     System.out.println(<span class="hljs-string">&quot;【回显输入数据】&quot;</span>+value);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210521130349108.png" alt="image-20210521130349108" style="zoom:67%;"><p>以上的Scanner也可以结合文件流的方式进行文佳数据的读取，但是在进行文件数据读取的时候一定要注意设置好相应的读取分隔符（默认只要是空格或者换行都描述分隔符）。</p><p>案例：采用自定义分隔符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">scanner.useDelimiter(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//使用换行作为读取分隔符</span><br></code></pre></td></tr></table></figure><p>结论：</p><ul><li>如果要通过程序实现数据的输出，那么一定要选择使用PrintWriter/PrintStream；</li><li>如果程序要实现数据内容的输入，最新做法是用Scanner，而如果Scanner不好用则建议使用BUfferedReader类实现数据的读取。</li></ul><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>按照整个Java之中对象的存储结构来讲，所有实例化对象一定都会保存在堆内存之中，但是存在IO的处理支持，那么就有可能会出现针对于对象实例的输入和输出。</p><img src="/2021/05/02/Javaio/image-20210521162204716.png" alt="image-20210521162204716" style="zoom:80%;"><p>序列化：将内存之中的实例化对象内容取出，并且将其直接转换为二进制的数据流，在转换完成后，其他的程序就可以通过这个二进制的数据内容直接进行该对象的还原处理。</p><p><strong>Serializable接口</strong></p><p>不是所有类的对象都可以序列化操作，这个类需要实现Serializable接口才能进行序列化操作，这是一个标识性接口，不存在任何方法，表示一种处理能力。</p><p>案例：定义序列化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>在序列化定义中，为保证反序列化操作的正确性，一般会在类中去定义一个序列化版本编号，版本编号常量名称固定为“serialVersionUID”，会为你自动分配。</p><p><strong>序列化与反序列化</strong></p><p>虽然Book类实现序列化的标记接口，但是具体序列化的操作形式是由JDK决定，序列化之后的数据属于二进制内容，对于二进制的数据必须采用正确的方式才可以实现数据的内容的读取（反序列化），实现序列化与反序列化操作的类：ObjectOutputStream、ObjectInputStream。</p><hr><p>ObjectOutputStream类定义结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectOutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OutputStream</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectOutput</span>,<span class="hljs-title">ObjectStreamConstans</span></span><br></code></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ObjectOutputStream</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException</span><br></code></pre></td></tr></table></figure><p>操作方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException</span><br></code></pre></td></tr></table></figure><hr><p>ObjectInputStream类定义结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InputStream</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectInput</span>,<span class="hljs-title">ObjectStreamConstans</span></span><br></code></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException</span><br></code></pre></td></tr></table></figure><p>操作方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title">readObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException,ClassNotFoundException</span><br></code></pre></td></tr></table></figure><hr><p>实际开发，项目的序列化和反序列化处理操作未必会像当前给定的完整的程序代码的方式执行，而是会有一些辅助性的技术容器帮助用户自动实现处理，所以了解原理即可。</p><p>案例：实现对象序列化的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.serialize;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">//对象序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSerializeDemo01</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> File BINARY_FILE=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;book.ser&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        serial(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;Java从入门到项目实战&quot;</span>,<span class="hljs-string">&quot;李兴华&quot;</span>,<span class="hljs-number">99.8</span>));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serial</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        ObjectOutputStream objectOutputStream=<span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(BINARY_FILE));<span class="hljs-comment">//文件序列化</span><br>        objectOutputStream.writeObject(object);<span class="hljs-comment">//序列化输出</span><br>        objectOutputStream.close();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<span class="hljs-comment">//本类的对象可以序列化处理</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String title, String author, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>        <span class="hljs-keyword">this</span>.author = author;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;【图片】名称：&quot;</span>+<span class="hljs-keyword">this</span>.title+<span class="hljs-string">&quot;\t作者：&quot;</span>+<span class="hljs-keyword">this</span>.author+<span class="hljs-string">&quot;\t价格：&quot;</span>+<span class="hljs-keyword">this</span>.price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>序列化之后的数据全部转为了二进制的数据内容，但是如果想要从这些二进制数据里面获取所需要的正确的对象信息，那么必须通过ObjectInputStream类实现相应的反序列化处理（不要破坏二进制文件）。</p><p>案例：实现反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.serialize;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSerializeDemo02</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> File BINARY_FILE=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:&quot;</span>+File.separator+<span class="hljs-string">&quot;com&quot;</span>+File.separator+<span class="hljs-string">&quot;book.ser&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(deserial());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">deserial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        ObjectInputStream objectInputStream=<span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(BINARY_FILE));<span class="hljs-comment">//对象输入流</span><br>        Object data=objectInputStream.readObject();<span class="hljs-comment">//反序列化对象</span><br>        objectInputStream.close();<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210521172924637.png" alt="image-20210521172924637" style="zoom:80%;"><p>此时的程序利用ObjectInputStream类中的readObject()方法读取了相关的数据内容，由于保存的文件方式和读取的方式相同，所以可以实现反序列化操作。</p><h2 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h2><p>通过之前的程序的代码可以清楚的发现，在进行序列化处理的时候实际上是将一个类对象中的所有属性内容实现了二进制的数据储存，但是如果说现在某些属性不希望被序列化下来，这时就可以考虑在这个属性上使用transient关键字进行定义。</p><p>提示：现在假如有一个描述订单的类，这个订单的类中对于商品的单价、名称以及数量都要求进行序列化保存，而对于商品的总价（商品单价*商品的数量）就没有被序列化的意义所在，所以才有了不希望被序列化传输。</p><p>案例：观察transient关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String author;<br></code></pre></td></tr></table></figure><img src="/2021/05/02/Javaio/image-20210521181257225.png" alt="image-20210521181257225" style="zoom:67%;"><p>实际上在Java里面对于序列化的处理机制有两种：全自动序列化管理（现在的就属于全自动化），另一种是手工实现序列化的管理，如果要是在手工实现的序列化操作中，就可以自己来决定哪些属性不要被序列化（序列化会占用带宽），但是这样开法难度高，所以才针对于自动序列化的处理支持提供了transient关键字。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA常用类库</title>
    <link href="/2021/04/28/javaclasslib/"/>
    <url>/2021/04/28/javaclasslib/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用类库"><a href="#Java常用类库" class="headerlink" title="Java常用类库"></a>Java常用类库</h1><h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h2><h3 id="认识StringBuffer类"><a href="#认识StringBuffer类" class="headerlink" title="认识StringBuffer类"></a>认识StringBuffer类</h3><p>​        StringBuffer是使用缓冲区的，本身也是操作字符串的，但是与String类不同，String类的内容一旦声明之后则不可改变，改变的只是其内存地址的指向，而StringBuffer中的内容是可以改变的。</p><p>​        对于StringBuffer而言，本身是一个具体的操作类，所以不能像String那样采用直接赋值的方式进行对象的实例化，必须通过构造方法完成。</p><h3 id="StringBuffer常用方法"><a href="#StringBuffer常用方法" class="headerlink" title="StringBuffer常用方法"></a>StringBuffer常用方法</h3><h4 id="append-字符串连接"><a href="#append-字符串连接" class="headerlink" title="append()字符串连接"></a>append()字符串连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//append()方法进行字符串连接操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer stringBuffer=<span class="hljs-keyword">new</span> StringBuffer();<span class="hljs-comment">//声明StringBuffer类</span><br>        stringBuffer.append(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//向StringBuffer中添加数据</span><br>        stringBuffer.append(<span class="hljs-string">&quot;\tworld&quot;</span>).append(<span class="hljs-string">&quot;!!!!&quot;</span>);<span class="hljs-comment">//可以连续调用append方法</span><br>        stringBuffer.append(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//添加一个转义字符</span><br>        stringBuffer.append(<span class="hljs-string">&quot;数字=&quot;</span>).append(<span class="hljs-number">1</span>).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        stringBuffer.append(<span class="hljs-string">&quot;字符=&quot;</span>).append(<span class="hljs-string">&#x27;C&#x27;</span>).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        stringBuffer.append(<span class="hljs-string">&quot;布尔=&quot;</span>).append(<span class="hljs-keyword">true</span>).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        System.out.println(stringBuffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StringBuffer中的内容可以修改，String不能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//数据修改</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer stringBuffer=<span class="hljs-keyword">new</span> StringBuffer();<span class="hljs-comment">//声明StringBuffer</span><br>        stringBuffer.append(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        fun(stringBuffer);<span class="hljs-comment">//传递stringBuffer内容</span><br>        System.out.println(stringBuffer);<br>        String string=<span class="hljs-keyword">new</span> String();<br>        string=<span class="hljs-string">&quot;Jay&quot;</span>;<br>        fun2(string);<span class="hljs-comment">//修改String中的内容</span><br>        System.out.println(string);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(StringBuffer s)</span></span>&#123;<span class="hljs-comment">//接受StringBuffer引用</span><br>        s.append(<span class="hljs-string">&quot;MLDN&quot;</span>).append(<span class="hljs-string">&quot;LiXingHua&quot;</span>);<span class="hljs-comment">//修改StringBuffer的内容</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(String s)</span></span>&#123;<br>        s=s+<span class="hljs-string">&quot;Chou&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210514100504736.png" alt="image-20210514100504736"></p><h4 id="insert-添加内容"><a href="#insert-添加内容" class="headerlink" title="insert()添加内容"></a>insert()添加内容</h4><p>使用insert()方法，在指定位置上为StringBuffer添加内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//insert()在任意位置处为StringBuffer添加内容</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer buffer=<span class="hljs-keyword">new</span> StringBuffer();<br>        buffer.append(<span class="hljs-string">&quot;world&quot;</span>);<br>        buffer.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;hello &quot;</span>);<span class="hljs-comment">//在第一个内容之前添加内容</span><br>        buffer.insert(buffer.length(),<span class="hljs-string">&quot; Java&quot;</span>);<span class="hljs-comment">//在最后添加内容</span><br>        System.out.println(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在StringBuffer中与String类非常类似的是都可以使用length()方法求出字符串的长度。</p><h4 id="reverse-字符串反转"><a href="#reverse-字符串反转" class="headerlink" title="reverse()字符串反转"></a>reverse()字符串反转</h4><p>直接使用reverse()方法就可以完成反转的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//字符串反转reverse</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer buf=<span class="hljs-keyword">new</span> StringBuffer();<br>        buf.append(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-comment">//实现字符串的反转，通过toString方法可以变为String类型</span><br>        String reverse = buf.reverse().toString();<br>        System.ot.println(reverse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="replace-内容替换"><a href="#replace-内容替换" class="headerlink" title="replace()内容替换"></a>replace()内容替换</h4><p>使用replace()方法可以对指定范围的内容进行替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//replace()指定范围进行内容替换</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo05</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer bf=<span class="hljs-keyword">new</span> StringBuffer();<br>        bf.append(<span class="hljs-string">&quot;Hello&quot;</span>).append(<span class="hljs-string">&quot;world！！&quot;</span>);<br>        <span class="hljs-comment">//将第（从0开始算）5到11的内容进行替换，替换为JayChou</span><br>        bf.replace(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;JayChou&quot;</span>);<br>        System.out.println(bf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="substring-字符串截取"><a href="#substring-字符串截取" class="headerlink" title="substring()字符串截取"></a>substring()字符串截取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//substring()方法实现字符串截取</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer bf=<span class="hljs-keyword">new</span> StringBuffer();<br>        bf.append(<span class="hljs-string">&quot;abcdefgh&quot;</span>);<br>        <span class="hljs-comment">//从0开始截取，到3（但不包括3）结束</span><br>        String str = bf.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="delete-删除字符串"><a href="#delete-删除字符串" class="headerlink" title="delete()删除字符串"></a>delete()删除字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//delete()删除指定范围的字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer sb=<span class="hljs-keyword">new</span> StringBuffer();<br>        sb.append(<span class="hljs-string">&quot;abc123&quot;</span>);<br>        String delete = sb.delete(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>).toString();<br>        System.out.println(delete);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="indexof-查找并返回"><a href="#indexof-查找并返回" class="headerlink" title="indexof()查找并返回"></a>indexof()查找并返回</h4><p>indexof()查找指定的内容是否存在，若存在则返回内容的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//indexOf查找指定的内容是否存在，若找到则返回内容的位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer sb=<span class="hljs-keyword">new</span> StringBuffer();<br>        sb.append(<span class="hljs-string">&quot;Hello&quot;</span>).append(<span class="hljs-string">&quot;World&quot;</span>);<br>        <span class="hljs-keyword">int</span> wo = sb.indexOf(<span class="hljs-string">&quot;Wo&quot;</span>);<br>        System.out.println(wo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StringBuffer类的应用"><a href="#StringBuffer类的应用" class="headerlink" title="StringBuffer类的应用"></a>StringBuffer类的应用</h4><p>观察以下的代码</p><p>以下的操作代码因为要频繁修改字符串中的内容，所以使用String根本就是不合理的，最好的做法是使用StringBuffer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.stringbuffer;<br><span class="hljs-comment">//StringBuffer的应用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferDemo09</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str1=<span class="hljs-string">&quot;LiXingHua&quot;</span>;<br>        <span class="hljs-keyword">long</span> t1=System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>            str1+=i;<br>        &#125;<br>        System.out.println(str1);<br>        System.out.println(<span class="hljs-string">&quot;String类型完成操作需要：&quot;</span>+(System.currentTimeMillis()-t1)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>        StringBuffer sb=<span class="hljs-keyword">new</span> StringBuffer();<br>        sb.append(<span class="hljs-string">&quot;LiXingHua&quot;</span>);<br>        <span class="hljs-keyword">long</span> t2=System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>            sb.append(i);<br>        &#125;<br>        System.out.println(sb);<br>        System.out.println(<span class="hljs-string">&quot;StringBuffer类型完成操作需要：&quot;</span>+(System.currentTimeMillis()-t2)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/2021/04/28/javaclasslib/image-20210514135106227.png" alt="image-20210514135106227"></p><p>凡是需要频繁修改字符串内容的时候，都需要使用StringBuffer类完成，而且在StringBuffer类中也提供了一些方法是String类中没有的，包括：delete()、insert()等等，这些方法需要时直接通过API文档去查。</p><hr><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p><strong>StringBuilder类</strong></p><p>定义结构上StringBuilder类与StringBuffer类是完全相同的，而且两个类定义的方法功能也是相同的（具体见api文档）。但是：StringBuffer类中定义的方法全部使用synchronized进行同步定义，而StringBuilder没有，所以StringBuilder是异步的。</p><p><strong>常见面试题：解释String、StringBuffer、StringBuilder的区别</strong></p><ol><li> String的内容一旦声明则不可改变，而StringBuffer和StringBuilder声明的内容可以改变。</li><li> StringBuffer类中提供的方法都是同步方法，属于安全的线程操作，而StringBuilder类中的方法都属于异步的方法，属于非线程安全的操作。</li></ol><hr><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><h3 id="认识Runtime类"><a href="#认识Runtime类" class="headerlink" title="认识Runtime类"></a>认识Runtime类</h3><p>​        Runtime：运行时，是一个封装了JVM进程的类。每一个Java程序实际上都是启动了一个JVM进程，那么每一个JVM进程都是对应这一个Runtime实例。</p><p>​        本类的定义中根本没有构造方法，构造方法被私有化了，则在此类中肯定有一个方法可以返回本类的实例化对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title">getRuntime</span><span class="hljs-params">()</span><span class="hljs-comment">//得到Runtime类的实例</span></span><br></code></pre></td></tr></table></figure><p>一旦取得实例之后，就可以操作相应方法了。</p><h3 id="得到JVM信息-3大方法"><a href="#得到JVM信息-3大方法" class="headerlink" title="得到JVM信息(3大方法)"></a>得到JVM信息(3大方法)</h3><p>每一个Runtime对象都是由JVM进行实例化的，所以可以直接通过此类获得</p><p><strong>maxMemory()得到最大内存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;JVM最大内存量：&quot;</span>+runtime.maxMemory());<br></code></pre></td></tr></table></figure><p><strong>freeMemory()取得空闲内存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;JVM空闲内存量：&quot;</span>+runtime.freeMemory());<br></code></pre></td></tr></table></figure><p><strong>gc()垃圾收集，释放空间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">runtime.gc();<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.runtime;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRuntimeJVM</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//通过Runtime类的静态方法进行实例化操作</span><br>        Runtime runtime=Runtime.getRuntime();<br>        <span class="hljs-comment">//观察最大的内存，根据机器的不同，环境也有所不同</span><br>        System.out.println(<span class="hljs-string">&quot;JVM最大内存量：&quot;</span>+runtime.maxMemory());<br>        <span class="hljs-comment">//取得程序运行的空闲内存</span><br>        System.out.println(<span class="hljs-string">&quot;JVM空闲内存量：&quot;</span>+runtime.freeMemory());<br>        String str=<span class="hljs-string">&quot;Hello&quot;</span>+<span class="hljs-string">&quot;World&quot;</span>+<span class="hljs-string">&quot;什么是&quot;</span>+<span class="hljs-string">&quot;快乐星球&quot;</span>+<span class="hljs-string">&quot;快点占用内存&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            str+=i;<br>        &#125;<br>        System.out.println(str);<br>        System.out.println(<span class="hljs-string">&quot;操作后的JVM空闲内存量===&quot;</span>+runtime.freeMemory());<br>        <span class="hljs-comment">//进行垃圾收集，释放空间</span><br>        runtime.gc();<br>        System.out.println(<span class="hljs-string">&quot;垃圾回收后的JVM空闲内存量=&quot;</span>+runtime.freeMemory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210514144633851.png" alt="image-20210514144633851"></p><p><strong>注意：</strong></p><p>一般情况下使用runtime.gc()进行垃圾收集，释放空间之后JVM的空闲内存量应该是变大的，但是本案例中确实减小了。这是为什么呢？</p><p>​        这是因为垃圾回收是JVM自动执行的，什么时候回收，它会自己判断，就算我们调用了Rumtime的gc()方法，也仅仅是建议JVM去进行垃圾回收，并不保证一定执行，或者马上执行，有可能什么事情都没有发生，并且手动调用了Rumtime的gc()方法可能会引起freeMemory()返回值增大，这点可以从源码注释里面看到。</p><h3 id="Runtime与Process类"><a href="#Runtime与Process类" class="headerlink" title="Runtime与Process类"></a>Runtime与Process类</h3><p>使用Runtime类运行本机的可执行程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">runtime.exec(<span class="hljs-string">&quot;notepad.exe&quot;</span>);<span class="hljs-comment">//调用本机程序记事本</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">destroy();<span class="hljs-comment">//结束此进程</span><br></code></pre></td></tr></table></figure><p>案例：调用本机记事本程序5秒后再自动关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.runtime;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-comment">//调用本机记事本程序5秒后再自动关闭</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRuntimeProcess</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runtime runtime=Runtime.getRuntime();<br>        Process p=<span class="hljs-keyword">null</span>;<span class="hljs-comment">//定义进程变量</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            p=runtime.exec(<span class="hljs-string">&quot;notepad.exe&quot;</span>);<span class="hljs-comment">//调用本机程序记事本</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<span class="hljs-comment">//打印异常信息</span><br>        &#125;<span class="hljs-keyword">try</span>&#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<span class="hljs-comment">//设置线程暂停5000毫秒</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        p.destroy();<span class="hljs-comment">//结束此进程</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Runtime类本身就是单态设计的一种应用，因为在整个JVM中只存在一个Runtime类的对象，可以使用Runtime类取得JVM的系统信息，或者使用gc()方法释放掉垃圾空间，还可以使用此类运行本机的程序。</p><h2 id="国际化程序"><a href="#国际化程序" class="headerlink" title="国际化程序"></a>国际化程序</h2><h3 id="什么是国际化程序"><a href="#什么是国际化程序" class="headerlink" title="什么是国际化程序"></a>什么是国际化程序</h3><p>国际化的操作就是指一个程序可以同时适应多门语言，即：程序使用者为哪个国家的人，则就以其国家的文字为显示的文字，通过国际化操作，让一个程序适应各个国家的语言要求。</p><p>对于各个国家来说，每个程序的代码是不会有任何变化的，只是其显示文字上有所差异而已。</p><p><strong>国际化程序实现思路</strong></p><p><img src="/2021/04/28/javaclasslib/image-20210514152504747.png" alt="image-20210514152504747"></p><p>程序根据不同的语言环境找到不同的资源文件，之后从资源文件中取出内容，资源文件中的内容都是以key-&gt;value的形式保存的，所以在读取的时候通过其key找到对应的value即可。</p><p>国际化程序必须通过：Locale类、ResourceBundle类、MessageFormat类完成。</p><h3 id="Locale类"><a href="#Locale类" class="headerlink" title="Locale类"></a>Locale类</h3><p>Locale表示的是本地，实际上使用的是一个ISO编码的封装类。对于各个国家来说都存在一个唯一的编码，那么这种编码就称为ISO编码，使用Locale可以指定好一个具体的国家编码。</p><p>例如：中国的编码：zh-CN，美国的编码：en-US，法语的编码：fr-FR</p><h3 id="ResourceBundle"><a href="#ResourceBundle" class="headerlink" title="ResourceBundle"></a>ResourceBundle</h3><p>此类是专门完成属性文件读取操作的，读取的时候直接指定文件名称即可（此文件名称一般不需要指定后缀，后缀统一为*.properties），可以根据Locale所指定的区域码来自动选择所需要的资源文件。</p><p>public static final ResourceBundle getBundle(String baseName)，此方法就是指定要操作的资源文件，此方法找到的是默认的操作系统的语言Locale对象。</p><p>public static final ResourceBundle getBundle(String baseName,Locale locale)，此方法也是指定操作的资源文件，并传入Locale对象。</p><p>创建Message.properties文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pro">info = HELLO<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.Locale;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><span class="hljs-comment">//资源文件中取得内容</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestResourceBundle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//找到资源文件，加入路径（从src开始）</span><br>        ResourceBundle resourceBundle=ResourceBundle.getBundle(<span class="hljs-string">&quot;com/zhao/Locale/Message&quot;</span>);<br>        <span class="hljs-comment">//根据key取得对应的value</span><br>        System.out.println(<span class="hljs-string">&quot;内容是：&quot;</span>+resourceBundle.getString(<span class="hljs-string">&quot;info&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java国际化程序实现"><a href="#Java国际化程序实现" class="headerlink" title="Java国际化程序实现"></a>Java国际化程序实现</h3><p>Locale类结合ResourceBundle类和资源文件一起完成java国际化程序的开发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.Locale;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><span class="hljs-comment">//国际化程序的实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLocaleResourceBundle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//表示中国地区</span><br>        Locale zhLoc=<span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;zh&quot;</span>,<span class="hljs-string">&quot;CN&quot;</span>);<br>        <span class="hljs-comment">//表示美国地区</span><br>        Locale enLoc=<span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;en&quot;</span>,<span class="hljs-string">&quot;US&quot;</span>);<br>        <span class="hljs-comment">//表示法国地区</span><br>        Locale frLoc=<span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;fr&quot;</span>,<span class="hljs-string">&quot;FR&quot;</span>);<br>        <span class="hljs-comment">//找到各个文字的属性文件</span><br>        ResourceBundle zhrb=ResourceBundle.getBundle(<span class="hljs-string">&quot;com/zhao/Locale/Message&quot;</span>,zhLoc);<br>        ResourceBundle enrb=ResourceBundle.getBundle(<span class="hljs-string">&quot;com/zhao/Locale/Message&quot;</span>,enLoc);<br>        ResourceBundle frrb=ResourceBundle.getBundle(<span class="hljs-string">&quot;com/zhao/Locale/Message&quot;</span>,frLoc);<br>        System.out.println(<span class="hljs-string">&quot;中文：&quot;</span>+zhrb.getString(<span class="hljs-string">&quot;info&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;英文：&quot;</span>+enrb.getString(<span class="hljs-string">&quot;info&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;法文：&quot;</span>+frrb.getString(<span class="hljs-string">&quot;info&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/2021/04/28/javaclasslib/image-20210514173336473.png" alt="image-20210514173336473"></p><h3 id="处理动态文本"><a href="#处理动态文本" class="headerlink" title="处理动态文本"></a>处理动态文本</h3><p>略</p><h3 id="使用类代替资源文件"><a href="#使用类代替资源文件" class="headerlink" title="使用类代替资源文件"></a>使用类代替资源文件</h3><p>略</p><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><h3 id="认识System类"><a href="#认识System类" class="headerlink" title="认识System类"></a>认识System类</h3><p><strong>具体内容：</strong></p><p>System.out.println()本身就是一个系统提供好的类。而且out.println()方法也是经常使用到的。System类是一些与系统相关的属性和方法的集合在System类中所有的属性都是静态的。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>取得以毫秒为单位的当前时间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.currentTimeMills();<br></code></pre></td></tr></table></figure><ol start="2"><li>取得本机的系统属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//取得本机所有系统属性</span><br>        System.getProperties().list(System.out);<br>        <span class="hljs-comment">//取得固定信息</span><br>        System.out.println(<span class="hljs-string">&quot;系统版本：&quot;</span>+System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>)+System.getProperty(<span class="hljs-string">&quot;os.version&quot;</span>)<br>                           +System.getProperty(<span class="hljs-string">&quot;os.arch&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;系统用户：&quot;</span>+System.getProperty(<span class="hljs-string">&quot;user.name&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户目录：&quot;</span>+System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户工作目录：&quot;</span>+System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br></code></pre></td></tr></table></figure><ol start="3"><li>垃圾对象的回收问题</li></ol><p>一个对象如果不使用，则肯定要等待进行垃圾收集，垃圾收集可以自动调用也可以手工调用，手工调用的时候就是调用System.gc()或者Runtime.getRuntime.gc()。</p><p>但是，如果一个对象在回收之前需要做一些收尾的工作，则必须覆写Object类中的protected void finalize() throws Throwable在对象被回收之前进行调用，以处理对象回收前的若干操作，例如释放资源等等。</p><p>注意：finalize()现在已经弃用。</p><hr><h2 id="日期操作类"><a href="#日期操作类" class="headerlink" title="日期操作类"></a>日期操作类</h2><h3 id="Date、Calendar"><a href="#Date、Calendar" class="headerlink" title="Date、Calendar"></a>Date、Calendar</h3><p>Date类是一个较为常用的类，但是其操作的日期格式会有一些不符合个人的要求，而Calendar可以根据需要取得时间。</p><p>Date类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.date;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date date=<span class="hljs-keyword">new</span> Date();<br>        System.out.println(<span class="hljs-string">&quot;当前日期为:&quot;</span>+date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210514202121501.png" alt="image-20210514202121501"></p><p>Calendar类（自定义日期显示）</p><p>使用此类可以直接将日期精确到毫秒。API文档：public abstract class Calendar extends Object…可以看出Calendar是一个抽象类，无法直接使用。需要利用对象多态性的概念，通过向上的转型关系实例化本类对象。</p><p>通过Calendar类取得一个完整的日期，使用其子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.date;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br><span class="hljs-comment">//自定义日期</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCalendar</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Calendar calendar=<span class="hljs-keyword">new</span> GregorianCalendar();<br>        System.out.println(<span class="hljs-string">&quot;YEAR: &quot;</span> + calendar.get(Calendar.YEAR));<span class="hljs-comment">//年</span><br>        System.out.println(<span class="hljs-string">&quot;MONTH: &quot;</span> + (calendar.get(Calendar.MONTH)+<span class="hljs-number">1</span>));<span class="hljs-comment">//月份要加1才正确</span><br>        System.out.println(<span class="hljs-string">&quot;DAY_OF_MONTH: &quot;</span> + calendar.get(Calendar.DAY_OF_MONTH));<span class="hljs-comment">//日</span><br>        System.out.println(<span class="hljs-string">&quot;HOUR_OF_DAY: &quot;</span> + calendar.get(Calendar.HOUR_OF_DAY));<span class="hljs-comment">//时</span><br>        System.out.println(<span class="hljs-string">&quot;MINUTE: &quot;</span> + calendar.get(Calendar.MINUTE));<span class="hljs-comment">//分</span><br>        System.out.println(<span class="hljs-string">&quot;SECOND: &quot;</span> + calendar.get(Calendar.SECOND));<span class="hljs-comment">//秒</span><br>        System.out.println(<span class="hljs-string">&quot;MILLISECOND: &quot;</span> + calendar.get(Calendar.MILLISECOND));<span class="hljs-comment">//毫秒</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210514203942032.png" alt="image-20210514203942032"></p><p>注意：月份需要加1</p><h3 id="DateFormat、SimpleDateFormat"><a href="#DateFormat、SimpleDateFormat" class="headerlink" title="DateFormat、SimpleDateFormat"></a>DateFormat、SimpleDateFormat</h3><h4 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h4><p>此类是一个日期的格式化类，专门格式化日期的操作。</p><ul><li>得到日期的DateFormat对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateFormat <span class="hljs-title">getDateInstance</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><ul><li>得到日期时间的DateFormat对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateFormat <span class="hljs-title">getDateTimeInstance</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.date;<br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-comment">//测试DateFormat类格式化日期</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDateFormat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DateFormat df1=<span class="hljs-keyword">null</span>;<br>        DateFormat df2=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//得到日期的DateFormat对象</span><br>        df1 = DateFormat.getDateInstance();<br>        <span class="hljs-comment">//得到日期时间的DateFormat对象</span><br>        df2=DateFormat.getDateTimeInstance();<br>        <span class="hljs-comment">//按照日期格式化</span><br>        System.out.println(<span class="hljs-string">&quot;Date:&quot;</span>+df1.format(<span class="hljs-keyword">new</span> Date()));<br>        <span class="hljs-comment">//按照日期时间格式化</span><br>        System.out.println(<span class="hljs-string">&quot;Date:&quot;</span>+df2.format(<span class="hljs-keyword">new</span> Date()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515095803426.png" alt="image-20210515095803426"></p><p>上面是直接使用Date类的显示进行合理的格式化操作。此时采用的是默认的格式化操作，也可以通过Locale对象指定要显示的区域，如：指定区域为美国。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到日期的DateFormat对象</span><br>        df1 = DateFormat.getDateInstance(DateFormat.YEAR_FIELD,<span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;en&quot;</span>,<span class="hljs-string">&quot;US&quot;</span>));<br>        <span class="hljs-comment">//得到日期时间的DateFormat对象</span><br>        df2=DateFormat.getDateTimeInstance(DateFormat.YEAR_FIELD,DateFormat.ERA_FIELD,<span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;en&quot;</span>,<span class="hljs-string">&quot;US&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515100814431.png" alt="image-20210515100814431"></p><h4 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h4><p>此类的功能是完成日期的显示格式化的。例如，在开发中，可能会将一种日期格式转变为另一种日期格式，如下：</p><table><thead><tr><th align="center">标记和格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">yyyy</td><td align="center">4位，表示年</td></tr><tr><td align="center">MM</td><td align="center">2位，表示月</td></tr><tr><td align="center">dd</td><td align="center">2位，表示日</td></tr><tr><td align="center">HH</td><td align="center">2位，表示时</td></tr><tr><td align="center">mm</td><td align="center">2位，表示分</td></tr><tr><td align="center">ss</td><td align="center">2位，表示秒</td></tr><tr><td align="center">SSS</td><td align="center">3位，表示毫秒</td></tr></tbody></table><p>使用SimpleDateFormat时，在构造对象时传入匹配的模板。</p><ul><li>构造方法：public SimpleDateFormat(String pattern)</li><li>转换：public Date parse(String source) throws ParseException —&gt;此时取得的是全部时间数</li><li>格式化：public final String format(Date date) —&gt;将时间重新格式化成字符串显示</li></ul><p>案例：原始日期为：2021-5-15 10:11:45.335    ——&gt;    转换后：2021年5月15日 10点 11分 45秒 335毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.date;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-comment">//格式化日期</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSimpleDateFormat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String strDate=<span class="hljs-string">&quot;2021-5-15 10:11:45.335&quot;</span>;<br>        <span class="hljs-comment">//准备第一个模板，从字符串中提取出日期数字</span><br>        String pat1=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>;<br>        <span class="hljs-comment">//准备第二个模板，将提取后的日期数组变为指定的格式</span><br>        String pat2=<span class="hljs-string">&quot;yyyy年MM月dd日 HH时mm分ss秒SSS毫秒&quot;</span>;<br>        <span class="hljs-comment">//实例化模板对象</span><br>        SimpleDateFormat simpleDateFormat1=<span class="hljs-keyword">new</span> SimpleDateFormat(pat1);<br>        SimpleDateFormat simpleDateFormat2=<span class="hljs-keyword">new</span> SimpleDateFormat(pat2);<br>        Date d=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//将给定的字符串中的日期提取出来</span><br>            d=simpleDateFormat1.parse(strDate);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//日期变为新的格式</span><br>        System.out.println(simpleDateFormat2.format(d));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515104055474.png" alt="image-20210515104055474"></p><p>SimpleDateFormat类是DateFormat类的子类。一般情况下DateFormat类很少会使用，而都是用SimpleDateFormat类完成。</p><h4 id="Calendar、SimpleDateFormat进阶"><a href="#Calendar、SimpleDateFormat进阶" class="headerlink" title="Calendar、SimpleDateFormat进阶"></a>Calendar、SimpleDateFormat进阶</h4><p>案例1：取得系统时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.date;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br><span class="hljs-comment">//取得系统时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDateTime</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DateTime dateTime=<span class="hljs-keyword">new</span> DateTime();<br>        System.out.println(<span class="hljs-string">&quot;系统时间：&quot;</span>+ dateTime.getDate());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//以后直接通过此类可以取得日期时间</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTime</span></span>&#123;<br>    <span class="hljs-comment">//声明一个Calendar对象取得时间</span><br>    <span class="hljs-keyword">private</span> Calendar calendar=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//构造方法中直接实例化对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DateTime</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.calendar=<span class="hljs-keyword">new</span> GregorianCalendar();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//程序要频繁修改字符串</span><br>        StringBuffer buf=<span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-comment">//增加年</span><br>        buf.append(calendar.get(Calendar.YEAR)).append(<span class="hljs-string">&quot;年&quot;</span>);<br>        <span class="hljs-comment">//增加月</span><br>        buf.append(<span class="hljs-keyword">this</span>.addZero((calendar.get(Calendar.MONTH)+<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)).append(<span class="hljs-string">&quot;月&quot;</span>);<br>        <span class="hljs-comment">//增加日</span><br>        buf.append(<span class="hljs-keyword">this</span>.addZero(calendar.get(Calendar.DAY_OF_MONTH),<span class="hljs-number">2</span>)).append(<span class="hljs-string">&quot;日 &quot;</span>);<br>        buf.append(<span class="hljs-keyword">this</span>.addZero(calendar.get(Calendar.HOUR_OF_DAY),<span class="hljs-number">2</span>)).append(<span class="hljs-string">&quot;时&quot;</span>);<br>        buf.append(<span class="hljs-keyword">this</span>.addZero(calendar.get(Calendar.MINUTE),<span class="hljs-number">2</span>)).append(<span class="hljs-string">&quot;分&quot;</span>);<br>        buf.append(<span class="hljs-keyword">this</span>.addZero(calendar.get(Calendar.SECOND),<span class="hljs-number">2</span>)).append(<span class="hljs-string">&quot;秒&quot;</span>);<br>        buf.append(<span class="hljs-keyword">this</span>.addZero(calendar.get(Calendar.MILLISECOND),<span class="hljs-number">2</span>)).append(<span class="hljs-string">&quot;毫秒&quot;</span>);<br>        <span class="hljs-keyword">return</span> buf.toString();<br>    &#125;<br>    <span class="hljs-comment">//考虑到日期中存在前导0,所以在此处加上补零方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">addZero</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>        StringBuffer s=<span class="hljs-keyword">new</span> StringBuffer();<br>        s.append(num);<br>        <span class="hljs-comment">//如果长度不足，则继续补0</span><br>        <span class="hljs-keyword">while</span>(s.length()&lt;len)&#123;<br>            <span class="hljs-comment">//在第一个位置处补0</span><br>            s.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515133200805.png" alt="image-20210515133200805"></p><p>案例2：取得时间戳</p><p>例如时间为2021-05-15 13:30:50:443，其取得的时间戳为20210515133050443。</p><p>上述代码中去掉append(“XXX”)再调用就可以了，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">buf.append(calendar.get(Calendar.YEAR));<br></code></pre></td></tr></table></figure><hr><p>以上的程序已经取得了日期时间、中文的日期时间、时间戳，但是所有的操作都是比较麻烦，因为每一个地方还需要进行补零操作，所以，在直接使用Calendar类的时候虽然可以方便的将时间取得精确到毫秒，但是在对于取得完整日期的时候却不这么好使了。</p><h4 id="基于SimpleDateFormat类操作（重点）"><a href="#基于SimpleDateFormat类操作（重点）" class="headerlink" title="基于SimpleDateFormat类操作（重点）"></a>基于SimpleDateFormat类操作（重点）</h4><p>直接使用SimpleDateFormat类取得时间会比使用Calendar类更方便，<strong>且不需要再去补零操作</strong>，所以在开发中基本都会使用此方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.date;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDateTime02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DateTime02 dateTime=<span class="hljs-keyword">new</span> DateTime02();<br>        System.out.println(<span class="hljs-string">&quot;标准系统时间：&quot;</span>+ dateTime.getDate());<br>        System.out.println(<span class="hljs-string">&quot;中文系统时间：&quot;</span>+ dateTime.getDateComplete());<br>        System.out.println(<span class="hljs-string">&quot;时间戳：&quot;</span>+ dateTime.getDateStamp());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//以后直接通过此类可以取得日期时间</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTime02</span></span>&#123;<br>    <span class="hljs-comment">//声明一个Calendar对象取得时间</span><br>    <span class="hljs-keyword">private</span> SimpleDateFormat simpleDateFormat=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//构造方法中直接实例化对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.simpleDateFormat.format(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateComplete</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日HH时mm分ss秒SSS毫秒&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.simpleDateFormat.format(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateStamp</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMddHHmmssSSS&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.simpleDateFormat.format(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515135511369.png" alt="image-20210515135511369"></p><h2 id="Math与Random类"><a href="#Math与Random类" class="headerlink" title="Math与Random类"></a>Math与Random类</h2><h3 id="Math类中的数学操作函数"><a href="#Math类中的数学操作函数" class="headerlink" title="Math类中的数学操作函数"></a>Math类中的数学操作函数</h3><p>Math类表示数学操作，例如平方根，四舍五入等。这些方法都是静态的，直接通过Math调用即可。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.math;<br><span class="hljs-comment">//测试数学操作函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMath</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//Math类中都是静态方法，可直接使用</span><br>        System.out.println(<span class="hljs-string">&quot;9的平方根&quot;</span>+Math.sqrt(<span class="hljs-number">9.0</span>));<br>        System.out.println(<span class="hljs-string">&quot;两数最大值&quot;</span>+Math.max(<span class="hljs-number">11</span>,<span class="hljs-number">20</span>));<br>        System.out.println(<span class="hljs-string">&quot;两数最小值&quot;</span>+Math.min(<span class="hljs-number">11</span>,<span class="hljs-number">20</span>));<br>        System.out.println(<span class="hljs-string">&quot;2的3次方&quot;</span>+Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;四舍五入&quot;</span>+Math.round(<span class="hljs-number">33.6</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515141133617.png" alt="image-20210515141133617"></p><p>常用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.sqrt()<span class="hljs-comment">//计算平方</span><br>Math.cbrt()<span class="hljs-comment">//计算立方根</span><br>Math.hypot(x,y)<span class="hljs-comment">//计算 (x的平方+y的平方)的平方根</span><br>Math.ceil(x)<span class="hljs-comment">//就是返回比大且最接近的整数值</span><br>Math.floor(x)<span class="hljs-comment">//就是返回比小且最接近的整数值</span><br>Math.abs()<span class="hljs-comment">//求绝对值</span><br>Math.pow(a,b)<span class="hljs-comment">//计算a的b次方</span><br>Math.exp(x)<span class="hljs-comment">//计算e^x的值</span><br>Math.random()<span class="hljs-comment">//取得一个大于或者等于0.0小于不等于1.0的随机数[0,1)</span><br>Math.rint() <span class="hljs-comment">//四舍五入 返回double值</span><br>Math.round <span class="hljs-comment">//四舍五入 float时返回int值，double时返回long值</span><br>Math.nextUp(a)<span class="hljs-comment">// 返回比a大一点点的浮点数</span><br>Math.nextDown(a) <span class="hljs-comment">//返回比a小一点点的浮点数</span><br>Math.nextAfter(a,b)<span class="hljs-comment">// 返回a,b值之间与a相邻的浮点数 b可以比a小</span><br></code></pre></td></tr></table></figure><p>更多方法请到api文档中的Math类中去查看。</p><h3 id="使用Random类生成随机数"><a href="#使用Random类生成随机数" class="headerlink" title="使用Random类生成随机数"></a>使用Random类生成随机数</h3><p>Random类的主要功能是产生随机数，可以产生一个指定范围的随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.random;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-comment">//产生随机数</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRandom</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random random=<span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//设置产生的随机数不大于100</span><br>            System.out.print(random.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="NumberFormat类"><a href="#NumberFormat类" class="headerlink" title="NumberFormat类"></a>NumberFormat类</h2><h3 id="NumberFormat的基本使用"><a href="#NumberFormat的基本使用" class="headerlink" title="NumberFormat的基本使用"></a>NumberFormat的基本使用</h3><p>此类主要功能是完成数字格式化显示。</p><p>MessageFormat、DateFormat、NumberFormat是Format是哪个常用的子类，如果想进一步完成一个好的国际化程序，则肯定需要同时使用这三个类完成，根据不同的国家显示日期、货币等形式。</p><p><img src="/2021/04/28/javaclasslib/image-20210515152653612.png" alt="image-20210515152653612"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.numberfomat;<br><span class="hljs-keyword">import</span> java.text.NumberFormat;<br><span class="hljs-comment">//数字格式化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNumberFormat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        NumberFormat numberFormat=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//得到默认的数字格式显示</span><br>        numberFormat=NumberFormat.getInstance();<br>        System.out.println(<span class="hljs-string">&quot;格式化后的数字显示：&quot;</span>+numberFormat.format(<span class="hljs-number">1000000</span>));<br>        System.out.println(<span class="hljs-string">&quot;格式化后的数字显示：&quot;</span>+numberFormat.format(<span class="hljs-number">1000.345</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515152506816.png" alt="image-20210515152506816"></p><h3 id="DecimalFormat类"><a href="#DecimalFormat类" class="headerlink" title="DecimalFormat类"></a>DecimalFormat类</h3><p>是NumberFormat的子类，可以直接指定其显示的模板。</p><p>格式化模板：</p><p><img src="/2021/04/28/javaclasslib/image-20210515153057763.png" alt="image-20210515153057763"></p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.numberfomat;<br><span class="hljs-keyword">import</span> java.text.DecimalFormat;<br><span class="hljs-comment">//自定义格式化数字</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDecimalFormat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DecimalFormatDemo decimalFormat=<span class="hljs-keyword">new</span> DecimalFormatDemo();<br>        decimalFormat.format(<span class="hljs-string">&quot;###,###.###&quot;</span>,<span class="hljs-number">111222.34567</span>);<br>        decimalFormat.format(<span class="hljs-string">&quot;000,000.000&quot;</span>,<span class="hljs-number">111222.34567</span>);<br>        decimalFormat.format(<span class="hljs-string">&quot;###,###.### ￥&quot;</span>,<span class="hljs-number">111222.34567</span>);<br>        decimalFormat.format(<span class="hljs-string">&quot;000,000.000 ￥&quot;</span>,<span class="hljs-number">111222.34567</span>);<br>        decimalFormat.format(<span class="hljs-string">&quot;##,###%&quot;</span>,<span class="hljs-number">111222.34567</span>);<span class="hljs-comment">//使用百分数形式</span><br>        decimalFormat.format(<span class="hljs-string">&quot;00.###%&quot;</span>,<span class="hljs-number">111222.34567</span>);<span class="hljs-comment">//使用百分数形式</span><br>        decimalFormat.format(<span class="hljs-string">&quot;###,###\u2030&quot;</span>,<span class="hljs-number">111222.34567</span>);<span class="hljs-comment">//使用千分数形式</span><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecimalFormatDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">format</span><span class="hljs-params">(String pattern, <span class="hljs-keyword">double</span> value)</span></span>&#123;<br>        DecimalFormat decimalFormat=<span class="hljs-keyword">null</span>;<br>        decimalFormat=<span class="hljs-keyword">new</span> DecimalFormat(pattern);<br>        String string=decimalFormat.format(value);<br>        System.out.println(<span class="hljs-string">&quot;使用&quot;</span>+pattern+<span class="hljs-string">&quot;格式化数字&quot;</span>+value+<span class="hljs-string">&quot;:&quot;</span>+string);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515154554713.png" alt="image-20210515154554713"></p><h2 id="大数操作"><a href="#大数操作" class="headerlink" title="大数操作"></a>大数操作</h2><p>正常情况下一个整数最多只能放在long类型之中，但是如果超出范围就无法保存，所以为了解决这一问题，java就引入了两个大数的操作类。</p><ul><li>操作整型：BigInteger</li><li>操作小数：BigDecimal</li></ul><h3 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h3><p><img src="/2021/04/28/javaclasslib/image-20210515161613999.png" alt="image-20210515161613999"></p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.big;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-comment">//大数操作：BigInteger</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBigInteger</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BigInteger bi1=<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;123456789&quot;</span>);<br>        BigInteger bi2=<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;987654321&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;加法操作：&quot;</span>+bi2.add(bi1));<br>        System.out.println(<span class="hljs-string">&quot;减法操作：&quot;</span>+bi2.subtract(bi1));<br>        System.out.println(<span class="hljs-string">&quot;乘法操作：&quot;</span>+bi2.multiply(bi1));<br>        System.out.println(<span class="hljs-string">&quot;除法操作：&quot;</span>+ bi2.divide(bi1));<br>        System.out.println(<span class="hljs-string">&quot;最大数：&quot;</span>+bi2.max(bi1));<br>        System.out.println(<span class="hljs-string">&quot;最小数：&quot;</span>+bi2.min(bi1));<br>        BigInteger result[]= bi2.divideAndRemainder(bi1);<span class="hljs-comment">//除法操作</span><br>        System.out.println(<span class="hljs-string">&quot;商是：&quot;</span>+result[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;余数是：&quot;</span>+result[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515162908324.png" alt="image-20210515162908324"></p><h3 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h3><p>使用此类可以完成大的小数操作，而且也可以使用此类进行精确的四舍五入操作。</p><p><img src="/2021/04/28/javaclasslib/image-20210515163240009.png" alt="image-20210515163240009"></p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.big;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><span class="hljs-comment">//进行四舍五入的四则运算</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBigDecimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyMath myMath=<span class="hljs-keyword">new</span> MyMath();<br>        System.out.println(<span class="hljs-string">&quot;加法运算：&quot;</span>+myMath.round(myMath.add(<span class="hljs-number">10.345</span>,<span class="hljs-number">3.333</span>),<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;乘法运算：&quot;</span>+myMath.round(myMath.mul(<span class="hljs-number">10.345</span>,<span class="hljs-number">3.333</span>),<span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;除法运算：&quot;</span>+myMath.div(<span class="hljs-number">10.345</span>,<span class="hljs-number">3.333</span>,<span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;减法运算：&quot;</span>+myMath.round(myMath.sub(<span class="hljs-number">10.345</span>,<span class="hljs-number">3.333</span>),<span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMath</span></span>&#123;<br>    <span class="hljs-comment">//加法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d1,<span class="hljs-keyword">double</span> d2)</span></span>&#123;<br>        BigDecimal b1=<span class="hljs-keyword">new</span> BigDecimal(d1);<br>        BigDecimal b2=<span class="hljs-keyword">new</span> BigDecimal(d2);<br>        <span class="hljs-keyword">return</span> b1.add(b2).doubleValue();<br>    &#125;<br>    <span class="hljs-comment">//减法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d1,<span class="hljs-keyword">double</span> d2)</span></span>&#123;<br>        BigDecimal b1=<span class="hljs-keyword">new</span> BigDecimal(d1);<br>        BigDecimal b2=<span class="hljs-keyword">new</span> BigDecimal(d2);<br>        <span class="hljs-keyword">return</span> b1.subtract(b2).doubleValue();<br>    &#125;<br>    <span class="hljs-comment">//乘法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d1,<span class="hljs-keyword">double</span> d2)</span></span>&#123;<br>        BigDecimal b1=<span class="hljs-keyword">new</span> BigDecimal(d1);<br>        BigDecimal b2=<span class="hljs-keyword">new</span> BigDecimal(d2);<br>        <span class="hljs-keyword">return</span> b1.multiply(b2).doubleValue();<br>    &#125;<br>    <span class="hljs-comment">//除法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d1,<span class="hljs-keyword">double</span> d2,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>        BigDecimal b1=<span class="hljs-keyword">new</span> BigDecimal(d1);<br>        BigDecimal b2=<span class="hljs-keyword">new</span> BigDecimal(d2);<br>        <span class="hljs-comment">//return b1.divide(b2,len,BigDecimal.ROUND_HALF_UP).doubleValue();</span><br>        <span class="hljs-keyword">return</span> b1.divide(b2,len, RoundingMode.HALF_UP).doubleValue();<br>    &#125;<br>    <span class="hljs-comment">//进行四舍五入操作</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">round</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>        BigDecimal b1=<span class="hljs-keyword">new</span> BigDecimal(d);<br>        BigDecimal b2=<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//ROUND_HALF_UP是BigDecimal的一个常量，表示四舍五入的操作，已经不推荐使用了</span><br>        <span class="hljs-comment">//return b1.divide(b2,len,BigDecimal.ROUND_HALF_UP).doubleValue();</span><br>        <span class="hljs-keyword">return</span> b1.divide(b2,len,RoundingMode.HALF_UP).doubleValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515170941915.png" alt="image-20210515170941915"></p><p>值得注意的是：使用BigDecimal.ROUND_HALF_UP会出现这种情况</p><p><img src="/2021/04/28/javaclasslib/image-20210515171114781.png" alt="image-20210515171114781"></p><p>是因为从java9开始BigDecimal.ROUND_HALF_UP就不推荐使用了，所以需要将BigDecimal.ROUND_HALF_UP改为:RoundingMode.HALF_UP。</p><h2 id="对象克隆技术"><a href="#对象克隆技术" class="headerlink" title="对象克隆技术"></a>对象克隆技术</h2><p>java中支持的对象的克隆操作，直接使用Object类中的clone()方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span><br></code></pre></td></tr></table></figure><p>以上方法是被保护的类型，所以子类必须覆写此方法，而且覆写后应扩大访问权限，这样才能被外部调用。但是具体克隆方法的实现还是在Object类中，所以在覆写的方法中直接调用其clone()方法即可，而且在对象所在的类中必须实现Cloneable接口才可以完成对象的克隆操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.clone;<br><span class="hljs-comment">//对象的克隆操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClone</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Person p1=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;张三&quot;</span>);<br>        Person p2=(Person)p1.clone();<span class="hljs-comment">//克隆操作</span><br>        p2.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;原始对象：&quot;</span>+p1);<br>        System.out.println(<span class="hljs-string">&quot;克隆之后的对象：&quot;</span>+p2);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//必须实现克隆接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">//需要子类覆写clone()方法，并且扩大访问权限</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-comment">//具体的克隆操作由父类完成</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515174407884.png" alt="image-20210515174407884"></p><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>Arrays类是数组的操作类，主要功能是实现数组元素的查找，数组内容的填充、排序等。</p><p>Arrays类的常用方法：</p><p><img src="/2021/04/28/javaclasslib/image-20210515174905943.png" alt="image-20210515174905943"></p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.arrays;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//使用Arrays类操作数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestArrays</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;;<br>        Arrays.sort(temp);<br>        System.out.println(<span class="hljs-string">&quot;排序后的数组：&quot;</span>+Arrays.toString(temp));<br>        System.out.println(<span class="hljs-string">&quot;元素’3‘的位置在：&quot;</span>+Arrays.binarySearch(temp,<span class="hljs-number">3</span>));<br>        Arrays.fill(temp,<span class="hljs-number">3</span>);<span class="hljs-comment">//填充数组</span><br>        System.out.println(<span class="hljs-string">&quot;数据填充：&quot;</span>+Arrays.toString(temp));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515175749100.png" alt="image-20210515175749100"></p><h2 id="比较器（自定义比较）"><a href="#比较器（自定义比较）" class="headerlink" title="比较器（自定义比较）"></a>比较器（自定义比较）</h2><h3 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h3><p>  Arrays类中的sort()方法存在一个针对于对象数组排序的操作支持，但此方法需结合比较器使用。所以比较器主要是进行对象数组排序时使用。</p><p>使用此方法排序需实现Comparable接口，此接口就是用于指定对象排序规则的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(T o)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>compareTo方法返回值为int，只能是以下3种：</p><ul><li>返回值为1：表示大于；</li><li>返回值为-1：表示小于；</li><li>返回值为0：表示等于。</li></ul><p>String、Integer等类都实现了Comparable接口，可以直接利用Arrays.sort()方法进行排序操作。</p><p>案例：学生类（姓名，年龄，成绩），按成绩由高到低排序，成绩相等时年龄由低到高排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.comparable;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestComparable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student student[]=&#123;<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">90</span>),<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;吕六&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-number">66</span>),<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">83</span>),<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">17</span>,<span class="hljs-number">83</span>)&#125;;<br>        Arrays.sort(student);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; student.length; i++) &#123;<br>            System.out.println(student[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> score;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">float</span> score)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.score&gt;o.score)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.score&lt;o.score)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.age&lt;o.age)&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.age&gt;o.age)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515210016765.png" alt="image-20210515210016765"></p><h3 id="分析比较器的排序原理"><a href="#分析比较器的排序原理" class="headerlink" title="分析比较器的排序原理"></a>分析比较器的排序原理</h3><p>Comparable接口实现排序的排序过程也就是数据结构中的二叉树的排序方法，即通过二叉树进行排序，然后利用中序遍历的方式把内容依次读取出来。</p><p>二叉树排序基本原理：将第一个内容作为根节点保存，如果后面的值比根节点的值小，则放在根节点的左子树；如果后面的值比根节点的值大，则放在根节点的右子树。</p><img src="/2021/04/28/javaclasslib/image-20210515211035540.png" alt="image-20210515211035540" style="zoom: 50%;"><p>中序遍历原理：左子树—&gt;根节点—&gt;右子树的方式取出</p><p>排序后为：1,3,5,8,9,10</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.comparable;<br><span class="hljs-comment">//分析比较器的原理，基于Comparable接口实现的二叉树操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBinaryTree</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BinaryTree bt=<span class="hljs-keyword">new</span> BinaryTree();<br>        bt.add(<span class="hljs-number">8</span>);<br>        bt.add(<span class="hljs-number">3</span>);<br>        bt.add(<span class="hljs-number">3</span>);<br>        bt.add(<span class="hljs-number">10</span>);<br>        bt.add(<span class="hljs-number">9</span>);<br>        bt.add(<span class="hljs-number">1</span>);<br>        bt.add(<span class="hljs-number">5</span>);<br>        bt.add(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;排序后的结果：&quot;</span>);<br>        bt.print();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;     <span class="hljs-comment">//声明一个结点类</span><br>        <span class="hljs-keyword">private</span> Comparable data;    <span class="hljs-comment">//保存具体的内容</span><br>        <span class="hljs-keyword">private</span> Node left;      <span class="hljs-comment">//保存左子树</span><br>        <span class="hljs-keyword">private</span> Node right;    <span class="hljs-comment">//保存右子树</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(Node newNode)</span></span>&#123;<br>            <span class="hljs-comment">//确定是要放在左子树还是右子树</span><br>            <span class="hljs-keyword">if</span>(newNode.data.compareTo(<span class="hljs-keyword">this</span>.data)&lt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.left==<span class="hljs-keyword">null</span>)&#123;    <span class="hljs-comment">//放在左子树</span><br>                    <span class="hljs-keyword">this</span>.left=newNode;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">this</span>.left.addNode(newNode);<br>                &#125;<br>            &#125;<span class="hljs-keyword">if</span>(newNode.data.compareTo(<span class="hljs-keyword">this</span>.data)&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.right==<span class="hljs-keyword">null</span>)&#123;      <span class="hljs-comment">//放在右子树</span><br>                    <span class="hljs-keyword">this</span>.right=newNode;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">this</span>.right.addNode(newNode);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//输出时采用中序遍历</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printNode</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.left!=<span class="hljs-keyword">null</span>)&#123;    <span class="hljs-comment">//先输出左子树</span><br>                <span class="hljs-keyword">this</span>.left.printNode();<br>            &#125;<br>            System.out.print(<span class="hljs-keyword">this</span>.data+<span class="hljs-string">&quot;\t&quot;</span>);   <span class="hljs-comment">//再输出根节点</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.right!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">this</span>.right.printNode();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node root;      <span class="hljs-comment">//根元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Comparable data)</span></span>&#123;<br>        Node newNode=<span class="hljs-keyword">new</span> Node();    <span class="hljs-comment">//每传入一个新的内容就声明一个根节点</span><br>        newNode.data=data;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            root=newNode;       <span class="hljs-comment">//如果是第一个元素，就设置为根元素</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            root.addNode(newNode);  <span class="hljs-comment">//确定结点是放在左子树还是右子树</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//输出节点</span><br>        <span class="hljs-keyword">this</span>.root.printNode();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2021/04/28/javaclasslib/image-20210515213858349.png" alt="image-20210515213858349"></p><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p>如果一个类已经开发完成，但是在建立初期未实现Comparable接口，则无法进行对象排序操作。此时就出现Comparator接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compara</span><span class="hljs-params">(T o1,T o2)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此Compara()方法需要接收两个对象，其返回值依然是：0、-1、1。</p><p>但是，此接口需要单独指定好一个比较器的比较规则类才可以完成数字排序。</p><p>案例：学生类（姓名，年龄）按照年龄排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.comparable;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">//比较器2：Comparator实现对学生类的按年龄排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestComparator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Students students[]=&#123;<span class="hljs-keyword">new</span> Students(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">33</span>),<span class="hljs-keyword">new</span> Students(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">21</span>),<span class="hljs-keyword">new</span> Students(<span class="hljs-string">&quot;吕六&quot;</span>,<span class="hljs-number">15</span>),<span class="hljs-keyword">new</span> Students(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">26</span>)&#125;;<br>        Arrays.sort(students,<span class="hljs-keyword">new</span> StudentsComparator());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br>            System.out.println(students[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义学生类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Students</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//覆写equals()方法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>==obj)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">if</span>(!(obj <span class="hljs-keyword">instanceof</span> Student))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        Students students=(Students)obj;<br>        <span class="hljs-keyword">if</span>(students.name.equals(<span class="hljs-keyword">this</span>.name)&amp;&amp;students.age==<span class="hljs-keyword">this</span>.age)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Students</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Students&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义比较规则</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentsComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Students</span>&gt;</span>&#123;<span class="hljs-comment">//实现比较器接口</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Students o1, Students o2)</span> </span>&#123;  <span class="hljs-comment">//为学生类定义比较规则</span><br>        <span class="hljs-keyword">if</span>(o1.equals(o2))&#123;      <span class="hljs-comment">//如果相等，则返回0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o1.getAge()&gt;o2.getAge())&#123;  <span class="hljs-comment">//按年龄比较</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/04/28/javaclasslib/image-20210515220616455.png" alt="image-20210515220616455" style="zoom: 67%;float:left"><p>从结果可看出，Comparator和Comparable两个接口都可以实现相同的排序功能，但是与Comparable接口相比，Comparator接口明显是一种补救的做法。所以，建议优先使用Comparable接口进行排序操作。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><hr><p><strong>常见面试题：请解释Comparable和Comparator的区别。</strong></p><ol><li>如果对象数组要进行排序，那么必须设置排序规则，可以使用Comparable或者Comparator接口实现。</li><li>Comparable是在一个类定义时实现的接口。这样，此类的对象数组就可以进行排序，Comparable接口下定义了一个compareTo()的方法。</li><li>Comparator是专门定义一个指定类的比较规则，属于挽救的比较操作，里面有compare()、equals()两个方法。</li></ol><p>总结：Comparable定义时实现，有一个compareTo()方法；Comparator实施挽救要定义比较规则，有compare()、equals()两个方法。</p><hr><h2 id="观察者设计模式"><a href="#观察者设计模式" class="headerlink" title="观察者设计模式"></a>观察者设计模式</h2><p>什么叫观察者</p><p>购房者随时关注房屋价格，此时购房者就是观察者。每当被观察者信息被更新（房屋价格变化），就会自动调用update(Observable o,Object arg)方法。 </p><p>观察者模式实现</p><p>Java9弃用Observable类和Observer接口。</p><p>弃用原因：</p><p>他们没有为应用程序提供足够丰富的事件模型。例如，他们只能支持某些更改的概念，但不传达有关更改的任何信息。</p><p>不可序列化-因为，Observable不实现可序列化。因此，您既不能序列化Observable也不能对其子类进行序列化。</p><p>没有线程安全-方法可以被其子类覆盖，并且事件通知可以以不同的顺序发生，并且可能在不同的线程上发生，这足以破坏任何“线程安全”。</p><p>并且大多数问题都具有修复的复杂性，但仍然“未解决”或没有积极的发展，这就是不推荐使用的原因。</p><p>所以这里就不写了，见23中常见设计模式。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="认识正则表达式"><a href="#认识正则表达式" class="headerlink" title="认识正则表达式"></a>认识正则表达式</h3><p>正则表达式可以方便的对数据进行匹配，可以执行更加复杂的字符串验证、拆分、替换功能。</p><p>验证字符串是否由数字组成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.regularexpression;<br><br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-comment">//正则表达式验证字符串是否由数字组成</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRegex</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str=<span class="hljs-string">&quot;123456kk789&quot;</span>;<br>        <span class="hljs-keyword">boolean</span> flag=<span class="hljs-keyword">true</span>;  <span class="hljs-comment">//定义一个标记变量</span><br>        <span class="hljs-keyword">char</span> c[]=str.toCharArray();<span class="hljs-comment">//字符串变为字符数组</span><br>        <br>        <span class="hljs-comment">//常规方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c.length; i++) &#123;<span class="hljs-comment">//循环依次判断</span><br>            <span class="hljs-keyword">if</span>(c[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                flag=<span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;是由数字组成！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不是由数字组成！！&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>        <span class="hljs-comment">//使用正则表达式</span><br>        <span class="hljs-keyword">if</span>(Pattern.compile(<span class="hljs-string">&quot;[0-9]+&quot;</span>).matcher(str).matches())&#123;<br>            System.out.println(<span class="hljs-string">&quot;是由数字组成！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;不是由数字组成！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常规方法：将字符串拆分，然后一个个的进行比较验证。但是这样麻烦，而且现在只是验证是否由数字组成，如果更加复杂的呢？</p><p>正则表达式：完成相同的功能操作代码更加简单。</p><h3 id="Pattern类和Matcher类"><a href="#Pattern类和Matcher类" class="headerlink" title="Pattern类和Matcher类"></a>Pattern类和Matcher类</h3><p>这两个类为正则的核心操作类。</p><p>常用正则规则：</p><img src="/2021/04/28/javaclasslib/image-20210516153659293.png" alt="image-20210516153659293" style="zoom: 67%;float:left"><p>数量表示：X表示一组规范</p><p><img src="/2021/04/28/javaclasslib/image-20210516154451605.png" alt="image-20210516154451605"></p><p>逻辑运算符：X,Y表示一组规范</p><p><img src="/2021/04/28/javaclasslib/image-20210516154555406.png" alt="image-20210516154555406"></p><p>以上正则，如果想要驱动起来，则必须依靠Parttern类和Macher类。</p><p>Pattern主要是表示一个规则的意思，即：正则表达式的规则需要在Pattern类中使用。</p><p>Matcher类主要表示使用Pattern指定好的验证规则。</p><p>Pattern类的常用方法：</p><p><img src="/2021/04/28/javaclasslib/image-20210516160615367.png" alt="image-20210516160615367"></p><p>本类中没有明确的构造方法可以使用，说明构造方法私有化了，则可以直接从Pattern类中取得本类的实例。</p><p>指定好操作的正则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Pattern <span class="hljs-title">compile</span><span class="hljs-params">(String regex)</span></span><br></code></pre></td></tr></table></figure><p>可以为Matcher类实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Matcher <span class="hljs-title">matcher</span><span class="hljs-params">(CharSequence input)</span></span><br></code></pre></td></tr></table></figure><p>拆分：String中也存在拆分操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String[] split(CharSequence input)<br></code></pre></td></tr></table></figure><p>Matcher类常用方法：</p><p><img src="/2021/04/28/javaclasslib/image-20210516161301530.png" alt="image-20210516161301530"></p><p>进行字符串的验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matchers</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>字符串替换：与String中的相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceAll</span><span class="hljs-params">(String replacement)</span></span><br></code></pre></td></tr></table></figure><p>案例1：验证一个字符串是否是合法的日期格式</p><table><thead><tr><th align="center">日期</th><th align="center">1983        -       07         -        27</th></tr></thead><tbody><tr><td align="center">格式</td><td align="center">四位数字     两位数字    两位数字</td></tr><tr><td align="center">正则</td><td align="center">\d{4}     -      \d{2}       -       \d{2}</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.regularexpression;<br><br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-comment">//验证一个字符串是否是合法的日期格式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPatternMatcher</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str=<span class="hljs-string">&quot;1983-07-27&quot;</span>;<br>        String pat=<span class="hljs-string">&quot;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;&quot;</span>;<br>        Pattern p=Pattern.compile(pat);<br>        Matcher m=p.matcher(str);<br>        <span class="hljs-keyword">if</span>(m.matches())&#123;<br>            System.out.println(<span class="hljs-string">&quot;日期格式合法！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;日期格式不合法！！！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：按照字符串的数字将字符串拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.regularexpression;<br><br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPatternMatcher01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str=<span class="hljs-string">&quot;A1B22C333D4444E55555F&quot;</span>;<br>        String pat=<span class="hljs-string">&quot;\\d+&quot;</span>;      <span class="hljs-comment">//定义验证规则</span><br>        Pattern p=Pattern.compile(pat);<span class="hljs-comment">//实例化Pattern类</span><br>        String s[]=p.split(str);    <span class="hljs-comment">//进行字符串拆分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>            System.out.print(s[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例3：将全部数字替换成”_”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.regularexpression;<br><br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPatternMatcher02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str=<span class="hljs-string">&quot;A1B22C333D4444E55555F&quot;</span>;<br>        String pat=<span class="hljs-string">&quot;\\d+&quot;</span>;      <span class="hljs-comment">//定义验证规则</span><br>        Pattern p=Pattern.compile(pat); <span class="hljs-comment">//实例化Pattern类</span><br>        Matcher m=p.matcher(str);   <span class="hljs-comment">//实例化Matcher类</span><br>        String newString=m.replaceAll(<span class="hljs-string">&quot;_&quot;</span>);<span class="hljs-comment">//替换数字</span><br>        System.out.println(newString);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String类对正则表达式的支持"><a href="#String类对正则表达式的支持" class="headerlink" title="String类对正则表达式的支持"></a>String类对正则表达式的支持</h3><p>String类支持正则的方法</p><p><img src="/2021/04/28/javaclasslib/image-20210516164923486.png" alt="image-20210516164923486"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.regularexpression;<br><span class="hljs-comment">//String类对正则表达式的支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRegexString</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str=<span class="hljs-string">&quot;A1B22C333D4444E55555F&quot;</span>.replaceAll(<span class="hljs-string">&quot;\\d+&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> temp=<span class="hljs-string">&quot;1983-07-27&quot;</span>.matches(<span class="hljs-string">&quot;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;&quot;</span>);<br>        String s[]=<span class="hljs-string">&quot;A1B22C333D4444E55555F&quot;</span>.split(<span class="hljs-string">&quot;\\d+&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;字符串替换操作：&quot;</span>+str);<br>        System.out.println(<span class="hljs-string">&quot;字符串替换验证：&quot;</span>+temp);<br>        System.out.println(<span class="hljs-string">&quot;字符串拆分：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>            System.out.print(s[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/04/28/javaclasslib/image-20210516181254961.png" alt="image-20210516181254961" style="zoom:67%;"><p>注意正则表达式中出现的特殊字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.regularexpression;<br><span class="hljs-comment">//String类对正则表达式的支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRegexString</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String info=<span class="hljs-string">&quot;LXH:98|MLDN:90|LI:99&quot;</span>;<br>        String s[]=info.split(<span class="hljs-string">&quot;\\|&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;字符串的拆分：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>            String s2[]=s[i].split(<span class="hljs-string">&quot;:&quot;</span>);<br>            System.out.println(s2[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\t\t&quot;</span>+s2[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/04/28/javaclasslib/image-20210516201936469.png" alt="image-20210516201936469" style="zoom: 67%;"><h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><p>定时调度：每当一段时间，程序会自动执行，称为定时调度。</p><p>如果要使用定时调度，则必须保证程序始终运行着才可以，也就是说相当于定时调度是在程序之外又启动了一个新的线程。</p><h3 id="Timer类"><a href="#Timer类" class="headerlink" title="Timer类"></a>Timer类</h3><p>Timer类是一个线程设施，可以用来实现在某一个时间或某一段时间后，安排某一个任务执行一次，或定期重复执行。该功能要与TimerTask配合使用。TimerTask类用来实现由Timer安排的一次或重复执行的某一个任务。</p><p>每一个Timer对象对应的是一个线程，因此计时器所执行的任务应该迅速完成，否则可能会延迟后续任务的执行，而这些后续的任务就有可能堆在一起，等到该任务完成后才能快速连续执行。</p><p>Timer类中的常用方法：</p><p><img src="/2021/04/28/javaclasslib/image-20210516204112100.png" alt="image-20210516204112100"></p><h3 id="TimerTask类"><a href="#TimerTask类" class="headerlink" title="TimerTask类"></a>TimerTask类</h3><p>如果一个Timer类想要调度程序的话，则必须使用TimerTask类。</p><p>TimerTask类是一个抽象类，如果想要使用该类，需要自己建立一个类来继承此类，并实现其中的抽象方法。</p><p><img src="/2021/04/28/javaclasslib/image-20210516204454525.png" alt="image-20210516204454525"></p><h3 id="定时操作"><a href="#定时操作" class="headerlink" title="定时操作"></a>定时操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.timer;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-comment">//定时操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTimerTask</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始前时间：&quot;</span>+<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>).format(<span class="hljs-keyword">new</span> Date()));<br>        Timer t=<span class="hljs-keyword">new</span> Timer();<span class="hljs-comment">//建立Timer类对象</span><br>        MyTask myTask=<span class="hljs-keyword">new</span> MyTask();<span class="hljs-comment">//定义任务</span><br>        <span class="hljs-comment">//设置任务的执行，1秒后开始，每2秒重复</span><br>        t.schedule(myTask,<span class="hljs-number">5000</span>,<span class="hljs-number">3000</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//任务调度类要继承TimerTask</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TimerTask</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        SimpleDateFormat simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;当前系统的时间为：&quot;</span>+simpleDateFormat.format(<span class="hljs-keyword">new</span> Date()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/04/28/javaclasslib/image-20210516205811757.png" alt="image-20210516205811757" style="zoom:67%;float:left">]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>泛型</title>
    <link href="/2021/04/20/generic/"/>
    <url>/2021/04/20/generic/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h2><p><strong>背景</strong></p><p>​        java推出泛型以前，程序员可以构建一个元素类型为Object的集合，该集合能够存储任意的数据类型对象，而在使用该集合的过程中，需要程序员明确知道存储每个元素的数据类型，否则很容易引发ClassCastException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo01;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 泛型产生的背景</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList list=<span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        list.add(<span class="hljs-number">100</span>);<br>        list.add(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            Object o=list.get(i);<br>            String str=(String)o;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>出现错误</p><p><img src="/2021/04/20/generic/%E6%B3%9B%E5%9E%8B-01.png" alt="泛型-01"></p><hr><p><strong>泛型的概念</strong></p><p>​        Java泛型（generics）是JDK5中引入的一个新特性，泛型提供了编译时类型安全监测机制，该机制允许我们在编译时检测到非法的类型数据结构。</p><p>​        泛型的本质就是参数化类型，也就是所操作的数据类型被指定为一个参数。</p><p><img src="/2021/04/20/generic/image-20210512093759666.png" alt="泛型02"></p><p>泛型无需转换类型，实现自动装箱与拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        strList.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        strList.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            String s = strList.get(i);<span class="hljs-comment">//无需转换类型</span><br>            System.out.println(s);<br>        &#125;<br>        ArrayList&lt;Integer&gt; intList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        intList.add(<span class="hljs-number">100</span>);<span class="hljs-comment">//这里的100是int，集合石Integer，泛型进行了自动装箱转换为Integer类型。</span><br>        intList.add(<span class="hljs-number">200</span>);<br>        intList.add(<span class="hljs-number">300</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; intList.size(); i++) &#123;<br>            <span class="hljs-keyword">int</span> num = intList.get(i);<span class="hljs-comment">//Integer自动转换为int，实现自动拆箱</span><br>            System.out.println(num);<br>        &#125;<br></code></pre></td></tr></table></figure><p>泛型好处：类型安全，消除了强制类型转换。</p><hr><h2 id="泛型类、接口"><a href="#泛型类、接口" class="headerlink" title="泛型类、接口"></a>泛型类、接口</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><ul><li>泛型类的定义语法</li></ul><hr><p>class 类名称 &lt;泛型标识，泛型标识，···&gt;{</p><p>​    private 泛型标识 变量名；</p><p>​    ······</p><p>}</p><hr><ul><li>常用的泛型标识：T、E、K、V</li></ul><p>泛型类Generic：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo02;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 泛型类的定义</span><br><span class="hljs-comment">* T:泛型标识（类型形参）</span><br><span class="hljs-comment">* T 创建对象的时候你指定具体的数据类型</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generic</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//T是有外部使用类的时候来指定的</span><br>    <span class="hljs-keyword">private</span> T key;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Generic</span><span class="hljs-params">(T key)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setKey</span><span class="hljs-params">(T key)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Generic&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;key=&quot;</span> + key +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Generic&lt;String&gt; strGeneric=<span class="hljs-keyword">new</span> Generic&lt;&gt;(<span class="hljs-string">&quot;abc&quot;</span>);<br>        String key1 = strGeneric.getKey();<br>        System.out.println(key1);<br>        Generic&lt;Integer&gt; integerGeneric=<span class="hljs-keyword">new</span> Generic&lt;&gt;(<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">int</span> key2 = integerGeneric.getKey();<br>        System.out.println(key2);<br>        Generic&lt;Boolean&gt; booleanGeneric=<span class="hljs-keyword">new</span> Generic&lt;&gt;(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">boolean</span> key3 = booleanGeneric.getKey();<br>        System.out.println(key3);<br>        <span class="hljs-comment">//泛型类在创建对象时，未指定类型，将按照Object类型来操作</span><br>        Generic generic=<span class="hljs-keyword">new</span> Generic(<span class="hljs-string">&#x27;A&#x27;</span>);<br>        Object key4 = generic.getKey();<br>        System.out.println(key4);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意：</p><p>泛型类，如果没有指定数据类型，则为Object类型。</p><p>泛型的类型参数只能是类类型（如Integer），不能是基本数据类型（如int）。</p><p>泛型类型在逻辑上可以看成多个不同的类型，但实际上都是相同类型（如上述例子中的strGeneric，integerGeneric都是Generic类型）。</p><hr><h3 id="泛型类-使用"><a href="#泛型类-使用" class="headerlink" title="泛型类-使用"></a>泛型类-使用</h3><p><strong>例子：年终的抽奖器</strong></p><p>抽奖器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo03;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-comment">//泛型类实例：抽奖器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductGetter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//产生一个随机数</span><br>    Random random=<span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">private</span> T product;<span class="hljs-comment">//未知奖品</span><br>    <span class="hljs-comment">//模拟奖品池，存储所有奖品</span><br>    ArrayList&lt;T&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-comment">//放入奖品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addProduct</span><span class="hljs-params">(T t)</span></span>&#123;<br>        list.add(t);<br>    &#125;<br>    <span class="hljs-comment">//获取奖品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getProduct</span><span class="hljs-params">()</span></span>&#123;<br>        product = list.get(random.nextInt(list.size()));<span class="hljs-comment">//随机得到一个奖品</span><br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo03;<br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建抽奖器对象，指定数据类型</span><br>        ProductGetter&lt;String&gt; stringProductGetter=<span class="hljs-keyword">new</span> ProductGetter&lt;&gt;();<br>        String[] strProducts=&#123;<span class="hljs-string">&quot;苹果手机&quot;</span>,<span class="hljs-string">&quot;扫地机器人&quot;</span>,<span class="hljs-string">&quot;小爱智能音箱&quot;</span>,<span class="hljs-string">&quot;巴厘岛双人7日游&quot;</span>&#125;;<br>        <span class="hljs-comment">//给抽奖器中填充奖品</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strProducts.length; i++) &#123;<br>            stringProductGetter.addProduct(strProducts[i]);<br>        &#125;<br>        <span class="hljs-comment">//抽奖</span><br>        String product1 = stringProductGetter.getProduct();<br>        System.out.println(<span class="hljs-string">&quot;恭喜您抽中了：&quot;</span>+product1);<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <br>        ProductGetter&lt;Integer&gt; integerProductGetter=<span class="hljs-keyword">new</span> ProductGetter&lt;&gt;();<br>        Integer[] integerProducts=&#123;<span class="hljs-number">1100</span>,<span class="hljs-number">5200</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">32000</span>&#125;;<br>        <span class="hljs-comment">//给抽奖器中填充奖品</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; integerProducts.length; i++) &#123;<br>            integerProductGetter.addProduct(integerProducts[i]);<br>        &#125;<br>        <span class="hljs-comment">//抽奖</span><br>        Integer product2 = integerProductGetter.getProduct();<br>        System.out.println(<span class="hljs-string">&quot;恭喜您抽中了：&quot;</span>+product2+<span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型类派生子类"><a href="#泛型类派生子类" class="headerlink" title="泛型类派生子类"></a>泛型类派生子类</h3><ul><li><p>子类也是泛型类，子类和父类的泛型类型要一致</p><p>class ChildGeneric<T> extends Generic<T></T></T></p></li><li><p>子类不是泛型类，父类要明确泛型的数据类型</p><p>class ChildGeneric extends Generic<String></String></p></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo04;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestParent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ChildFirst&lt;String&gt; stringChildFirst=<span class="hljs-keyword">new</span> ChildFirst&lt;&gt;();<br>        stringChildFirst.setValue(<span class="hljs-string">&quot;aabbcc&quot;</span>);<br>        String value1 = stringChildFirst.getValue();<br>        System.out.println(value1);<br>        ChildSecond childSecond=<span class="hljs-keyword">new</span> ChildSecond();<br>        childSecond.setValue(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">int</span> value2 = childSecond.getValue();<br>        System.out.println(value2);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">public</span> E value;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(E value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 泛型类派生子类，子类也是泛型类，那么子类的泛型标识要和父类一致</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildFirst</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getValue();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 泛型类派生子类，如果子类不是泛型类，那么父类要明确数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildSecond</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getValue();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(Integer value)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.setValue(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li><p>泛型接口的定义语法</p><hr><p>interface 接口名称&lt;泛型标识，泛型标识，···&gt;{</p><p>​    泛型标识 方法名();</p><p>​    ······</p><p>}</p><hr></li></ul><p><strong>泛型接口的使用</strong></p><ul><li>实现类不是泛型类，接口要明确数据类型</li><li>实现类也是泛型类，实现类和接口的泛型类型要一致</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo05;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGenerator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Apple apple=<span class="hljs-keyword">new</span> Apple();<br>        String key = apple.getKey();<br>        System.out.println(key);<br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br>        Pair&lt;String,Integer&gt; pair=<span class="hljs-keyword">new</span> Pair(<span class="hljs-string">&quot;陈国阳&quot;</span>,<span class="hljs-number">250</span>);<br>        String key1 = pair.getKey();<br>        Integer value = pair.getValue();<br>        System.out.println(key1+<span class="hljs-string">&quot;=&quot;</span>+value);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//泛型接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Generator</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function">T <span class="hljs-title">getKey</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Generator</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello Generic&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//泛型接口的实现类是一个泛型类，那么要保证实现接口的泛型类的泛型标识包含泛型接口的泛型标识</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">T</span>,<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Generator</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> T key;<br>    <span class="hljs-keyword">private</span> E value;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">(T key, E value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><ul><li><p>泛型类，是在实例化类的时候指明泛型的具体类型。</p></li><li><p>泛型方法，是在调用方法的时候指明泛型的具体类型。</p></li></ul><p><strong>泛型方法语法</strong></p><hr><p>修饰符&lt;T,E,…&gt;返回值类型 方法名(形参列表){</p><p>​        方法体…</p><p>}</p><hr><ul><li><p>public与返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。</T></p></li><li><p>只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</T></p></li><li><p><T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</T></p></li><li><p>与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用与表示泛型。</p><p>定义于demo03中的泛型方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 定义一个泛型方法</span><br><span class="hljs-comment">  * list 参数</span><br><span class="hljs-comment">  * &lt;E&gt; 泛型标识，具体类型由调用方法时来指定</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">E <span class="hljs-title">getProduct</span><span class="hljs-params">(ArrayList&lt;E&gt; list)</span></span>&#123;<br>      <span class="hljs-keyword">return</span> list.get(random.nextInt(list.size()));<br>  &#125;<br></code></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo06;<br><span class="hljs-keyword">import</span> com.zhao.demo03.ProductGetter;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-comment">//测试泛型方法（处于demo03中)</span><br><span class="hljs-comment">//在使用时泛型方法与泛型类的类型是相互独立的，就算泛型标识一样也互不影响</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGetProduct</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ProductGetter&lt;Integer&gt; productGetter=<span class="hljs-keyword">new</span> ProductGetter&lt;&gt;();<br>        ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        strList.add(<span class="hljs-string">&quot;马尔代夫双人七日游&quot;</span>);<br>        strList.add(<span class="hljs-string">&quot;五菱宏光mini一台&quot;</span>);<br>        strList.add(<span class="hljs-string">&quot;苹果最新款手机一部&quot;</span>);<br>        <span class="hljs-comment">//泛型方法的调用，类型是通过调用方法的时候来指定的</span><br>        String product1 = productGetter.getProduct(strList);<br>        System.out.println(product1+<span class="hljs-string">&quot;\t&quot;</span>+product1.getClass().getSimpleName());<br>        System.out.println(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br>        ArrayList&lt;Integer&gt; integerList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        integerList.add(<span class="hljs-number">1300</span>);<br>        integerList.add(<span class="hljs-number">4200</span>);<br>        integerList.add(<span class="hljs-number">9999</span>);<br>        Integer product2 = productGetter.getProduct(integerList);<br>        System.out.println(product2+<span class="hljs-string">&quot;\t&quot;</span>+product2.getClass().getSimpleName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态泛型方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 定义静态的泛型方法，采用多个泛型类型</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,E,K&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printType</span><span class="hljs-params">(T t,E e,K k)</span></span>&#123;<br>       System.out.println(t+<span class="hljs-string">&quot;\t&quot;</span>+t.getClass().getSimpleName());<br>       System.out.println(e+<span class="hljs-string">&quot;\t&quot;</span>+e.getClass().getSimpleName());<br>       System.out.println(k+<span class="hljs-string">&quot;\t&quot;</span>+k.getClass().getSimpleName());<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用多个泛型类型的静态泛型方法</span><br>       ProductGetter.printType(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p><img src="/2021/04/20/generic/image-20210513093638018.png" alt="image-20210513093638018"></p><hr><p><strong>泛型方法可变参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 泛型可变参数的定义</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(E... e)</span></span>&#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e.length; i++) &#123;<br>           System.out.println(e[i]);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可变参数泛型方法的调用</span><br>        ProductGetter.print(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        productGetter.print(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>);<br></code></pre></td></tr></table></figure><p>泛型方法总结：</p><p>泛型方法能使方法独立于类而产生变化。</p><p>如果static方法要使用泛型能力，就必须使其成为泛型方法。</p><hr><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><h3 id="什么是类型通配符？"><a href="#什么是类型通配符？" class="headerlink" title="什么是类型通配符？"></a>什么是类型通配符？</h3><ul><li>类型通配符一般是使用”?”代替具体的类型实参。</li><li>所以，类型通配符是类型实参，而不是类型形参。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo07;<br><span class="hljs-comment">//类型通配符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBox</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Box&lt;Number&gt; box1 = <span class="hljs-keyword">new</span> Box&lt;&gt;();<br>        box1.setFirst(<span class="hljs-number">100</span>);<br>        showBox(box1);<br>        Box&lt;Integer&gt; box2 = <span class="hljs-keyword">new</span> Box&lt;&gt;();<br>        box1.setFirst(<span class="hljs-number">100</span>);<br>        showBox(box2);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showBox</span><span class="hljs-params">(Box&lt;?&gt; box)</span></span>&#123;<br>        Object first = box.getFirst();<br>        System.out.println(first);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> E first;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFirst</span><span class="hljs-params">(E first)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型通配符上限"><a href="#类型通配符上限" class="headerlink" title="类型通配符上限"></a>类型通配符上限</h3><p>语法：</p><p>​    类/接口&lt;? extends 实参类型&gt;</p><p>​    要求该泛型的类型，只能是实参类型，或实参类型的子类类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里表示类型通配只能最大通配到Number类型，只能传Number或者Number的子类</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showBox</span><span class="hljs-params">(Box&lt;? extends Number&gt; box)</span></span>&#123;<br>        Number first = box.getFirst();<br>        System.out.println(first);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="类型通配符的下限"><a href="#类型通配符的下限" class="headerlink" title="类型通配符的下限"></a>类型通配符的下限</h3><p>语法：</p><p>​    类/接口&lt;? super 实参类型&gt;</p><p>​    要求该泛型的类型，只能是实参类型，或实参类型的父类类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAnimal</span><span class="hljs-params">(List&lt;? <span class="hljs-keyword">super</span> Cat&gt; list)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>比较器Comparator<T>也是使用了类型通配符的下限。</T></p><p>JDK源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">default</span> Comparator&lt;T&gt; <span class="hljs-title">thenComparing</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; other)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>类型通配符下限案例：Comparator<T></T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//动物类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Animal&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//猫类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cat&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//小猫类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiniCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> level;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MiniCat</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> level)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name, age);<br>        <span class="hljs-keyword">this</span>.level = level;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MiniCat&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, level=&quot;</span> + level +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo08;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestComparatorDown</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//TreeSet&lt;Cat&gt; treeSet=new TreeSet&lt;&gt;(new ComparatorCat());</span><br>        TreeSet&lt;Cat&gt; treeSet=<span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> ComparatorAnimal());<br>        treeSet.add(<span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;Tim&quot;</span>,<span class="hljs-number">23</span>));<br>        treeSet.add(<span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">47</span>));<br>        treeSet.add(<span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;Ami&quot;</span>,<span class="hljs-number">16</span>));<br>        treeSet.add(<span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;Green&quot;</span>,<span class="hljs-number">51</span>));<br>        <span class="hljs-keyword">for</span> (Cat cat : treeSet) &#123;<br>            System.out.println(cat);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//动物比较器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComparatorAnimal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Animal</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Animal o1, Animal o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1.name.compareTo(o2.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//猫比较器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComparatorCat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Cat</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Cat o1, Cat o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1.age-o2.age;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//小猫比较器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComparatorMiniCat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">MiniCat</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(MiniCat o1, MiniCat o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1.level-o2.level;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​        泛型是Java1.5版本才引进的概念，在这之前是没有泛型的，但是，泛型代码能够很好的和之前版本的代码兼容。那是因为，泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除掉，我们称之为–类型擦除。</p><h3 id="无限制类型擦除"><a href="#无限制类型擦除" class="headerlink" title="无限制类型擦除"></a>无限制类型擦除</h3><p><img src="/2021/04/20/generic/image-20210513163111181.png" alt="image-20210513163111181"></p><h3 id="有限制类型擦除"><a href="#有限制类型擦除" class="headerlink" title="有限制类型擦除"></a>有限制类型擦除</h3><p><img src="/2021/04/20/generic/image-20210513163338794.png" alt="image-20210513163338794"></p><h3 id="擦除方法中类型定义的参数"><a href="#擦除方法中类型定义的参数" class="headerlink" title="擦除方法中类型定义的参数"></a>擦除方法中类型定义的参数</h3><p><img src="/2021/04/20/generic/image-20210513163439004.png" alt="image-20210513163439004"></p><p>以上例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo09;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//类型擦除，利用反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestErasure</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Erasure&lt;Integer&gt; erasure=<span class="hljs-keyword">new</span> Erasure&lt;&gt;();<br>        <span class="hljs-comment">//利用反射，获取Erasure类的字节码文件的Class类对象</span><br>        Class&lt;? extends Erasure&gt; aClass = erasure.getClass();<br>        <span class="hljs-comment">//获取所有成员变量</span><br>        Field[] declaredFields = aClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>            <span class="hljs-comment">//打印成员变量的名称和类型</span><br>            System.out.println(declaredField.getName()+<span class="hljs-string">&quot;::&quot;</span>+declaredField.getType().getSimpleName());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br>        <span class="hljs-comment">//通过反射，获取Erasure下的所有方法</span><br>        Method[] declaredMethods = aClass.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            <span class="hljs-comment">//打印方法名和方法的返回值类型</span><br>            System.out.println(declaredMethod.getName()+<span class="hljs-string">&quot;::&quot;</span>+declaredMethod.getReturnType().getSimpleName());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Erasure</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> T key;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setKey</span><span class="hljs-params">(T key)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br>    <span class="hljs-comment">//泛型方法</span><br>    <span class="hljs-keyword">public</span> &lt;T extends List&gt; <span class="hljs-function">T <span class="hljs-title">show</span><span class="hljs-params">(T t)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2021/04/20/generic/image-20210513163722811.png" alt="image-20210513163722811"></p><h3 id="桥接方法"><a href="#桥接方法" class="headerlink" title="桥接方法"></a>桥接方法</h3><p><img src="/2021/04/20/generic/image-20210513163858242.png" alt="image-20210513163858242"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo09;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-comment">//类型擦除3：桥接方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInfo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//字节码文件的类对象</span><br>        Class&lt;InfoImpl&gt; infoClass = InfoImpl.class;<br>        <span class="hljs-comment">//获取所有的方法</span><br>        Method[] declaredMethods = infoClass.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            <span class="hljs-comment">//打印方法名和返回值类型</span><br>            System.out.println(declaredMethod.getName()+<span class="hljs-string">&quot;::&quot;</span>+declaredMethod.getReturnType().getSimpleName());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义了一个泛型接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Info</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function">T <span class="hljs-title">info</span><span class="hljs-params">(T t)</span></span>;<br>&#125;<br><span class="hljs-comment">//定义一个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Info</span>&lt;<span class="hljs-title">Integer</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">info</span><span class="hljs-params">(Integer value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2021/04/20/generic/image-20210513164021449.png" alt="image-20210513164021449"></p><h2 id="泛型与数组"><a href="#泛型与数组" class="headerlink" title="泛型与数组"></a>泛型与数组</h2><h3 id="泛型的数组引用"><a href="#泛型的数组引用" class="headerlink" title="泛型的数组引用"></a>泛型的数组引用</h3><ul><li>可以声明带泛型的数组引用，但是不能直接创建带泛型的数组对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo10;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestArray</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        ArrayList[] list=new ArrayList[5];</span><br><span class="hljs-comment">//        ArrayList&lt;String&gt;[] listArr=list;</span><br>        ArrayList&lt;String&gt;[] listArr=<span class="hljs-keyword">new</span> ArrayList[<span class="hljs-number">5</span>];<br>        ArrayList&lt;Integer&gt; intList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        intList.add(<span class="hljs-number">100</span>);<br>        ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        strList.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-comment">//listArr[0]=intList;</span><br>        listArr[<span class="hljs-number">0</span>]=strList;<br>        <span class="hljs-comment">//list[0]=intList;</span><br>        String s = listArr[<span class="hljs-number">0</span>].get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型数组的创建"><a href="#泛型数组的创建" class="headerlink" title="泛型数组的创建"></a>泛型数组的创建</h3><ul><li>可以通过java.lang.reflect.Array的newInstance(Class<T>,int)创建T[]数组（重点）</T></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo10;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFruit</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Fruit&lt;String&gt; fruit=<span class="hljs-keyword">new</span> Fruit&lt;&gt;(String.class,<span class="hljs-number">3</span>);<br>        fruit.put(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;苹果&quot;</span>);<br>        fruit.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;柿子&quot;</span>);<br>        fruit.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;香蕉&quot;</span>);<br>        System.out.println(Arrays.toString(fruit.getArray()));<br>        System.out.println(fruit.get(<span class="hljs-number">2</span>));<br>        Fruit&lt;Integer&gt; fruit1=<span class="hljs-keyword">new</span> Fruit&lt;&gt;(Integer.class,<span class="hljs-number">3</span>);<br>        fruit1.put(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br>        fruit1.put(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>);<br>        fruit1.put(<span class="hljs-number">2</span>,<span class="hljs-number">300</span>);<br>        System.out.println(Arrays.toString(fruit1.getArray()));<span class="hljs-comment">//遍历输出</span><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fruit</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> T[] array;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fruit</span><span class="hljs-params">(Class&lt;T&gt; tClass,<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>        <span class="hljs-comment">//通过Array.newInstance()创建泛型数组</span><br>        array= (T[])Array.newInstance(tClass,length);<br>    &#125;<br>    <span class="hljs-comment">//填充数组元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,T item)</span></span>&#123;<br>        array[index]=item;<br>    &#125;<br>    <span class="hljs-comment">//获取数组元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> array[index];<br>    &#125;<br>    <span class="hljs-keyword">public</span> T[] getArray()&#123;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/2021/04/20/generic/image-20210513203155826.png" alt="image-20210513203155826"></p><h2 id="泛型和反射"><a href="#泛型和反射" class="headerlink" title="泛型和反射"></a>泛型和反射</h2><p><strong>反射常见的泛型类</strong></p><ul><li>Class<T></T></li><li>Constructor<T></T></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhao.demo11;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-comment">//泛型与反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestReflect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br><span class="hljs-comment">//        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="hljs-comment">//        Constructor&lt;Person&gt; constructor = personClass.getConstructor();</span><br><span class="hljs-comment">//        Person person=constructor.newInstance();</span><br>        Class personClass = Person.class;<br>        Constructor constructor = personClass.getConstructor();<br>        Object o = constructor.newInstance();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
